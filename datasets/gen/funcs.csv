id,func,code,train
6963063,7,"    public static void main(String args[]) {
        int[] mas = { 3, 5, 6, 9, 1, -3, -4, -88 };
        int sort = 0;
        for (int j = 0; j < (mas.length); j++) {
            for (int i = 0; i < mas.length - 1; i++) {
                if (mas[i] > mas[i + 1]) {
                    sort = mas[i];
                    mas[i] = mas[i + 1];
                    mas[i + 1] = sort;
                }
            }
        }
        for (int i = 0; i < mas.length; i++) {
            System.out.print("" "" + mas[i]);
        }
    }
",1
13799349,7,"    void bubbleSort(int ids[]) {
        boolean flag = true;
        int temp;
        while (flag) {
            flag = false;
            for (int i = 0; i < ids.length - 1; i++) if (ids[i] < ids[i + 1]) {
                temp = ids[i];
                ids[i] = ids[i + 1];
                ids[i + 1] = temp;
                flag = true;
            }
        }
    }
",1
9066291,7,"    void sortIds(int a[]) {
        ExecutionTimer t = new ExecutionTimer();
        t.start();
        for (int i = a.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (a[j] > a[j + 1]) {
                    int T = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = T;
                }
            }
        }
        t.end();
        TimerRecordFile timerFile = new TimerRecordFile(""sort"", ""BufferSorting"", ""sortIds"", t.duration());
    }
",1
10174628,7,"    @Override
    public T[] sort(T[] values) {
        super.compareTimes = 0;
        for (int i = 0; i < values.length; i++) {
            for (int j = 0; j < values.length - i - 1; j++) {
                super.compareTimes++;
                if (values[j].compareTo(values[j + 1]) > 0) {
                    T temp = values[j];
                    values[j] = values[j + 1];
                    values[j + 1] = temp;
                }
            }
        }
        return values;
    }
",1
2086684,7,"    private BoardPattern[] getBoardPatterns() {
        Resource[] resources = boardManager.getResources(""boards"");
        BoardPattern[] boardPatterns = new BoardPattern[resources.length];
        for (int i = 0; i < resources.length; i++) boardPatterns[i] = (BoardPattern) resources[i];
        for (int i = 0; i < resources.length; i++) {
            for (int j = 0; j < resources.length - (i + 1); j++) {
                String name1 = boardPatterns[j].getName();
                String name2 = boardPatterns[j + 1].getName();
                if (name1.compareTo(name2) > 0) {
                    BoardPattern tmp = boardPatterns[j];
                    boardPatterns[j] = boardPatterns[j + 1];
                    boardPatterns[j + 1] = tmp;
                }
            }
        }
        return boardPatterns;
    }
",1
4449697,7,"    private int[] sortNodesToGoal(Graph g, int parent, int goal) {
        float a, b;
        int tempI, tempR;
        float tempF;
        int len = g.nodeList[parent].edges.length;
        int[] nodes = new int[len];
        float[] dists = new float[len];
        int[] ref = new int[len];
        if (len == 0) return null;
        if (len == 1) {
            ref[0] = 0;
            return ref;
        }
        for (int i = 0; i < len; i++) {
            nodes[i] = g.getOtherNode(parent, g.nodeList[parent].edges[i]);
            a = g.nodeList[nodes[i]].x - g.nodeList[goal].x;
            b = g.nodeList[nodes[i]].y - g.nodeList[goal].y;
            dists[i] = (float) Math.sqrt(a * a + b * b);
            ref[i] = i;
        }
        for (int i = len - 1; i >= 0; i--) {
            for (int j = 0; j < i; j++) {
                if (dists[j] > dists[j + 1]) {
                    tempI = nodes[j];
                    nodes[j] = nodes[j + 1];
                    nodes[j + 1] = tempI;
                    tempF = dists[j];
                    dists[j] = dists[j + 1];
                    dists[j + 1] = tempF;
                    tempR = ref[j];
                    ref[j] = ref[j + 1];
                    ref[j + 1] = tempR;
                }
            }
        }
        return ref;
    }
",1
8359775,7,"    public static void shakeSort(int[] a) {
        if (a == null) {
            throw new IllegalArgumentException(""Null-pointed array"");
        }
        int k = 0;
        int left = 0;
        int right = a.length - 1;
        while (right - left > 0) {
            k = 0;
            for (int i = 0; i <= right - 1; i++) {
                if (a[i] > a[i + 1]) {
                    k = i;
                    int temp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = temp;
                }
            }
            right = k;
            k = a.length - 1;
            for (int i = left; i <= right - 1; i++) {
                if (a[i] > a[i + 1]) {
                    k = i;
                    int temp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = temp;
                }
            }
            left = k;
        }
    }
",1
81754,7,"    public void Sort(int a[]) {
        for (int i = a.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (a[j] > a[j + 1]) {
                    int temp = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = temp;
                }
            }
        }
    }
",1
8166293,7,"    public static void main(String[] args) {
        int dizi[] = { 23, 78, 45, 8, 3, 32, 56, 39, 92, 28 };
        boolean test = false;
        int kars = 0;
        int tas = 0;
        while (true) {
            for (int j = 0; j < dizi.length - 1; j++) {
                kars++;
                if (dizi[j] > dizi[j + 1]) {
                    int temp = dizi[j];
                    dizi[j] = dizi[j + 1];
                    dizi[j + 1] = temp;
                    test = true;
                    tas++;
                }
            }
            if (!test) {
                break;
            } else {
                test = false;
            }
        }
        for (int i = 0; i < dizi.length; i++) {
            System.out.print(dizi[i] + "" "");
        }
        for (int i = 0; i < 5; i++) {
            System.out.println(""i"" + i);
        }
    }
",1
3365958,7,"    private void bubbleSort(int[] mas) {
        boolean t = true;
        int temp = 0;
        while (t) {
            t = false;
            for (int i = 0; i < mas.length - 1; i++) {
                if (mas[i] > mas[i + 1]) {
                    temp = mas[i];
                    mas[i] = mas[i + 1];
                    mas[i + 1] = temp;
                    t = true;
                }
            }
        }
    }
",1
13295656,7,"    public static int[] BubbleSortDEC(int[] values) {
        boolean change = true;
        int aux;
        int[] indexes = new int[values.length];
        for (int i = 0; i < values.length; i++) {
            indexes[i] = i;
        }
        while (change) {
            change = false;
            for (int i = 0; i < values.length - 1; i++) {
                if (values[i] < values[i + 1]) {
                    aux = values[i];
                    values[i] = values[i + 1];
                    values[i + 1] = aux;
                    aux = indexes[i];
                    indexes[i] = indexes[i + 1];
                    indexes[i + 1] = aux;
                    change = true;
                }
            }
        }
        return (indexes);
    }
",1
6622146,7,"    public Object[] bubblesort(Object[] tosort) {
        Boolean sorting;
        int upperlimit = tosort.length - 1;
        do {
            sorting = false;
            for (int s0 = 0; s0 < upperlimit; s0++) {
                if (tosort[s0].toString().compareTo(tosort[s0 + 1].toString()) < 0) {
                } else if (tosort[s0].toString().compareTo(tosort[s0 + 1].toString()) == 0) {
                    Object[] tosortnew = new Object[tosort.length - 1];
                    for (int tmp = 0; tmp < s0; tmp++) {
                        tosortnew[tmp] = tosort[tmp];
                    }
                    for (int tmp = s0; tmp < tosortnew.length; tmp++) {
                        tosortnew[tmp] = tosort[tmp + 1];
                    }
                    tosort = tosortnew;
                    upperlimit = upperlimit - 1;
                    s0 = s0 - 1;
                } else if (tosort[s0].toString().compareTo(tosort[s0 + 1].toString()) > 0) {
                    String swap = (String) tosort[s0];
                    tosort[s0] = tosort[s0 + 1];
                    tosort[s0 + 1] = swap;
                    sorting = true;
                }
            }
            upperlimit = upperlimit - 1;
        } while (sorting);
        return tosort;
    }
",1
120983,7,"    void sort(int a[]) throws Exception {
        for (int i = a.length; --i >= 0; ) {
            boolean flipped = false;
            for (int j = 0; j < i; j++) {
                if (stopRequested) {
                    return;
                }
                if (a[j] > a[j + 1]) {
                    int T = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = T;
                    flipped = true;
                }
                pause(i, j);
            }
            if (!flipped) {
                return;
            }
        }
    }
",1
7635628,7,"    private void bubbleSort(int values[]) {
        int len = values.length - 1;
        for (int i = 0; i < len; i++) {
            for (int j = 0; j < len - i; j++) {
                if (values[j] > values[j + 1]) {
                    int tmp = values[j];
                    values[j] = values[j + 1];
                    values[j + 1] = tmp;
                }
            }
        }
    }
",1
15822137,7,"    public TableDirectory(RandomAccessFile raf) throws IOException {
        version = raf.readInt();
        numTables = raf.readShort();
        searchRange = raf.readShort();
        entrySelector = raf.readShort();
        rangeShift = raf.readShort();
        entries = new DirectoryEntry[numTables];
        for (int i = 0; i < numTables; i++) {
            entries[i] = new DirectoryEntry(raf);
        }
        boolean modified = true;
        while (modified) {
            modified = false;
            for (int i = 0; i < numTables - 1; i++) {
                if (entries[i].getOffset() > entries[i + 1].getOffset()) {
                    DirectoryEntry temp = entries[i];
                    entries[i] = entries[i + 1];
                    entries[i + 1] = temp;
                    modified = true;
                }
            }
        }
    }
",1
1668091,7,"    protected static int[] sort(int[] arr) {
        for (int i = arr.length - 1; i > 0; i--) {
            for (int j = 0; j < i; j++) {
                if (arr[j] > arr[j + 1]) {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
        return arr;
    }
",1
3198237,7," *
 * @version		1.0
 * @author		Alan Willamson (alan@n-ary.com)
 * @since		JDK1.1.4
 */
public class sort extends java.lang.Object {

    private static String Cal[] = { ""January"", ""February"", ""March"", ""April"", ""May"", ""June"", ""July"", ""August"", ""September"", ""October"", ""November"", ""December"" };

    /**
     * <P>
     * Sorts an array of Strings into asending order
     * <P>
     * @param _data         The array that is to be sorted.
     *
     */
",1
11939522,7,"    public static String[] bubbleSort(String[] unsortedString, boolean ascending) {
        if (unsortedString.length < 2) return unsortedString;
        String[] sortedString = new String[unsortedString.length];
        for (int i = 0; i < unsortedString.length; i++) {
            sortedString[i] = unsortedString[i];
        }
        if (ascending) {
            for (int i = 0; i < sortedString.length - 1; i++) {
                for (int j = 1; j < sortedString.length - 1 - i; j++) if (sortedString[j + 1].compareToIgnoreCase(sortedString[j]) < 0) {
                    String swap = sortedString[j];
                    sortedString[j] = sortedString[j + 1];
                    sortedString[j + 1] = swap;
                }
            }
        } else {
            for (int i = sortedString.length - 2; i >= 0; i--) {
                for (int j = sortedString.length - 2 - i; j >= 0; j--) if (sortedString[j + 1].compareToIgnoreCase(sortedString[j]) > 0) {
                    String swap = sortedString[j];
                    sortedString[j] = sortedString[j + 1];
                    sortedString[j + 1] = swap;
                }
            }
        }
        return sortedString;
    }
",1
477320,7,"    private final void reOrderFriendsListByOnlineStatus() {
        boolean flag = true;
        while (flag) {
            flag = false;
            for (int i = 0; i < friendsCount - 1; i++) if (friendsListOnlineStatus[i] < friendsListOnlineStatus[i + 1]) {
                int j = friendsListOnlineStatus[i];
                friendsListOnlineStatus[i] = friendsListOnlineStatus[i + 1];
                friendsListOnlineStatus[i + 1] = j;
                long l = friendsListLongs[i];
                friendsListLongs[i] = friendsListLongs[i + 1];
                friendsListLongs[i + 1] = l;
                flag = true;
            }
        }
    }
",1
9225969,7,"    public void sort(int[] mas) {
        int temp;
        boolean t = true;
        while (t) {
            t = false;
            for (int i = 0; i < mas.length - 1; i++) {
                if (mas[i] > mas[i + 1]) {
                    temp = mas[i];
                    mas[i] = mas[i + 1];
                    mas[i + 1] = temp;
                    t = true;
                }
            }
        }
    }
",1
7041871,7,"    public static void bubbleSort(int[] array) {
        for (int i = 0; i < array.length - 1; i++) {
            for (int j = 0; j < array.length - i - 1; j++) {
                if (array[j] > array[j + 1]) {
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                }
            }
            System.out.println(""��"" + (i + 1) + ""������"");
            for (int k = 0; k < array.length; k++) {
                System.out.print(array[k] + "" "");
            }
            System.out.println();
        }
    }
",1
6972162,7,"    public void removeDownload() {
        synchronized (mDownloadMgr) {
            int rowCount = mDownloadTable.getSelectedRowCount();
            if (rowCount <= 0) return;
            int[] rows = mDownloadTable.getSelectedRows();
            int[] orderedRows = new int[rows.length];
            Vector downloadFilesToRemove = new Vector();
            for (int i = 0; i < rowCount; i++) {
                int row = rows[i];
                if (row >= mDownloadMgr.getDownloadCount()) return;
                orderedRows[i] = mDownloadSorter.indexes[row];
            }
            mDownloadTable.removeRowSelectionInterval(0, mDownloadTable.getRowCount() - 1);
            for (int i = orderedRows.length - 1; i > 0; i--) {
                for (int j = 0; j < i; j++) {
                    if (orderedRows[j] > orderedRows[j + 1]) {
                        int tmp = orderedRows[j];
                        orderedRows[j] = orderedRows[j + 1];
                        orderedRows[j + 1] = tmp;
                    }
                }
            }
            for (int i = orderedRows.length - 1; i >= 0; i--) {
                mDownloadMgr.removeDownload(orderedRows[i]);
            }
            mainFrame.refreshAllActions();
        }
    }
",1
8359774,7,"    public static void bubbleSort(int[] a) {
        if (a == null) {
            throw new IllegalArgumentException(""Null-pointed array"");
        }
        int right = a.length - 1;
        int k = 0;
        while (right > 0) {
            k = 0;
            for (int i = 0; i <= right - 1; i++) {
                if (a[i] > a[i + 1]) {
                    k = i;
                    int temp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = temp;
                }
            }
            right = k;
        }
    }
",1
5405559,7,"    public void sort(int[] order, double[] values) {
        int temp = 0;
        boolean done = false;
        for (int i = 0; i < values.length; i++) {
            order[i] = i;
        }
        if (desendingValues) {
            while (!done) {
                done = true;
                for (int i = values.length - 2; i >= 0; i--) {
                    if (values[order[i]] < values[order[i + 1]]) {
                        done = false;
                        temp = order[i];
                        order[i] = order[i + 1];
                        order[i + 1] = temp;
                    }
                }
            }
        } else {
            while (!done) {
                done = true;
                for (int i = values.length - 2; i >= 0; i--) {
                    if (values[order[i]] > values[order[i + 1]]) {
                        done = false;
                        temp = order[i];
                        order[i] = order[i + 1];
                        order[i + 1] = temp;
                    }
                }
            }
        }
    }
",1
11374801,7,"    public void init(VerwaltungClient verClient) {
        this.setLayout(new BorderLayout());
        pnl1 = new JPanel();
        pnl1.setLayout(new FlowLayout());
        pnl1.add(new JLabel(Localization.getInstance().getString(""GameOver"")));
        pnl1.setBounds(10, 10, 200, 10);
        pnl2 = new JPanel();
        int a_punkte[];
        int punkte = 0;
        String name;
        String[] a_namen;
        a_punkte = verClient.getA_spielEndpunkte();
        a_namen = verClient.getA_Spielernamen();
        zeilen = new Object[a_punkte.length][2];
        for (int i = 0; i < a_punkte.length; i++) {
            for (int j = 0; j < a_punkte.length - 1 - i; j++) {
                if (a_punkte[j] < a_punkte[j + 1]) {
                    punkte = a_punkte[j];
                    a_punkte[j] = a_punkte[j + 1];
                    a_punkte[j + 1] = punkte;
                    name = a_namen[j];
                    a_namen[j] = a_namen[j + 1];
                    a_namen[j + 1] = name;
                }
            }
        }
        for (int i = 0; i < a_punkte.length; i++) {
            zeilen[i][0] = a_namen[i];
            zeilen[i][1] = new String("""" + a_punkte[i]);
        }
        tabelle = new JTable(zeilen, spalten);
        tabelle.setEnabled(false);
        pane = new JScrollPane(tabelle);
        pnl2.add(pane);
        pnl3 = new JPanel();
        JButton btn = new JButton(Localization.getInstance().getString(""OK""));
        btn.addActionListener(this);
        pnl3.add(btn);
        this.add(BorderLayout.CENTER, pnl2);
        this.add(BorderLayout.NORTH, pnl1);
        this.add(BorderLayout.SOUTH, pnl3);
        this.pack();
        this.setResizable(false);
        this.setVisible(true);
    }
",1
12122419,7,"    private Vector _sort(Pair[] ps, String id, int num) {
        Vector ret = new Vector();
        boolean swapped = true;
        int j = 0;
        Pair tmp;
        while (swapped) {
            swapped = false;
            j++;
            for (int i = 0; i < ps.length - j; i++) {
                if (ps[i].c > ps[i + 1].c) {
                    tmp = ps[i];
                    ps[i] = ps[i + 1];
                    ps[i + 1] = tmp;
                    swapped = true;
                }
            }
        }
        int m = Math.min(num, ps.length);
        for (int i = m - 1; i >= 0; i--) {
            if (id == null) ret.addElement(ps[i].n); else if (ps[i].n.startsWith(id) && !ps[i].n.equals(id)) ret.addElement(ps[i].n);
        }
        return ret;
    }
",1
9075137,7,"    public boolean implies(Permission permission) {
        if (!permissionClass.isInstance(permission)) {
            return false;
        }
        GCFPermission perm = (GCFPermission) permission;
        int perm_low = perm.getMinPort();
        int perm_high = perm.getMaxPort();
        Enumeration search = permissions.elements();
        int count = permissions.size();
        int port_low[] = new int[count];
        int port_high[] = new int[count];
        int port_range_count = 0;
        while (search.hasMoreElements()) {
            GCFPermission cur_perm = (GCFPermission) search.nextElement();
            if (cur_perm.impliesByHost(perm)) {
                if (cur_perm.impliesByPorts(perm)) {
                    return true;
                }
                port_low[port_range_count] = cur_perm.getMinPort();
                port_high[port_range_count] = cur_perm.getMaxPort();
                port_range_count++;
            }
        }
        for (int i = 0; i < port_range_count; i++) {
            for (int j = 0; j < port_range_count - 1; j++) {
                if (port_low[j] > port_low[j + 1]) {
                    int tmp = port_low[j];
                    port_low[j] = port_low[j + 1];
                    port_low[j + 1] = tmp;
                    tmp = port_high[j];
                    port_high[j] = port_high[j + 1];
                    port_high[j + 1] = tmp;
                }
            }
        }
        int current_low = port_low[0];
        int current_high = port_high[0];
        for (int i = 1; i < port_range_count; i++) {
            if (port_low[i] > current_high + 1) {
                if (current_low <= perm_low && current_high >= perm_high) {
                    return true;
                }
                if (perm_low <= current_high) {
                    return false;
                }
                current_low = port_low[i];
                current_high = port_high[i];
            } else {
                if (current_high < port_high[i]) {
                    current_high = port_high[i];
                }
            }
        }
        return (current_low <= perm_low && current_high >= perm_high);
    }
",1
529986,7,"    void bsort(int a[], int lo, int hi) throws Exception {
        for (int j = hi; j > lo; j--) {
            for (int i = lo; i < j; i++) {
                if (a[i] > a[i + 1]) {
                    int T = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = T;
                    pause();
                }
            }
        }
    }
",1
17630906,7,"    public static int[] sortAscending(float input[]) {
        int[] order = new int[input.length];
        for (int i = 0; i < order.length; i++) order[i] = i;
        for (int i = input.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (input[j] > input[j + 1]) {
                    float mem = input[j];
                    input[j] = input[j + 1];
                    input[j + 1] = mem;
                    int id = order[j];
                    order[j] = order[j + 1];
                    order[j + 1] = id;
                }
            }
        }
        return order;
    }
",1
878123,7,"    void sort(int a[]) throws Exception {
        int j;
        int limit = a.length;
        int st = -1;
        while (st < limit) {
            boolean flipped = false;
            st++;
            limit--;
            for (j = st; j < limit; j++) {
                if (stopRequested) {
                    return;
                }
                if (a[j] > a[j + 1]) {
                    int T = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = T;
                    flipped = true;
                    pause(st, limit);
                }
            }
            if (!flipped) {
                return;
            }
            for (j = limit; --j >= st; ) {
                if (stopRequested) {
                    return;
                }
                if (a[j] > a[j + 1]) {
                    int T = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = T;
                    flipped = true;
                    pause(st, limit);
                }
            }
            if (!flipped) {
                return;
            }
        }
        pause(st, limit);
    }
",1
6302678,7,"    public ISpieler[] sortiereSpielerRamsch(ISpieler[] spieler) {
        for (int i = 0; i < spieler.length; i++) {
            for (int j = 0; j < spieler.length - 1; j++) {
                if (werteAugen(spieler[j].getStiche()) > werteAugen(spieler[j + 1].getStiche())) {
                    ISpieler a = spieler[j];
                    spieler[j] = spieler[j + 1];
                    spieler[j + 1] = a;
                }
            }
        }
        return spieler;
    }
",1
1920567,7,"    public static void sortSeries(double[] series) {
        if (series == null) {
            throw new IllegalArgumentException(""Incorrect series. It's null-pointed"");
        }
        int k = 0;
        int right = series.length - 1;
        while (right > 0) {
            k = 0;
            for (int i = 0; i <= right - 1; i++) {
                if (series[i] > series[i + 1]) {
                    k = i;
                    double tmp = series[i];
                    series[i] = series[i + 1];
                    series[i + 1] = tmp;
                }
            }
            right = k;
        }
    }
",1
17630907,7,"    public static int[] sortDescending(int input[]) {
        int[] order = new int[input.length];
        for (int i = 0; i < order.length; i++) order[i] = i;
        for (int i = input.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (input[j] < input[j + 1]) {
                    int mem = input[j];
                    input[j] = input[j + 1];
                    input[j + 1] = mem;
                    int id = order[j];
                    order[j] = order[j + 1];
                    order[j + 1] = id;
                }
            }
        }
        return order;
    }
",1
12483251,7,"    private void weightAndPlaceClasses() {
        int rows = getRows();
        for (int curRow = _maxPackageRank; curRow < rows; curRow++) {
            xPos = getHGap() / 2;
            BOTLObjectSourceDiagramNode[] rowObject = getObjectsInRow(curRow);
            for (int i = 0; i < rowObject.length; i++) {
                if (curRow == _maxPackageRank) {
                    int nDownlinks = rowObject[i].getDownlinks().size();
                    rowObject[i].setWeight((nDownlinks > 0) ? (1 / nDownlinks) : 2);
                } else {
                    Vector uplinks = rowObject[i].getUplinks();
                    int nUplinks = uplinks.size();
                    if (nUplinks > 0) {
                        float average_col = 0;
                        for (int j = 0; j < uplinks.size(); j++) {
                            average_col += ((BOTLObjectSourceDiagramNode) (uplinks.elementAt(j))).getColumn();
                        }
                        average_col /= nUplinks;
                        rowObject[i].setWeight(average_col);
                    } else {
                        rowObject[i].setWeight(1000);
                    }
                }
            }
            int[] pos = new int[rowObject.length];
            for (int i = 0; i < pos.length; i++) {
                pos[i] = i;
            }
            boolean swapped = true;
            while (swapped) {
                swapped = false;
                for (int i = 0; i < pos.length - 1; i++) {
                    if (rowObject[pos[i]].getWeight() > rowObject[pos[i + 1]].getWeight()) {
                        int temp = pos[i];
                        pos[i] = pos[i + 1];
                        pos[i + 1] = temp;
                        swapped = true;
                    }
                }
            }
            for (int i = 0; i < pos.length; i++) {
                rowObject[pos[i]].setColumn(i);
                if ((i > _vMax) && (rowObject[pos[i]].getUplinks().size() == 0) && (rowObject[pos[i]].getDownlinks().size() == 0)) {
                    if (getColumns(rows - 1) > _vMax) {
                        rows++;
                    }
                    rowObject[pos[i]].setRank(rows - 1);
                } else {
                    rowObject[pos[i]].setLocation(new Point(xPos, yPos));
                    xPos += rowObject[pos[i]].getSize().getWidth() + getHGap();
                }
            }
            yPos += getRowHeight(curRow) + getVGap();
        }
    }
",1
17583188,7,"    byte[] toByteArray() throws IOException {
        DataElement element = new DataElement(DataElement.DATSEQ);
        final boolean sort = true;
        if (sort) {
            int[] sortIDs = new int[attributes.size()];
            int k = 0;
            for (Enumeration e = attributes.keys(); e.hasMoreElements(); ) {
                Integer key = (Integer) e.nextElement();
                sortIDs[k] = key.intValue();
                k++;
            }
            for (int i = 0; i < sortIDs.length; i++) {
                for (int j = 0; j < sortIDs.length - i - 1; j++) {
                    if (sortIDs[j] > sortIDs[j + 1]) {
                        int temp = sortIDs[j];
                        sortIDs[j] = sortIDs[j + 1];
                        sortIDs[j + 1] = temp;
                    }
                }
            }
            for (int i = 0; i < sortIDs.length; i++) {
                element.addElement(new DataElement(DataElement.U_INT_2, sortIDs[i]));
                element.addElement(getAttributeValue(sortIDs[i]));
            }
        } else {
            for (Enumeration e = attributes.keys(); e.hasMoreElements(); ) {
                Integer key = (Integer) e.nextElement();
                element.addElement(new DataElement(DataElement.U_INT_2, key.intValue()));
                element.addElement((DataElement) attributes.get(key));
            }
        }
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        (new SDPOutputStream(out)).writeElement(element);
        return out.toByteArray();
    }
",1
15287811,7,"    public static int[] sort(int[] v) {
        int i;
        int l = v.length;
        int[] index = new int[l];
        for (i = 0; i < l; i++) index[i] = i;
        int tmp;
        boolean change = true;
        while (change) {
            change = false;
            for (i = 0; i < l - 1; i++) {
                if (v[index[i]] > v[index[i + 1]]) {
                    tmp = index[i];
                    index[i] = index[i + 1];
                    index[i + 1] = tmp;
                    change = true;
                }
            }
        }
        return index;
    }
",1
11261440,7,"    private static String func(String sf) {
        int total = 0, temp;
        String fnctn[] = { ""sin"", ""cos"", ""tan"", ""log"", ""ln"", ""sqrt"", ""!"" }, temp2 = """";
        int pos[] = new int[7];
        for (int n = 0; n < fnctn.length; n++) {
            pos[n] = sf.lastIndexOf(fnctn[n]);
        }
        for (int m = 0; m < fnctn.length; m++) {
            total += pos[m];
        }
        if (total == -7) {
            return sf;
        }
        for (int i = pos.length; i > 1; i--) {
            for (int j = 0; j < i - 1; j++) {
                if (pos[j] < pos[j + 1]) {
                    temp = pos[j];
                    pos[j] = pos[j + 1];
                    pos[j + 1] = temp;
                    temp2 = fnctn[j];
                    fnctn[j] = fnctn[j + 1];
                    fnctn[j + 1] = temp2;
                }
            }
        }
        if (fnctn[0].equals(""sin"")) {
            if ((pos[0] == 0 || sf.charAt(pos[0] - 1) != 'a')) {
                return func(Functions.sine(sf, pos[0], false));
            } else {
                return func(Functions.asin(sf, pos[0], false));
            }
        } else if (fnctn[0].equals(""cos"")) {
            if ((pos[0] == 0 || sf.charAt(pos[0] - 1) != 'a')) {
                return func(Functions.cosine(sf, pos[0], false));
            } else {
                return func(Functions.acos(sf, pos[0], false));
            }
        } else if (fnctn[0].equals(""tan"")) {
            if ((pos[0] == 0 || sf.charAt(pos[0] - 1) != 'a')) {
                return func(Functions.tangent(sf, pos[0], false));
            } else {
                return func(Functions.atan(sf, pos[0], false));
            }
        } else if (fnctn[0].equals(""log"")) {
            return func(Functions.logarithm(sf, pos[0]));
        } else if (fnctn[0].equals(""ln"")) {
            return func(Functions.lnat(sf, pos[0]));
        } else if (fnctn[0].equals(""sqrt"")) {
            return func(Functions.sqroot(sf, pos[0]));
        } else {
            return func(Functions.factorial(sf, pos[0]));
        }
    }
",1
15609433,7,"    public static int[] bubbleSort2(int[] source) {
        if (null != source && source.length > 0) {
            boolean flag = false;
            while (!flag) {
                for (int i = 0; i < source.length - 1; i++) {
                    if (source[i] > source[i + 1]) {
                        int temp = source[i];
                        source[i] = source[i + 1];
                        source[i + 1] = temp;
                        break;
                    } else if (i == source.length - 2) {
                        flag = true;
                    }
                }
            }
        }
        return source;
    }
",1
7227330,7,"    private void sort() {
        boolean unsortiert = true;
        Datei tmp = null;
        while (unsortiert) {
            unsortiert = false;
            for (int i = 0; i < this.size - 1; i++) {
                if (dateien[i] != null && dateien[i + 1] != null) {
                    if (dateien[i].compareTo(dateien[i + 1]) < 0) {
                        tmp = dateien[i];
                        dateien[i] = dateien[i + 1];
                        dateien[i + 1] = tmp;
                        unsortiert = true;
                    }
                }
            }
        }
    }
",1
6016307,7,"    public static int[] rank(double[] data) {
        int[] rank = new int[data.length];
        for (int i = 0; i < data.length; i++) rank[i] = i;
        boolean swapped;
        double dtmp;
        int i, j, itmp;
        for (i = 0; i < data.length - 1; i++) {
            swapped = false;
            for (j = 0; j < data.length - 1 - i; j++) {
                if (data[j] < data[j + 1]) {
                    dtmp = data[j];
                    data[j] = data[j + 1];
                    data[j + 1] = dtmp;
                    itmp = rank[j];
                    rank[j] = rank[j + 1];
                    rank[j + 1] = itmp;
                    swapped = true;
                }
            }
        }
        return rank;
    }
",1
3338750,7,"    public void sortPlayersTurn() {
        Token tempT = new Token();
        Player tempP = new Player(""test name"", tempT);
        int tempN = 0;
        boolean exchangeMade = true;
        for (int i = 0; i < playerNum - 1 && exchangeMade; i++) {
            exchangeMade = false;
            for (int j = 0; j < playerNum - 1 - i; j++) {
                if (diceSum[j] < diceSum[j + 1]) {
                    tempP = players[j];
                    tempN = diceSum[j];
                    players[j] = players[j + 1];
                    diceSum[j] = diceSum[j + 1];
                    players[j + 1] = tempP;
                    diceSum[j + 1] = tempN;
                    exchangeMade = true;
                }
            }
        }
    }
",1
5682569,7,"    public void metodo1() {
        int temp;
        boolean flagDesordenado = true;
        while (flagDesordenado) {
            flagDesordenado = false;
            for (int i = 0; i < this.tamanoTabla - 1; i++) {
                if (tabla[i] > tabla[i + 1]) {
                    flagDesordenado = true;
                    temp = tabla[i];
                    tabla[i] = tabla[i + 1];
                    tabla[i + 1] = temp;
                }
            }
        }
    }
",1
15069644,7,"    public String elementsSearch() {
        int index = 0;
        for (int i1 = 0; i1 < 6; i1++) {
            for (int i2 = 0; i2 < 5; i2++) {
                if (index < 5) {
                    if (initialMatrix[i1][i2] > 0) {
                        finalMatrix[index] = initialMatrix[i1][i2];
                        index++;
                    }
                } else break;
            }
        }
        int temp;
        for (int i = 0; i < finalMatrix.length; i++) {
            for (int j = 0; j < finalMatrix.length - 1; j++) {
                if (finalMatrix[j] < finalMatrix[j + 1]) {
                    temp = finalMatrix[j];
                    finalMatrix[j] = finalMatrix[j + 1];
                    finalMatrix[j + 1] = temp;
                }
            }
        }
        String result = """";
        for (int k : finalMatrix) result += k + "" "";
        return result;
    }
",1
21273056,7,"    public RobotList<Resource> sort_decr_Resource(RobotList<Resource> list, String field) {
        int length = list.size();
        Index_value[] resource_dist = new Index_value[length];
        if (field.equals("""") || field.equals(""location"")) {
            Location cur_loc = this.getLocation();
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, distance(cur_loc, list.get(i).location));
            }
        } else if (field.equals(""energy"")) {
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, list.get(i).energy);
            }
        } else if (field.equals(""ammostash"")) {
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, list.get(i).ammostash);
            }
        } else if (field.equals(""speed"")) {
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, list.get(i).speed);
            }
        } else if (field.equals(""health"")) {
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, list.get(i).health);
            }
        } else {
            say(""impossible to sort list - nothing modified"");
            return list;
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (resource_dist[i].value < resource_dist[i + 1].value) {
                    Index_value a = resource_dist[i];
                    resource_dist[i] = resource_dist[i + 1];
                    resource_dist[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Resource> new_resource_list = new RobotList<Resource>(Resource.class);
        for (int i = 0; i < length; i++) {
            new_resource_list.addLast(list.get(resource_dist[i].index));
        }
        return new_resource_list;
    }
",1
8054454,7,"    public void sortIndexes() {
        int i, j, count;
        int t;
        count = m_ItemIndexes.length;
        for (i = 1; i < count; i++) {
            for (j = 0; j < count - i; j++) {
                if (m_ItemIndexes[j] > m_ItemIndexes[j + 1]) {
                    t = m_ItemIndexes[j];
                    m_ItemIndexes[j] = m_ItemIndexes[j + 1];
                    m_ItemIndexes[j + 1] = t;
                }
            }
        }
    }
",1
7327761,7,"    private void fillProductResult() {
        this.ProductResult = new int[this.linearDim + 1][this.linearDim + 1];
        for (int j = 1; j < this.linearDim + 1; j++) {
            this.ProductResult[1][j] = j;
            this.ProductResult[j][1] = j;
        }
        int[] doubleSort = new int[2 * this.GradeCount - 1];
        int permuteCounter = 0;
        int doubleKey = 0;
        int j = 2;
        int k = 2;
        int m = 1;
        int n = 1;
        int tempSort = 0;
        for (j = 2; j < this.linearDim + 1; j++) {
            for (k = 2; k < this.linearDim + 1; k++) {
                permuteCounter = 0;
                doubleKey = 0;
                for (m = 1; m < this.GradeCount; m++) {
                    doubleSort[m] = this.ABasis.getBasis(j, m);
                    doubleSort[m + this.GradeCount - 1] = this.ABasis.getBasis(k, m);
                }
                m = 1;
                for (m = 1; m < 2 * this.GradeCount - 1; m++) {
                    for (n = 1; n < 2 * this.GradeCount - 2; n++) {
                        if (doubleSort[n] > doubleSort[n + 1]) {
                            tempSort = doubleSort[n];
                            doubleSort[n] = doubleSort[n + 1];
                            doubleSort[n + 1] = tempSort;
                            if (!(doubleSort[n] == 0 || doubleSort[n + 1] == 0)) {
                                permuteCounter += 1;
                            }
                        }
                    }
                    n = 1;
                }
                m = 1;
                permuteCounter = permuteCounter % 2;
                for (m = 1; m < 2 * this.GradeCount - 2; m++) {
                    if (doubleSort[m] == 0) continue;
                    if (doubleSort[m] == doubleSort[m + 1]) {
                        tempSort = doubleSort[m];
                        doubleSort[m] = 0;
                        doubleSort[m + 1] = 0;
                        m += 1;
                        permuteCounter += intSignature[tempSort - 1];
                    }
                }
                m = 1;
                permuteCounter = permuteCounter % 2;
                for (m = 1; m < 2 * this.GradeCount - 1; m++) {
                    for (n = 1; n < 2 * this.GradeCount - 2; n++) {
                        if (doubleSort[n] > doubleSort[n + 1]) {
                            tempSort = doubleSort[n];
                            doubleSort[n] = doubleSort[n + 1];
                            doubleSort[n + 1] = tempSort;
                            if (!(doubleSort[n] == 0 || doubleSort[n + 1] == 0)) {
                                permuteCounter += 1;
                            }
                        }
                    }
                    n = 1;
                }
                m = 1;
                permuteCounter = permuteCounter % 2;
                for (m = 1; m < 2 * this.GradeCount - 1; m++) {
                    doubleKey += (int) doubleSort[m] * Math.pow(this.GradeCount, 2 * this.GradeCount - 2 - m);
                }
                m = 1;
                this.ProductResult[j][k] = 0;
                for (m = 1; m < this.linearDim + 1; m++) {
                    if (doubleKey == this.ABasis.getBasisKey(m)) {
                        this.ProductResult[j][k] = m * (int) Math.pow(-1.0, permuteCounter);
                        break;
                    }
                }
                m = 1;
            }
            k = 2;
        }
    }
",1
17630910,7,"    public static int[] sortDescending(double input[]) {
        int[] order = new int[input.length];
        for (int i = 0; i < order.length; i++) order[i] = i;
        for (int i = input.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (input[j] < input[j + 1]) {
                    double mem = input[j];
                    input[j] = input[j + 1];
                    input[j + 1] = mem;
                    int id = order[j];
                    order[j] = order[j + 1];
                    order[j + 1] = id;
                }
            }
        }
        return order;
    }
",1
521113,7,"    int[] slowSort() {
        int[] values = getValues();
        int n = values.length;
        for (int pass = 1; pass < n; pass++) {
            for (int i = 0; i < n - pass; i++) {
                if (values[i] > values[i + 1]) {
                    int temp = values[i];
                    values[i] = values[i + 1];
                    values[i + 1] = temp;
                }
            }
        }
        return values;
    }
",1
13243880,7,"    public int[] bubbleSort(int[] data) {
        for (int i = 0; i < data.length; i++) {
            for (int j = 0; j < data.length - i - 1; j++) {
                if (data[j] > data[j + 1]) {
                    int temp = data[j];
                    data[j] = data[j + 1];
                    data[j + 1] = temp;
                }
            }
        }
        return data;
    }
",1
17630908,7,"    public static int[] sortDescending(float input[]) {
        int[] order = new int[input.length];
        for (int i = 0; i < order.length; i++) order[i] = i;
        for (int i = input.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (input[j] < input[j + 1]) {
                    float mem = input[j];
                    input[j] = input[j + 1];
                    input[j + 1] = mem;
                    int id = order[j];
                    order[j] = order[j + 1];
                    order[j + 1] = id;
                }
            }
        }
        return order;
    }
",1
6920765,7,"    public static final void sequence(int[] list, int above) {
        int temp, max, min;
        boolean tag = true;
        for (int i = list.length - 1; i >= 0; i--) {
            for (int j = 0; j < i; j++) {
                if (above < 0) {
                    if (list[j] < list[j + 1]) {
                        temp = list[j];
                        list[j] = list[j + 1];
                        list[j + 1] = temp;
                        tag = true;
                    }
                } else {
                    if (list[j] > list[j + 1]) {
                        temp = list[j];
                        list[j] = list[j + 1];
                        list[j + 1] = temp;
                        tag = true;
                    }
                }
            }
            if (tag == false) break;
        }
    }
",1
13696846,7,"    protected void sort(int a) {
        int[] masiv = new int[a];
        Random rand = new Random();
        for (int i = 0; i <= a; i++) {
            masiv[i] = rand.nextInt(200);
        }
        int d;
        for (int j = 0; j < a; j++) {
            for (int i = 0; i < a; i++) {
                if (masiv[i] < masiv[i + 1]) {
                } else {
                    d = masiv[i];
                    masiv[i] = masiv[i + 1];
                    masiv[i + 1] = d;
                }
            }
        }
        while (a != 0) {
            System.out.println(""sort: "" + masiv[a]);
            a--;
        }
    }
",1
6925921,7,"    public static void bubbleSort(int[] polje) {
        boolean swapped;
        int temp;
        int n = polje.length;
        do {
            swapped = false;
            n--;
            for (int i = 0; i < n - 1; i++) {
                if (polje[i] > polje[i + 1]) {
                    temp = polje[i];
                    polje[i] = polje[i + 1];
                    polje[i + 1] = temp;
                    swapped = true;
                }
            }
        } while (swapped);
    }
",1
11371499,7,"    public void sortArray() {
        int a;
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array.length - 1; j++) {
                if (array[j] < array[j + 1]) {
                    a = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = a;
                }
            }
        }
    }
",1
1363,7,"    public static int[] bubbleSortOtimizado(int... a) {
        boolean swapped;
        int n = a.length - 2;
        do {
            swapped = false;
            for (int i = 0; i <= n; i++) {
                if (a[i] > a[i + 1]) {
                    int tmp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = tmp;
                    swapped = true;
                }
            }
            n = n - 1;
        } while (swapped);
        return a;
    }
",1
22088424,7,"    public static void main(String[] args) {
        int[] mas = { 5, 10, 20, -30, 55, -60, 9, -40, -20 };
        int next;
        for (int a = 0; a < mas.length; a++) {
            for (int i = 0; i < mas.length - 1; i++) {
                if (mas[i] > mas[i + 1]) {
                    next = mas[i];
                    mas[i] = mas[i + 1];
                    mas[i + 1] = next;
                }
            }
        }
        for (int i = 0; i < mas.length; i++) System.out.print("" "" + mas[i]);
    }
",1
17985016,7,"    public void setRandom(boolean random) {
        this.random = random;
        if (random) {
            possibleScores = new int[NUM_SCORES];
            for (int i = 0; i < NUM_SCORES - 1; i++) {
                getRandomScore: while (true) {
                    int score = (int) (Math.random() * 20) + 1;
                    for (int j = 0; j < i; j++) {
                        if (score == possibleScores[j]) {
                            continue getRandomScore;
                        }
                    }
                    possibleScores[i] = score;
                    break;
                }
            }
            possibleScores[NUM_SCORES - 1] = 25;
            boolean sorted = false;
            while (!sorted) {
                sorted = true;
                for (int i = 0; i < NUM_SCORES - 1; i++) {
                    if (possibleScores[i] > possibleScores[i + 1]) {
                        int t = possibleScores[i];
                        possibleScores[i] = possibleScores[i + 1];
                        possibleScores[i + 1] = t;
                        sorted = false;
                    }
                }
            }
            setPossibleScores(possibleScores);
        }
    }
",1
14132423,7,"    public static void bubble_sort(int[] objects, int len) {
        for (int i = len; --i >= 0; ) {
            boolean flipped = false;
            for (int j = 0; j < i; j++) {
                if (objects[j + 1] < objects[j]) {
                    int tmp = objects[j];
                    objects[j] = objects[j + 1];
                    objects[j + 1] = tmp;
                    flipped = true;
                }
            }
            if (!flipped) return;
        }
    }
",1
16375558,7,"    private void sort() {
        for (int i = 0; i < density.length; i++) {
            for (int j = density.length - 2; j >= i; j--) {
                if (density[j] > density[j + 1]) {
                    KDNode n = nonEmptyNodesArray[j];
                    nonEmptyNodesArray[j] = nonEmptyNodesArray[j + 1];
                    nonEmptyNodesArray[j + 1] = n;
                    double d = density[j];
                    density[j] = density[j + 1];
                    density[j + 1] = d;
                }
            }
        }
    }
",1
14132422,7,"    public static void bubble_sort(Sortable[] objects) {
        for (int i = objects.length; --i >= 0; ) {
            boolean flipped = false;
            for (int j = 0; j < i; j++) {
                if (objects[j].greater_than(objects[j + 1])) {
                    Sortable tmp = objects[j];
                    objects[j] = objects[j + 1];
                    objects[j + 1] = tmp;
                    flipped = true;
                }
            }
            if (!flipped) return;
        }
    }
",1
3673682,7,"    private void DrawModel(Graphics offg, int obj_num, boolean object, float h, float s, int vt_num, int fc_num) {
        int px[] = new int[3];
        int py[] = new int[3];
        int count = 0;
        int tmp[] = new int[fc_num];
        double tmp_depth[] = new double[fc_num];
        rotate(vt_num);
        offg.setColor(Color.black);
        for (int i = 0; i < fc_num; i++) {
            double a1 = fc[i].vt1.x - fc[i].vt0.x;
            double a2 = fc[i].vt1.y - fc[i].vt0.y;
            double a3 = fc[i].vt1.z - fc[i].vt0.z;
            double b1 = fc[i].vt2.x - fc[i].vt1.x;
            double b2 = fc[i].vt2.y - fc[i].vt1.y;
            double b3 = fc[i].vt2.z - fc[i].vt1.z;
            fc[i].nx = a2 * b3 - a3 * b2;
            fc[i].ny = a3 * b1 - a1 * b3;
            fc[i].nz = a1 * b2 - a2 * b1;
            if (fc[i].nz < 0) {
                fc[i].nx = a2 * b3 - a3 * b2;
                fc[i].ny = a3 * b1 - a1 * b3;
                tmp[count] = i;
                tmp_depth[count] = fc[i].getDepth();
                count++;
            }
        }
        int lim = count - 1;
        do {
            int m = 0;
            for (int n = 0; n <= lim - 1; n++) {
                if (tmp_depth[n] < tmp_depth[n + 1]) {
                    double t = tmp_depth[n];
                    tmp_depth[n] = tmp_depth[n + 1];
                    tmp_depth[n + 1] = t;
                    int ti = tmp[n];
                    tmp[n] = tmp[n + 1];
                    tmp[n + 1] = ti;
                    m = n;
                }
            }
            lim = m;
        } while (lim != 0);
        for (int m = 0; m < count; m++) {
            int i = tmp[m];
            double l = Math.sqrt(fc[i].nx * fc[i].nx + fc[i].ny * fc[i].ny + fc[i].nz * fc[i].nz);
            test(offg, i, l, h, s);
            px[0] = (int) (fc[i].vt0.x * m_Scale + centerp.x);
            py[0] = (int) (-fc[i].vt0.y * m_Scale + centerp.y);
            px[1] = (int) (fc[i].vt1.x * m_Scale + centerp.x);
            py[1] = (int) (-fc[i].vt1.y * m_Scale + centerp.y);
            px[2] = (int) (fc[i].vt2.x * m_Scale + centerp.x);
            py[2] = (int) (-fc[i].vt2.y * m_Scale + centerp.y);
            offg.fillPolygon(px, py, 3);
        }
        if (labelFlag && object) {
            offg.setFont(Fonts.FONT_REAL);
            offg.drawString(d_con.getPointerData().getRealObjName(obj_num), (int) ((fc[0].vt0.x + 10) * m_Scale + centerp.x), (int) (-(fc[0].vt0.y + 10) * m_Scale + centerp.y));
        }
    }
",1
8786313,7,"    @DeclarePerfMonTimer(""SortingTest.bubbleSort"")
    private void bubbleSort(int values[]) {
        int len = values.length - 1;
        for (int i = 0; i < len; i++) {
            for (int j = 0; j < len - i; j++) {
                if (values[j] > values[j + 1]) {
                    int tmp = values[j];
                    values[j] = values[j + 1];
                    values[j + 1] = tmp;
                }
            }
        }
    }
",1
2086683,7,"    private PieceSet[] getPieceSets() {
        Resource[] resources = boardManager.getResources(""pieces"");
        PieceSet[] pieceSets = new PieceSet[resources.length];
        for (int i = 0; i < resources.length; i++) pieceSets[i] = (PieceSet) resources[i];
        for (int i = 0; i < resources.length; i++) {
            for (int j = 0; j < resources.length - (i + 1); j++) {
                String name1 = pieceSets[j].getName();
                String name2 = pieceSets[j + 1].getName();
                if (name1.compareTo(name2) > 0) {
                    PieceSet tmp = pieceSets[j];
                    pieceSets[j] = pieceSets[j + 1];
                    pieceSets[j + 1] = tmp;
                }
            }
        }
        return pieceSets;
    }
",1
2067794,7,"    public SingularValueDecomposition(Matrix Arg) {
        double[][] A = Arg.getArrayCopy();
        m = Arg.getRowDimension();
        n = Arg.getColumnDimension();
        int nu = Math.min(m, n);
        s = new double[Math.min(m + 1, n)];
        U = new double[m][nu];
        V = new double[n][n];
        double[] e = new double[n];
        double[] work = new double[m];
        boolean wantu = true;
        boolean wantv = true;
        int nct = Math.min(m - 1, n);
        int nrt = Math.max(0, Math.min(n - 2, m));
        for (int k = 0; k < Math.max(nct, nrt); k++) {
            if (k < nct) {
                s[k] = 0;
                for (int i = k; i < m; i++) {
                    s[k] = Maths.hypot(s[k], A[i][k]);
                }
                if (s[k] != 0.0) {
                    if (A[k][k] < 0.0) {
                        s[k] = -s[k];
                    }
                    for (int i = k; i < m; i++) {
                        A[i][k] /= s[k];
                    }
                    A[k][k] += 1.0;
                }
                s[k] = -s[k];
            }
            for (int j = k + 1; j < n; j++) {
                if ((k < nct) & (s[k] != 0.0)) {
                    double t = 0;
                    for (int i = k; i < m; i++) {
                        t += A[i][k] * A[i][j];
                    }
                    t = -t / A[k][k];
                    for (int i = k; i < m; i++) {
                        A[i][j] += t * A[i][k];
                    }
                }
                e[j] = A[k][j];
            }
            if (wantu & (k < nct)) {
                for (int i = k; i < m; i++) {
                    U[i][k] = A[i][k];
                }
            }
            if (k < nrt) {
                e[k] = 0;
                for (int i = k + 1; i < n; i++) {
                    e[k] = Maths.hypot(e[k], e[i]);
                }
                if (e[k] != 0.0) {
                    if (e[k + 1] < 0.0) {
                        e[k] = -e[k];
                    }
                    for (int i = k + 1; i < n; i++) {
                        e[i] /= e[k];
                    }
                    e[k + 1] += 1.0;
                }
                e[k] = -e[k];
                if ((k + 1 < m) & (e[k] != 0.0)) {
                    for (int i = k + 1; i < m; i++) {
                        work[i] = 0.0;
                    }
                    for (int j = k + 1; j < n; j++) {
                        for (int i = k + 1; i < m; i++) {
                            work[i] += e[j] * A[i][j];
                        }
                    }
                    for (int j = k + 1; j < n; j++) {
                        double t = -e[j] / e[k + 1];
                        for (int i = k + 1; i < m; i++) {
                            A[i][j] += t * work[i];
                        }
                    }
                }
                if (wantv) {
                    for (int i = k + 1; i < n; i++) {
                        V[i][k] = e[i];
                    }
                }
            }
        }
        int p = Math.min(n, m + 1);
        if (nct < n) {
            s[nct] = A[nct][nct];
        }
        if (m < p) {
            s[p - 1] = 0.0;
        }
        if (nrt + 1 < p) {
            e[nrt] = A[nrt][p - 1];
        }
        e[p - 1] = 0.0;
        if (wantu) {
            for (int j = nct; j < nu; j++) {
                for (int i = 0; i < m; i++) {
                    U[i][j] = 0.0;
                }
                U[j][j] = 1.0;
            }
            for (int k = nct - 1; k >= 0; k--) {
                if (s[k] != 0.0) {
                    for (int j = k + 1; j < nu; j++) {
                        double t = 0;
                        for (int i = k; i < m; i++) {
                            t += U[i][k] * U[i][j];
                        }
                        t = -t / U[k][k];
                        for (int i = k; i < m; i++) {
                            U[i][j] += t * U[i][k];
                        }
                    }
                    for (int i = k; i < m; i++) {
                        U[i][k] = -U[i][k];
                    }
                    U[k][k] = 1.0 + U[k][k];
                    for (int i = 0; i < k - 1; i++) {
                        U[i][k] = 0.0;
                    }
                } else {
                    for (int i = 0; i < m; i++) {
                        U[i][k] = 0.0;
                    }
                    U[k][k] = 1.0;
                }
            }
        }
        if (wantv) {
            for (int k = n - 1; k >= 0; k--) {
                if ((k < nrt) & (e[k] != 0.0)) {
                    for (int j = k + 1; j < nu; j++) {
                        double t = 0;
                        for (int i = k + 1; i < n; i++) {
                            t += V[i][k] * V[i][j];
                        }
                        t = -t / V[k + 1][k];
                        for (int i = k + 1; i < n; i++) {
                            V[i][j] += t * V[i][k];
                        }
                    }
                }
                for (int i = 0; i < n; i++) {
                    V[i][k] = 0.0;
                }
                V[k][k] = 1.0;
            }
        }
        int pp = p - 1;
        int iter = 0;
        double eps = Math.pow(2.0, -52.0);
        double tiny = Math.pow(2.0, -966.0);
        while (p > 0) {
            int k, kase;
            for (k = p - 2; k >= -1; k--) {
                if (k == -1) {
                    break;
                }
                if (Math.abs(e[k]) <= tiny + eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {
                    e[k] = 0.0;
                    break;
                }
            }
            if (k == p - 2) {
                kase = 4;
            } else {
                int ks;
                for (ks = p - 1; ks >= k; ks--) {
                    if (ks == k) {
                        break;
                    }
                    double t = (ks != p ? Math.abs(e[ks]) : 0.) + (ks != k + 1 ? Math.abs(e[ks - 1]) : 0.);
                    if (Math.abs(s[ks]) <= tiny + eps * t) {
                        s[ks] = 0.0;
                        break;
                    }
                }
                if (ks == k) {
                    kase = 3;
                } else if (ks == p - 1) {
                    kase = 1;
                } else {
                    kase = 2;
                    k = ks;
                }
            }
            k++;
            switch(kase) {
                case 1:
                    {
                        double f = e[p - 2];
                        e[p - 2] = 0.0;
                        for (int j = p - 2; j >= k; j--) {
                            double t = Maths.hypot(s[j], f);
                            double cs = s[j] / t;
                            double sn = f / t;
                            s[j] = t;
                            if (j != k) {
                                f = -sn * e[j - 1];
                                e[j - 1] = cs * e[j - 1];
                            }
                            if (wantv) {
                                for (int i = 0; i < n; i++) {
                                    t = cs * V[i][j] + sn * V[i][p - 1];
                                    V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];
                                    V[i][j] = t;
                                }
                            }
                        }
                    }
                    break;
                case 2:
                    {
                        double f = e[k - 1];
                        e[k - 1] = 0.0;
                        for (int j = k; j < p; j++) {
                            double t = Maths.hypot(s[j], f);
                            double cs = s[j] / t;
                            double sn = f / t;
                            s[j] = t;
                            f = -sn * e[j];
                            e[j] = cs * e[j];
                            if (wantu) {
                                for (int i = 0; i < m; i++) {
                                    t = cs * U[i][j] + sn * U[i][k - 1];
                                    U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];
                                    U[i][j] = t;
                                }
                            }
                        }
                    }
                    break;
                case 3:
                    {
                        double scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));
                        double sp = s[p - 1] / scale;
                        double spm1 = s[p - 2] / scale;
                        double epm1 = e[p - 2] / scale;
                        double sk = s[k] / scale;
                        double ek = e[k] / scale;
                        double b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2.0;
                        double c = (sp * epm1) * (sp * epm1);
                        double shift = 0.0;
                        if ((b != 0.0) | (c != 0.0)) {
                            shift = Math.sqrt(b * b + c);
                            if (b < 0.0) {
                                shift = -shift;
                            }
                            shift = c / (b + shift);
                        }
                        double f = (sk + sp) * (sk - sp) + shift;
                        double g = sk * ek;
                        for (int j = k; j < p - 1; j++) {
                            double t = Maths.hypot(f, g);
                            double cs = f / t;
                            double sn = g / t;
                            if (j != k) {
                                e[j - 1] = t;
                            }
                            f = cs * s[j] + sn * e[j];
                            e[j] = cs * e[j] - sn * s[j];
                            g = sn * s[j + 1];
                            s[j + 1] = cs * s[j + 1];
                            if (wantv) {
                                for (int i = 0; i < n; i++) {
                                    t = cs * V[i][j] + sn * V[i][j + 1];
                                    V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];
                                    V[i][j] = t;
                                }
                            }
                            t = Maths.hypot(f, g);
                            cs = f / t;
                            sn = g / t;
                            s[j] = t;
                            f = cs * e[j] + sn * s[j + 1];
                            s[j + 1] = -sn * e[j] + cs * s[j + 1];
                            g = sn * e[j + 1];
                            e[j + 1] = cs * e[j + 1];
                            if (wantu && (j < m - 1)) {
                                for (int i = 0; i < m; i++) {
                                    t = cs * U[i][j] + sn * U[i][j + 1];
                                    U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];
                                    U[i][j] = t;
                                }
                            }
                        }
                        e[p - 2] = f;
                        iter = iter + 1;
                    }
                    break;
                case 4:
                    {
                        if (s[k] <= 0.0) {
                            s[k] = (s[k] < 0.0 ? -s[k] : 0.0);
                            if (wantv) {
                                for (int i = 0; i <= pp; i++) {
                                    V[i][k] = -V[i][k];
                                }
                            }
                        }
                        while (k < pp) {
                            if (s[k] >= s[k + 1]) {
                                break;
                            }
                            double t = s[k];
                            s[k] = s[k + 1];
                            s[k + 1] = t;
                            if (wantv && (k < n - 1)) {
                                for (int i = 0; i < n; i++) {
                                    t = V[i][k + 1];
                                    V[i][k + 1] = V[i][k];
                                    V[i][k] = t;
                                }
                            }
                            if (wantu && (k < m - 1)) {
                                for (int i = 0; i < m; i++) {
                                    t = U[i][k + 1];
                                    U[i][k + 1] = U[i][k];
                                    U[i][k] = t;
                                }
                            }
                            k++;
                        }
                        iter = 0;
                        p--;
                    }
                    break;
            }
        }
    }
",1
12176858,7,"    void sortclasses() {
        int i, j;
        boolean domore;
        vclassptr = new int[numc];
        for (i = 0; i < numc; i++) vclassptr[i] = i;
        domore = true;
        while (domore == true) {
            domore = false;
            for (i = 0; i < numc - 1; i++) {
                if (vclassctr[vclassptr[i]] < vclassctr[vclassptr[i + 1]]) {
                    int temp = vclassptr[i];
                    vclassptr[i] = vclassptr[i + 1];
                    vclassptr[i + 1] = temp;
                    domore = true;
                }
            }
        }
    }
",1
4272289,7,"    public static int[] sortstring(int[] a1) {
        int temp;
        for (int j = 0; j < (a1.length * a1.length); j++) {
            for (int i = 0; i < a1.length - 1; i++) {
                if (a1[i] > a1[i + 1]) {
                    temp = a1[i];
                    a1[i] = a1[i + 1];
                    a1[i + 1] = temp;
                }
            }
        }
        return a1;
    }
",1
22026286,7,"    public static void main(String args[]) {
        int i, j, l;
        short NUMNUMBERS = 100;
        short numbers[] = new short[NUMNUMBERS];
        printIntro();
        int time = (int) System.currentTimeMillis();
        for (i = 0; i < NUMNUMBERS; i++) {
            numbers[i] = (short) (NUMNUMBERS - 1 - i);
        }
        for (i = 0; i < NUMNUMBERS; i++) {
            for (j = 0; j < NUMNUMBERS - i - 1; j++) {
                if (numbers[j] > numbers[j + 1]) {
                    short temp = numbers[j];
                    numbers[j] = numbers[j + 1];
                    numbers[j + 1] = temp;
                }
            }
            if (WANT_PROGRESS) {
                printProgress();
            }
        }
        time = (int) System.currentTimeMillis() - time;
        System.out.print(time);
        System.out.print(""End\n"");
    }
",1
9221721,7,"    public SOCTradeOffer makeOffer(SOCPossiblePiece targetPiece) {
        D.ebugPrintln(""***** MAKE OFFER *****"");
        if (targetPiece == null) {
            return null;
        }
        SOCTradeOffer offer = null;
        SOCResourceSet targetResources = null;
        switch(targetPiece.getType()) {
            case SOCPossiblePiece.CARD:
                targetResources = SOCGame.CARD_SET;
                break;
            case SOCPossiblePiece.ROAD:
                targetResources = SOCGame.ROAD_SET;
                break;
            case SOCPossiblePiece.SETTLEMENT:
                targetResources = SOCGame.SETTLEMENT_SET;
                break;
            case SOCPossiblePiece.CITY:
                targetResources = SOCGame.CITY_SET;
                break;
        }
        SOCResourceSet ourResources = ourPlayerData.getResources();
        D.ebugPrintln(""*** targetResources = "" + targetResources);
        D.ebugPrintln(""*** ourResources = "" + ourResources);
        if (ourResources.contains(targetResources)) {
            return offer;
        }
        if (ourResources.getAmount(SOCResourceConstants.UNKNOWN) > 0) {
            D.ebugPrintln(""AGG WE HAVE UNKNOWN RESOURCES !!!! %%%%%%%%%%%%%%%%%%%%%%%%%%%%"");
            return offer;
        }
        SOCTradeOffer batna = getOfferToBank(targetResources);
        D.ebugPrintln(""*** BATNA = "" + batna);
        SOCBuildingSpeedEstimate estimate = new SOCBuildingSpeedEstimate(ourPlayerData.getNumbers());
        SOCResourceSet giveResourceSet = new SOCResourceSet();
        SOCResourceSet getResourceSet = new SOCResourceSet();
        int batnaBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
        D.ebugPrintln(""*** batnaBuildingTime = "" + batnaBuildingTime);
        if (batna != null) {
            batnaBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, batna.getGiveSet(), batna.getGetSet(), estimate);
        }
        D.ebugPrintln(""*** batnaBuildingTime = "" + batnaBuildingTime);
        int[] rollsPerResource = estimate.getRollsPerResource();
        int[] neededRsrc = new int[5];
        int[] notNeededRsrc = new int[5];
        int neededRsrcCount = 0;
        int notNeededRsrcCount = 0;
        for (int rsrcType = SOCResourceConstants.CLAY; rsrcType <= SOCResourceConstants.WOOD; rsrcType++) {
            if (targetResources.getAmount(rsrcType) > 0) {
                neededRsrc[neededRsrcCount] = rsrcType;
                neededRsrcCount++;
            } else {
                notNeededRsrc[notNeededRsrcCount] = rsrcType;
                notNeededRsrcCount++;
            }
        }
        for (int j = neededRsrcCount - 1; j >= 0; j--) {
            for (int i = 0; i < j; i++) {
                if (rollsPerResource[neededRsrc[i]] > rollsPerResource[neededRsrc[i + 1]]) {
                    int tmp = neededRsrc[i];
                    neededRsrc[i] = neededRsrc[i + 1];
                    neededRsrc[i + 1] = tmp;
                }
            }
        }
        if (D.ebugOn) {
            for (int i = 0; i < neededRsrcCount; i++) {
                D.ebugPrintln(""NEEDED RSRC: "" + neededRsrc[i] + "" : "" + rollsPerResource[neededRsrc[i]]);
            }
        }
        for (int j = notNeededRsrcCount - 1; j >= 0; j--) {
            for (int i = 0; i < j; i++) {
                if (rollsPerResource[notNeededRsrc[i]] > rollsPerResource[notNeededRsrc[i + 1]]) {
                    int tmp = notNeededRsrc[i];
                    notNeededRsrc[i] = notNeededRsrc[i + 1];
                    notNeededRsrc[i + 1] = tmp;
                }
            }
        }
        if (D.ebugOn) {
            for (int i = 0; i < notNeededRsrcCount; i++) {
                D.ebugPrintln(""NOT-NEEDED RSRC: "" + notNeededRsrc[i] + "" : "" + rollsPerResource[notNeededRsrc[i]]);
            }
        }
        boolean[] someoneIsSellingResource = new boolean[SOCResourceConstants.MAXPLUSONE];
        for (int rsrcType = SOCResourceConstants.CLAY; rsrcType <= SOCResourceConstants.WOOD; rsrcType++) {
            someoneIsSellingResource[rsrcType] = false;
            for (int pn = 0; pn < SOCGame.MAXPLAYERS; pn++) {
                if ((pn != ourPlayerData.getPlayerNumber()) && (isSellingResource[pn][rsrcType])) {
                    someoneIsSellingResource[rsrcType] = true;
                    D.ebugPrintln(""*** player "" + pn + "" is selling "" + rsrcType);
                    break;
                }
            }
        }
        int getRsrcIdx = neededRsrcCount - 1;
        while ((getRsrcIdx >= 0) && ((ourResources.getAmount(neededRsrc[getRsrcIdx]) >= targetResources.getAmount(neededRsrc[getRsrcIdx])) || (!someoneIsSellingResource[neededRsrc[getRsrcIdx]]))) {
            getRsrcIdx--;
        }
        if (getRsrcIdx >= 0) {
            D.ebugPrintln(""*** getRsrc = "" + neededRsrc[getRsrcIdx]);
            getResourceSet.add(1, neededRsrc[getRsrcIdx]);
            D.ebugPrintln(""*** offer should be null : offer = "" + offer);
            int giveRsrcIdx = 0;
            while ((giveRsrcIdx < notNeededRsrcCount) && (offer == null)) {
                D.ebugPrintln(""*** ourResources.getAmount("" + notNeededRsrc[giveRsrcIdx] + "") = "" + ourResources.getAmount(notNeededRsrc[giveRsrcIdx]));
                if (ourResources.getAmount(notNeededRsrc[giveRsrcIdx]) > 0) {
                    giveResourceSet.clear();
                    giveResourceSet.add(1, notNeededRsrc[giveRsrcIdx]);
                    offer = makeOfferAux(giveResourceSet, getResourceSet, neededRsrc[getRsrcIdx]);
                    D.ebugPrintln(""*** offer = "" + offer);
                    int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                    D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                }
                giveRsrcIdx++;
            }
            D.ebugPrintln(""*** ourResources = "" + ourResources);
            if (offer == null) {
                int giveRsrcIdx1 = 0;
                while ((giveRsrcIdx1 < neededRsrcCount) && (offer == null)) {
                    D.ebugPrintln(""*** ourResources.getAmount("" + neededRsrc[giveRsrcIdx1] + "") = "" + ourResources.getAmount(neededRsrc[giveRsrcIdx1]));
                    D.ebugPrintln(""*** targetResources.getAmount("" + neededRsrc[giveRsrcIdx1] + "") = "" + targetResources.getAmount(neededRsrc[giveRsrcIdx1]));
                    if ((ourResources.getAmount(neededRsrc[giveRsrcIdx1]) > targetResources.getAmount(neededRsrc[giveRsrcIdx1])) && (neededRsrc[giveRsrcIdx1] != neededRsrc[getRsrcIdx])) {
                        giveResourceSet.clear();
                        giveResourceSet.add(1, neededRsrc[giveRsrcIdx1]);
                        int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                        if ((offerBuildingTime < batnaBuildingTime) || ((batna != null) && (offerBuildingTime == batnaBuildingTime) && (giveResourceSet.getTotal() < batna.getGiveSet().getTotal()))) {
                            offer = makeOfferAux(giveResourceSet, getResourceSet, neededRsrc[getRsrcIdx]);
                            D.ebugPrintln(""*** offer = "" + offer);
                            D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                        }
                    }
                    giveRsrcIdx1++;
                }
            }
            D.ebugPrintln(""*** ourResources = "" + ourResources);
            SOCResourceSet leftovers = ourResources.copy();
            leftovers.subtract(targetResources);
            D.ebugPrintln(""*** leftovers = "" + leftovers);
            if (offer == null) {
                int giveRsrcIdx1 = 0;
                int giveRsrcIdx2 = 0;
                while ((giveRsrcIdx1 < notNeededRsrcCount) && (offer == null)) {
                    if (ourResources.getAmount(notNeededRsrc[giveRsrcIdx1]) > 0) {
                        while ((giveRsrcIdx2 < notNeededRsrcCount) && (offer == null)) {
                            giveResourceSet.clear();
                            giveResourceSet.add(1, notNeededRsrc[giveRsrcIdx1]);
                            giveResourceSet.add(1, notNeededRsrc[giveRsrcIdx2]);
                            if (ourResources.contains(giveResourceSet)) {
                                int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                                if ((offerBuildingTime < batnaBuildingTime) || ((batna != null) && (offerBuildingTime == batnaBuildingTime) && (giveResourceSet.getTotal() < batna.getGiveSet().getTotal()))) {
                                    offer = makeOfferAux(giveResourceSet, getResourceSet, neededRsrc[getRsrcIdx]);
                                    D.ebugPrintln(""*** offer = "" + offer);
                                    D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                                }
                            }
                            giveRsrcIdx2++;
                        }
                        giveRsrcIdx2 = 0;
                        while ((giveRsrcIdx2 < neededRsrcCount) && (offer == null)) {
                            if (neededRsrc[giveRsrcIdx2] != neededRsrc[getRsrcIdx]) {
                                giveResourceSet.clear();
                                giveResourceSet.add(1, notNeededRsrc[giveRsrcIdx1]);
                                giveResourceSet.add(1, neededRsrc[giveRsrcIdx2]);
                                if (leftovers.contains(giveResourceSet)) {
                                    int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                                    if ((offerBuildingTime < batnaBuildingTime) || ((batna != null) && (offerBuildingTime == batnaBuildingTime) && (giveResourceSet.getTotal() < batna.getGiveSet().getTotal()))) {
                                        offer = makeOfferAux(giveResourceSet, getResourceSet, neededRsrc[getRsrcIdx]);
                                        D.ebugPrintln(""*** offer = "" + offer);
                                        D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                                    }
                                }
                            }
                            giveRsrcIdx2++;
                        }
                    }
                    giveRsrcIdx1++;
                }
                giveRsrcIdx1 = 0;
                giveRsrcIdx2 = 0;
                while ((giveRsrcIdx1 < neededRsrcCount) && (offer == null)) {
                    if ((leftovers.getAmount(neededRsrc[giveRsrcIdx1]) > 0) && (neededRsrc[giveRsrcIdx1] != neededRsrc[getRsrcIdx])) {
                        while ((giveRsrcIdx2 < notNeededRsrcCount) && (offer == null)) {
                            giveResourceSet.clear();
                            giveResourceSet.add(1, neededRsrc[giveRsrcIdx1]);
                            giveResourceSet.add(1, notNeededRsrc[giveRsrcIdx2]);
                            if (leftovers.contains(giveResourceSet)) {
                                int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                                if ((offerBuildingTime < batnaBuildingTime) || ((batna != null) && (offerBuildingTime == batnaBuildingTime) && (giveResourceSet.getTotal() < batna.getGiveSet().getTotal()))) {
                                    offer = makeOfferAux(giveResourceSet, getResourceSet, neededRsrc[getRsrcIdx]);
                                    D.ebugPrintln(""*** offer = "" + offer);
                                    D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                                }
                            }
                            giveRsrcIdx2++;
                        }
                        giveRsrcIdx2 = 0;
                        while ((giveRsrcIdx2 < neededRsrcCount) && (offer == null)) {
                            if (neededRsrc[giveRsrcIdx2] != neededRsrc[getRsrcIdx]) {
                                giveResourceSet.clear();
                                giveResourceSet.add(1, neededRsrc[giveRsrcIdx1]);
                                giveResourceSet.add(1, neededRsrc[giveRsrcIdx2]);
                                if (leftovers.contains(giveResourceSet)) {
                                    int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                                    if ((offerBuildingTime < batnaBuildingTime) || ((batna != null) && (offerBuildingTime == batnaBuildingTime) && (giveResourceSet.getTotal() < batna.getGiveSet().getTotal()))) {
                                        offer = makeOfferAux(giveResourceSet, getResourceSet, neededRsrc[getRsrcIdx]);
                                        D.ebugPrintln(""*** offer = "" + offer);
                                        D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                                    }
                                }
                            }
                            giveRsrcIdx2++;
                        }
                    }
                    giveRsrcIdx1++;
                }
            }
        }
        if (offer == null) {
            SOCResourceSet leftovers = ourResources.copy();
            leftovers.subtract(targetResources);
            D.ebugPrintln(""*** leftovers = "" + leftovers);
            int getRsrcIdx2 = notNeededRsrcCount - 1;
            while ((getRsrcIdx2 >= 0) && (!someoneIsSellingResource[neededRsrc[getRsrcIdx2]])) {
                getRsrcIdx2--;
            }
            while ((getRsrcIdx2 >= 0) && (offer == null)) {
                getResourceSet.clear();
                getResourceSet.add(1, notNeededRsrc[getRsrcIdx2]);
                leftovers.add(1, notNeededRsrc[getRsrcIdx2]);
                if (offer == null) {
                    int giveRsrcIdx1 = 0;
                    while ((giveRsrcIdx1 < notNeededRsrcCount) && (offer == null)) {
                        if ((leftovers.getAmount(notNeededRsrc[giveRsrcIdx1]) > 0) && (notNeededRsrc[giveRsrcIdx1] != notNeededRsrc[getRsrcIdx2])) {
                            leftovers.subtract(1, notNeededRsrc[giveRsrcIdx1]);
                            if (getOfferToBank(targetResources, leftovers) != null) {
                                giveResourceSet.clear();
                                giveResourceSet.add(1, notNeededRsrc[giveRsrcIdx1]);
                                int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                                if (offerBuildingTime < batnaBuildingTime) {
                                    offer = makeOfferAux(giveResourceSet, getResourceSet, notNeededRsrc[getRsrcIdx2]);
                                    D.ebugPrintln(""*** offer = "" + offer);
                                    D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                                }
                            }
                            leftovers.add(1, notNeededRsrc[giveRsrcIdx1]);
                        }
                        giveRsrcIdx1++;
                    }
                }
                if (offer == null) {
                    int giveRsrcIdx1 = 0;
                    while ((giveRsrcIdx1 < neededRsrcCount) && (offer == null)) {
                        if (leftovers.getAmount(neededRsrc[giveRsrcIdx1]) > 0) {
                            leftovers.subtract(1, neededRsrc[giveRsrcIdx1]);
                            if (getOfferToBank(targetResources, leftovers) != null) {
                                giveResourceSet.clear();
                                giveResourceSet.add(1, neededRsrc[giveRsrcIdx1]);
                                int offerBuildingTime = getETAToTargetResources(ourPlayerData, targetResources, giveResourceSet, getResourceSet, estimate);
                                if (offerBuildingTime < batnaBuildingTime) {
                                    offer = makeOfferAux(giveResourceSet, getResourceSet, notNeededRsrc[getRsrcIdx2]);
                                    D.ebugPrintln(""*** offer = "" + offer);
                                    D.ebugPrintln(""*** offerBuildingTime = "" + offerBuildingTime);
                                }
                            }
                            leftovers.add(1, neededRsrc[giveRsrcIdx1]);
                        }
                        giveRsrcIdx1++;
                    }
                }
                leftovers.subtract(1, notNeededRsrc[getRsrcIdx2]);
                getRsrcIdx2--;
            }
        }
        return offer;
    }
",1
15757836,7,"    private int[] sort(int n) {
        int[] mas = new int[n];
        Random rand = new Random();
        for (int i = 0; i < n; i++) {
            mas[i] = rand.nextInt(10) + 1;
        }
        boolean t = true;
        int tmp = 0;
        while (t) {
            t = false;
            for (int i = 0; i < mas.length - 1; i++) {
                if (mas[i] > mas[i + 1]) {
                    tmp = mas[i];
                    mas[i] = mas[i + 1];
                    mas[i + 1] = tmp;
                    t = true;
                }
            }
        }
        return mas;
    }
",1
19972831,7,"    public static int[] simplex_reverse_sort(int[] vertices) {
        if (vertices.length <= 1) return vertices;
        for (int j = vertices.length - 1; j > 0; j--) {
            for (int i = 0; i < j; i++) {
                if (vertices[i + 1] > vertices[i]) {
                    int dummy = vertices[i];
                    vertices[i] = vertices[i + 1];
                    vertices[i + 1] = dummy;
                }
            }
        }
        return vertices;
    }
",1
8794510,7,"    public static void bubbleSort(Auto[] xs) {
        boolean unsorted = true;
        while (unsorted) {
            unsorted = false;
            for (int i = 0; i < xs.length - 1; i++) {
                if (!(xs[i].getPreis() >= xs[i + 1].getPreis())) {
                    Auto dummy = xs[i];
                    xs[i] = xs[i + 1];
                    xs[i + 1] = dummy;
                    unsorted = true;
                }
            }
        }
    }
",1
12065181,7,"    private void sortMasters() {
        masterCounter = 0;
        for (int i = 0; i < maxID; i++) {
            if (users[i].getMasterPoints() > 0) {
                masterHandleList[masterCounter] = users[i].getHandle();
                masterPointsList[masterCounter] = users[i].getMasterPoints();
                masterCounter = masterCounter + 1;
            }
        }
        for (int i = masterCounter; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (masterPointsList[j] > masterPointsList[j + 1]) {
                    int tempp = masterPointsList[j];
                    String temppstring = masterHandleList[j];
                    masterPointsList[j] = masterPointsList[j + 1];
                    masterHandleList[j] = masterHandleList[j + 1];
                    masterPointsList[j + 1] = tempp;
                    masterHandleList[j + 1] = temppstring;
                }
            }
        }
    }
",1
10479536,7,"    private void bubbleSort(int values[]) {
        PerfMonTimer timerOuter = PerfMonTimer.start(""SortingTest.bubbleSort"");
        try {
            int len = values.length - 1;
            for (int i = 0; i < len; i++) {
                for (int j = 0; j < len - i; j++) {
                    if (values[j] > values[j + 1]) {
                        int tmp = values[j];
                        values[j] = values[j + 1];
                        values[j + 1] = tmp;
                    }
                }
            }
        } finally {
            PerfMonTimer.stop(timerOuter);
        }
    }
",1
21100204,7,"    public void greatestIncrease(int maxIterations) {
        double[] increase = new double[numModels];
        int[] id = new int[numModels];
        Model md = new Model();
        double oldPerf = 1;
        for (int i = 0; i < numModels; i++) {
            md.addModel(models[i], false);
            increase[i] = oldPerf - md.getLoss();
            id[i] = i;
            oldPerf = md.getLoss();
        }
        for (int i = 0; i < numModels; i++) {
            for (int j = 0; j < numModels - 1 - i; j++) {
                if (increase[j] < increase[j + 1]) {
                    double increasetemp = increase[j];
                    int temp = id[j];
                    increase[j] = increase[j + 1];
                    id[j] = id[j + 1];
                    increase[j + 1] = increasetemp;
                    id[j + 1] = temp;
                }
            }
        }
        for (int i = 0; i < maxIterations; i++) {
            addToEnsemble(models[id[i]]);
            if (report) ensemble.report(models[id[i]].getName(), allSets);
            updateBestModel();
        }
    }
",1
12646326,7,"    private void weightAndPlaceClasses() {
        int rows = getRows();
        for (int curRow = _maxPackageRank; curRow < rows; curRow++) {
            xPos = getHGap() / 2;
            BOTLRuleDiagramNode[] rowObject = getObjectsInRow(curRow);
            for (int i = 0; i < rowObject.length; i++) {
                if (curRow == _maxPackageRank) {
                    int nDownlinks = rowObject[i].getDownlinks().size();
                    rowObject[i].setWeight((nDownlinks > 0) ? (1 / nDownlinks) : 2);
                } else {
                    Vector uplinks = rowObject[i].getUplinks();
                    int nUplinks = uplinks.size();
                    if (nUplinks > 0) {
                        float average_col = 0;
                        for (int j = 0; j < uplinks.size(); j++) {
                            average_col += ((BOTLRuleDiagramNode) (uplinks.elementAt(j))).getColumn();
                        }
                        average_col /= nUplinks;
                        rowObject[i].setWeight(average_col);
                    } else {
                        rowObject[i].setWeight(1000);
                    }
                }
            }
            int[] pos = new int[rowObject.length];
            for (int i = 0; i < pos.length; i++) {
                pos[i] = i;
            }
            boolean swapped = true;
            while (swapped) {
                swapped = false;
                for (int i = 0; i < pos.length - 1; i++) {
                    if (rowObject[pos[i]].getWeight() > rowObject[pos[i + 1]].getWeight()) {
                        int temp = pos[i];
                        pos[i] = pos[i + 1];
                        pos[i + 1] = temp;
                        swapped = true;
                    }
                }
            }
            for (int i = 0; i < pos.length; i++) {
                rowObject[pos[i]].setColumn(i);
                if ((i > _vMax) && (rowObject[pos[i]].getUplinks().size() == 0) && (rowObject[pos[i]].getDownlinks().size() == 0)) {
                    if (getColumns(rows - 1) > _vMax) {
                        rows++;
                    }
                    rowObject[pos[i]].setRank(rows - 1);
                } else {
                    rowObject[pos[i]].setLocation(new Point(xPos, yPos));
                    xPos += rowObject[pos[i]].getSize().getWidth() + getHGap();
                }
            }
            yPos += getRowHeight(curRow) + getVGap();
        }
    }
",1
22307690,7,"    public static void main(String args[]) {
        int summ = 0;
        int temp = 0;
        int[] a1 = { 0, 6, -7, -7, 61, 8, 20, 0, 8, 3, 6, 2, 7, 99, 0, 23, 12, 7, 9, 5, 33, 1, 3, 99, 99, 61, 99, 99, 99, 61, 61, 61, -3, -3, -3, -3 };
        for (int j = 0; j < (a1.length * a1.length); j++) {
            for (int i = 0; i < a1.length - 1; i++) {
                if (a1[i] > a1[i + 1]) {
                    temp = a1[i];
                    a1[i] = a1[i + 1];
                    a1[i + 1] = temp;
                }
            }
        }
        for (int i = 0; i < a1.length; i++) {
            System.out.print("" "" + a1[i]);
        }
        int min = 0;
        int max = 0;
        summ = (a1[1]) + (a1[a1.length - 1]);
        for (int i = 0; i < a1.length; i++) {
            if (a1[i] > a1[0] && a1[i] != a1[0]) {
                min = a1[i];
                break;
            }
        }
        for (int i = a1.length - 1; i > 0; i--) {
            if (a1[i] < a1[a1.length - 1] & a1[i] != a1[a1.length - 1]) {
                max = a1[i];
                break;
            }
        }
        System.out.println();
        System.out.print(""summa 2 min N 2 max = "" + summ);
        System.out.println(min);
        System.out.println(max);
        System.out.println(""summa 2 min N 2 max = "" + (min + max));
    }
",1
16123665,7,"    public static void bubbleSort(Drawable[] list) {
        boolean swapped;
        do {
            swapped = false;
            for (int i = 0; i < list.length - 1; ++i) {
                if (list[i].getSortValue() > list[i + 1].getSortValue()) {
                    Drawable temp = list[i];
                    list[i] = list[i + 1];
                    list[i + 1] = temp;
                    swapped = true;
                }
            }
        } while (swapped);
    }
",1
22137813,7,"    public static ObjectID[] sortDecending(ObjectID[] oids) {
        for (int i = 1; i < oids.length; i++) {
            ObjectID iId = oids[i];
            for (int j = 0; j < oids.length - i; j++) {
                if (oids[j].getTypePrefix() > oids[j + 1].getTypePrefix()) {
                    ObjectID temp = oids[j];
                    oids[j] = oids[j + 1];
                    oids[j + 1] = temp;
                }
            }
        }
        return oids;
    }
",1
4860089,7,"    public int[] sort() {
        int i, tmp;
        int[] newIndex = new int[nrows];
        for (i = 0; i < nrows; i++) {
            newIndex[i] = i;
        }
        boolean change = true;
        if (this.ascending) {
            if (data[0][column] instanceof Comparable) {
                while (change) {
                    change = false;
                    for (i = 0; i < nrows - 1; i++) {
                        if (((Comparable) data[newIndex[i]][column]).compareTo((Comparable) data[newIndex[i + 1]][column]) > 0) {
                            tmp = newIndex[i];
                            newIndex[i] = newIndex[i + 1];
                            newIndex[i + 1] = tmp;
                            change = true;
                        }
                    }
                }
                return newIndex;
            }
            if (data[0][column] instanceof String || data[0][column] instanceof ClassLabel) {
                while (change) {
                    change = false;
                    for (i = 0; i < nrows - 1; i++) {
                        if ((data[newIndex[i]][column].toString()).compareTo(data[newIndex[i + 1]][column].toString()) > 0) {
                            tmp = newIndex[i];
                            newIndex[i] = newIndex[i + 1];
                            newIndex[i + 1] = tmp;
                            change = true;
                        }
                    }
                }
            }
            return newIndex;
        }
        if (!this.ascending) {
            if (data[0][column] instanceof Comparable) {
                while (change) {
                    change = false;
                    for (i = 0; i < nrows - 1; i++) {
                        if (((Comparable) data[newIndex[i]][column]).compareTo((Comparable) data[newIndex[i + 1]][column]) < 0) {
                            tmp = newIndex[i];
                            newIndex[i] = newIndex[i + 1];
                            newIndex[i + 1] = tmp;
                            change = true;
                        }
                    }
                }
                return newIndex;
            }
            if (data[0][column] instanceof String || data[0][column] instanceof ClassLabel) {
                while (change) {
                    change = false;
                    for (i = 0; i < nrows - 1; i++) {
                        if ((data[newIndex[i]][column].toString()).compareTo(data[newIndex[i + 1]][column].toString()) < 0) {
                            tmp = newIndex[i];
                            newIndex[i] = newIndex[i + 1];
                            newIndex[i + 1] = tmp;
                            change = true;
                        }
                    }
                }
            }
            return newIndex;
        } else return newIndex;
    }
",1
10606028,7,"    public void bubble() {
        boolean test = false;
        int kars = 0, tas = 0;
        while (true) {
            for (int j = 0; j < dizi.length - 1; j++) {
                kars++;
                if (dizi[j] > dizi[j + 1]) {
                    int temp = dizi[j];
                    dizi[j] = dizi[j + 1];
                    dizi[j + 1] = temp;
                    test = true;
                    tas++;
                }
            }
            if (!test) {
                break;
            } else {
                test = false;
            }
        }
        System.out.print(kars + "" "" + tas);
    }
",1
1362,7,"    public static int[] bubbleSort(int... a) {
        boolean swapped;
        do {
            swapped = false;
            for (int i = 0; i < a.length - 1; i++) {
                if (a[i] > a[i + 1]) {
                    int tmp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = tmp;
                    swapped = true;
                }
            }
        } while (swapped);
        return a;
    }
",1
23089693,7,"    public int NthLowestSkill(int n) {
        int[] skillIds = new int[] { 0, 1, 2, 3 };
        for (int j = 0; j < 3; j++) {
            for (int i = 0; i < 3 - j; i++) {
                if (Skills()[skillIds[i]] > Skills()[skillIds[i + 1]]) {
                    int temp = skillIds[i];
                    skillIds[i] = skillIds[i + 1];
                    skillIds[i + 1] = temp;
                }
            }
        }
        return skillIds[n - 1];
    }
",1
21273058,7,"    public RobotList<Percentage> sort_decr_Percentage(RobotList<Percentage> list, String field) {
        int length = list.size();
        Index_value[] distri = new Index_value[length];
        for (int i = 0; i < length; i++) {
            distri[i] = new Index_value(i, list.get(i).percent);
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (distri[i].value < distri[i + 1].value) {
                    Index_value a = distri[i];
                    distri[i] = distri[i + 1];
                    distri[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Percentage> sol = new RobotList<Percentage>(Percentage.class);
        for (int i = 0; i < length; i++) {
            sol.addLast(new Percentage(distri[i].value));
        }
        return sol;
    }
",1
8227164,7,"    static int[] bubble(int[] s) {
        boolean f = true;
        while (f) {
            f = false;
            for (int i = 0; i < s.length - 1; i++) {
                if (s[i] > s[i + 1]) {
                    int t = s[i];
                    s[i] = s[i + 1];
                    s[i + 1] = t;
                    f = true;
                }
            }
        }
        return s;
    }
",1
17630905,7,"    public static int[] sortAscending(int input[]) {
        int[] order = new int[input.length];
        for (int i = 0; i < order.length; i++) order[i] = i;
        for (int i = input.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (input[j] > input[j + 1]) {
                    int mem = input[j];
                    input[j] = input[j + 1];
                    input[j + 1] = mem;
                    int id = order[j];
                    order[j] = order[j + 1];
                    order[j + 1] = id;
                }
            }
        }
        return order;
    }
",1
14632238,7,"    public static void bubble(double[] a) {
        for (int i = a.length - 1; i > 0; i--) for (int j = 0; j < i; j++) if (a[j] > a[j + 1]) {
            double temp = a[j];
            a[j] = a[j + 1];
            a[j + 1] = temp;
        }
    }
",1
21273054,7,"    public RobotList<Enemy> sort_decr_Enemy(RobotList<Enemy> list, String field) {
        int length = list.size();
        Index_value[] enemy_dist = new Index_value[length];
        if (field.equals("""") || field.equals(""location"")) {
            Location cur_loc = this.getLocation();
            for (int i = 0; i < length; i++) {
                enemy_dist[i] = new Index_value(i, distance(cur_loc, list.get(i).location));
            }
        } else if (field.equals(""health"")) {
            for (int i = 0; i < length; i++) {
                enemy_dist[i] = new Index_value(i, list.get(i).health);
            }
        } else {
            say(""impossible to sort list - nothing modified"");
            return list;
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (enemy_dist[i].value < enemy_dist[i + 1].value) {
                    Index_value a = enemy_dist[i];
                    enemy_dist[i] = enemy_dist[i + 1];
                    enemy_dist[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Enemy> new_enemy_list = new RobotList<Enemy>(Enemy.class);
        for (int i = 0; i < length; i++) {
            new_enemy_list.addLast(list.get(enemy_dist[i].index));
        }
        return new_enemy_list;
    }
",1
12747342,7,"    public void bubbleSort(final int[] s) {
        source = s;
        if (source.length < 2) return;
        boolean go = true;
        while (go) {
            go = false;
            for (int i = 0; i < source.length - 1; i++) {
                int temp = source[i];
                if (temp > source[i + 1]) {
                    source[i] = source[i + 1];
                    source[i + 1] = temp;
                    go = true;
                }
            }
        }
    }
",1
11892804,7,"    private int[] Tri(int[] pertinence, int taille) {
        boolean change = true;
        int tmp;
        while (change) {
            change = false;
            for (int i = 0; i < taille - 2; i++) {
                if (pertinence[i] < pertinence[i + 1]) {
                    tmp = pertinence[i];
                    pertinence[i] = pertinence[i + 1];
                    pertinence[i + 1] = tmp;
                    change = true;
                }
            }
        }
        return pertinence;
    }
",1
12561704,7,"    private void bubbleSort(int[] mas) {
        boolean t = true;
        while (t) {
            t = false;
            for (int i = 0; i < mas.length - 1; i++) {
                if (mas[i] > mas[i + 1]) {
                    int temp = mas[i];
                    mas[i] = mas[i + 1];
                    mas[i + 1] = temp;
                    t = true;
                }
            }
        }
    }
",1
21273051,7,"    public RobotList<Float> sort_incr_Float(RobotList<Float> list, String field) {
        int length = list.size();
        Index_value[] distri = new Index_value[length];
        for (int i = 0; i < length; i++) {
            distri[i] = new Index_value(i, list.get(i));
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (distri[i].value > distri[i + 1].value) {
                    Index_value a = distri[i];
                    distri[i] = distri[i + 1];
                    distri[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Float> sol = new RobotList<Float>(Float.class);
        for (int i = 0; i < length; i++) {
            sol.addLast(new Float(distri[i].value));
        }
        return sol;
    }
",1
21273060,7,"    public RobotList<Location> sort_decr_Location(RobotList<Location> list, String field) {
        int length = list.size();
        Index_value[] enemy_dist = new Index_value[length];
        if (field.equals("""") || field.equals(""location"")) {
            Location cur_loc = this.getLocation();
            for (int i = 0; i < length; i++) {
                enemy_dist[i] = new Index_value(i, distance(cur_loc, list.get(i)));
            }
        } else if (field.equals(""x"")) {
            for (int i = 0; i < length; i++) {
                enemy_dist[i] = new Index_value(i, list.get(i).x);
            }
        } else if (field.equals(""y"")) {
            for (int i = 0; i < length; i++) {
                enemy_dist[i] = new Index_value(i, list.get(i).y);
            }
        } else {
            say(""impossible to sort list - nothing modified"");
            return list;
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (enemy_dist[i].value < enemy_dist[i + 1].value) {
                    Index_value a = enemy_dist[i];
                    enemy_dist[i] = enemy_dist[i + 1];
                    enemy_dist[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Location> new_location_list = new RobotList<Location>(Location.class);
        for (int i = 0; i < length; i++) {
            new_location_list.addLast(list.get(enemy_dist[i].index));
        }
        return new_location_list;
    }
",1
10598170,7,"    private static String sort(final String item) {
        final char[] chars = item.toCharArray();
        for (int i = 1; i < chars.length; i++) {
            for (int j = 0; j < chars.length - 1; j++) {
                if (chars[j] > chars[j + 1]) {
                    final char temp = chars[j];
                    chars[j] = chars[j + 1];
                    chars[j + 1] = temp;
                }
            }
        }
        return String.valueOf(chars);
    }
",1
15195064,7,"    public int[] do_it(final int[] x) {
        int temp = 0;
        int j = x.length;
        while (j > 0) {
            for (int i = 0; i < j - 1; i++) {
                if (x[i] > x[i + 1]) {
                    temp = x[i];
                    x[i] = x[i + 1];
                    x[i + 1] = temp;
                }
                ;
            }
            ;
            j--;
        }
        ;
        return x;
    }
",1
3197876,7,"    public ArrayList<String> showTopLetters() {
        int[] tempArray = new int[engCountLetters.length];
        char[] tempArrayLetters = new char[abcEng.length];
        ArrayList<String> resultTopFiveLetters = new ArrayList<String>();
        tempArray = engCountLetters.clone();
        tempArrayLetters = abcEng.clone();
        int tempCount;
        char tempLetters;
        for (int j = 0; j < (abcEng.length * abcEng.length); j++) {
            for (int i = 0; i < abcEng.length - 1; i++) {
                if (tempArray[i] > tempArray[i + 1]) {
                    tempCount = tempArray[i];
                    tempLetters = tempArrayLetters[i];
                    tempArray[i] = tempArray[i + 1];
                    tempArrayLetters[i] = tempArrayLetters[i + 1];
                    tempArray[i + 1] = tempCount;
                    tempArrayLetters[i + 1] = tempLetters;
                }
            }
        }
        for (int i = tempArrayLetters.length - 1; i > tempArrayLetters.length - 6; i--) {
            resultTopFiveLetters.add(tempArrayLetters[i] + "":"" + tempArray[i]);
        }
        return resultTopFiveLetters;
    }
",1
20181656,7,"    private int[] sortRows(int[] rows) {
        for (int i = 0; i < rows.length; i++) {
            for (int j = 0; j < rows.length - 1; j++) {
                if (rows[j] > rows[j + 1]) {
                    int temp = rows[j];
                    rows[j] = rows[j + 1];
                    rows[j + 1] = temp;
                }
            }
        }
        return rows;
    }
",1
22486940,7,"    public void sortingByBubble(int[] array) {
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array.length - 1 - i; j++) {
                if (array[j] > array[j + 1]) {
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                }
            }
        }
    }
",1
5127007,7,"    public static void bubbleSort(int[] a) {
        for (int i = a.length - 1; i > 0; i--) {
            for (int j = 0; j < i; j++) {
                if (a[j] > a[j + 1]) {
                    int tmp = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = tmp;
                }
            }
        }
    }
",1
21273057,7,"    public RobotList<Percentage> sort_incr_Percentage(RobotList<Percentage> list, String field) {
        int length = list.size();
        Index_value[] distri = new Index_value[length];
        for (int i = 0; i < length; i++) {
            distri[i] = new Index_value(i, list.get(i).percent);
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (distri[i].value > distri[i + 1].value) {
                    Index_value a = distri[i];
                    distri[i] = distri[i + 1];
                    distri[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Percentage> sol = new RobotList<Percentage>(Percentage.class);
        for (int i = 0; i < length; i++) {
            sol.addLast(new Percentage(distri[i].value));
        }
        return sol;
    }
",1
16064530,7,"    private void bubbleSort() {
        for (int i = 0; i < testfield.length; i++) {
            for (int j = 0; j < testfield.length - i - 1; j++) if (testfield[j] > testfield[j + 1]) {
                short temp = testfield[j];
                testfield[j] = testfield[j + 1];
                testfield[j + 1] = temp;
            }
        }
    }
",1
20680657,7,"    protected void sort(int a) {
        int[] masiv = new int[a + 1];
        Random fff = new Random();
        for (int i = 0; i <= a; i++) {
            masiv[i] = fff.nextInt(9);
        }
        int d;
        for (int j = 0; j < a; j++) {
            for (int i = 0; i < a; i++) {
                if (masiv[i] < masiv[i + 1]) {
                } else {
                    d = masiv[i];
                    masiv[i] = masiv[i + 1];
                    masiv[i + 1] = d;
                }
            }
        }
        while (a != 0) {
            System.out.println(""sort: "" + masiv[a]);
            a--;
        }
    }
",1
18378776,7,"    public int[] getRandMas(int n) {
        boolean t = true;
        int interim = 0;
        int[] mas = new int[n];
        Random rand = new Random();
        for (int i = 0; i < n; i++) {
            mas[i] = rand.nextInt(10) + 1;
        }
        while (t) {
            t = false;
            for (int i = 0; i < mas.length - 1; i++) {
                if (mas[i] > mas[i + 1]) {
                    interim = mas[i];
                    mas[i] = mas[i + 1];
                    mas[i + 1] = interim;
                    t = true;
                }
            }
        }
        return mas;
    }
",1
17583193,7,"    public boolean populateRecord(int[] attrIDs) throws IOException {
        if (device == null) {
            throw new RuntimeException(""This is local device service record"");
        }
        if (attrIDs == null) {
            throw new NullPointerException(""attrIDs is null"");
        }
        if (attrIDs.length == 0) {
            throw new IllegalArgumentException();
        }
        for (int i = 0; i < attrIDs.length; i++) {
            if (attrIDs[i] < 0x0000 || attrIDs[i] > 0xffff) {
                throw new IllegalArgumentException();
            }
        }
        int[] sortIDs = new int[attrIDs.length];
        System.arraycopy(attrIDs, 0, sortIDs, 0, attrIDs.length);
        for (int i = 0; i < sortIDs.length; i++) {
            for (int j = 0; j < sortIDs.length - i - 1; j++) {
                if (sortIDs[j] > sortIDs[j + 1]) {
                    int temp = sortIDs[j];
                    sortIDs[j] = sortIDs[j + 1];
                    sortIDs[j + 1] = temp;
                }
            }
        }
        for (int i = 0; i < sortIDs.length - 1; i++) {
            if (sortIDs[i] == sortIDs[i + 1]) {
                throw new IllegalArgumentException();
            }
            DebugLog.debug0x(""query for "", sortIDs[i]);
        }
        DebugLog.debug0x(""query for "", sortIDs[sortIDs.length - 1]);
        return this.bluetoothStack.populateServicesRecordAttributeValues(this, sortIDs);
    }
",1
21273055,7,"    public RobotList<Resource> sort_incr_Resource(RobotList<Resource> list, String field) {
        int length = list.size();
        Index_value[] resource_dist = new Index_value[length];
        if (field.equals("""") || field.equals(""location"")) {
            Location cur_loc = this.getLocation();
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, distance(cur_loc, list.get(i).location));
            }
        } else if (field.equals(""energy"")) {
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, list.get(i).energy);
            }
        } else if (field.equals(""ammostash"")) {
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, list.get(i).ammostash);
            }
        } else if (field.equals(""speed"")) {
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, list.get(i).speed);
            }
        } else if (field.equals(""health"")) {
            for (int i = 0; i < length; i++) {
                resource_dist[i] = new Index_value(i, list.get(i).health);
            }
        } else {
            say(""impossible to sort list - nothing modified"");
            return list;
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (resource_dist[i].value > resource_dist[i + 1].value) {
                    Index_value a = resource_dist[i];
                    resource_dist[i] = resource_dist[i + 1];
                    resource_dist[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Resource> new_resource_list = new RobotList<Resource>(Resource.class);
        for (int i = 0; i < length; i++) {
            new_resource_list.addLast(list.get(resource_dist[i].index));
        }
        return new_resource_list;
    }
",1
15609432,7,"    public static int[] bubbleSort(int[] source) {
        if (source != null && source.length > 0) {
            boolean flag = true;
            while (flag) {
                flag = false;
                for (int i = 0; i < source.length - 1; i++) {
                    if (source[i] > source[i + 1]) {
                        int temp = source[i];
                        source[i] = source[i + 1];
                        source[i + 1] = temp;
                        flag = true;
                    }
                }
            }
        }
        return source;
    }
",1
6480424,7,"    public void method31() {
        boolean flag = true;
        while (flag) {
            flag = false;
            for (int i = 0; i < anInt772 - 1; i++) if (anIntArray774[i] < anIntArray774[i + 1]) {
                int j = anIntArray774[i];
                anIntArray774[i] = anIntArray774[i + 1];
                anIntArray774[i + 1] = j;
                long l = aLongArray773[i];
                aLongArray773[i] = aLongArray773[i + 1];
                aLongArray773[i + 1] = l;
                flag = true;
            }
        }
    }
",1
22326008,7,"    @Override
    public void sortArray(int[] array) {
        boolean sorted = false;
        while (sorted == false) {
            sorted = true;
            for (int i = 0; i <= array.length - 2; i++) {
                if (array[i] > array[i + 1]) {
                    int temp = array[i];
                    array[i] = array[i + 1];
                    array[i + 1] = temp;
                    sorted = false;
                }
            }
        }
    }
",1
17630909,7,"    public static int[] sortAscending(double input[]) {
        int[] order = new int[input.length];
        for (int i = 0; i < order.length; i++) order[i] = i;
        for (int i = input.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (input[j] > input[j + 1]) {
                    double mem = input[j];
                    input[j] = input[j + 1];
                    input[j + 1] = mem;
                    int id = order[j];
                    order[j] = order[j + 1];
                    order[j + 1] = id;
                }
            }
        }
        return order;
    }
",1
9385633,7,"    protected void setRankOrder() {
        this.rankOrder = new int[values.length];
        for (int i = 0; i < rankOrder.length; i++) {
            rankOrder[i] = i;
            assert (!Double.isNaN(values[i]));
        }
        for (int i = rankOrder.length - 1; i >= 0; i--) {
            boolean swapped = false;
            for (int j = 0; j < i; j++) if (values[rankOrder[j]] < values[rankOrder[j + 1]]) {
                int r = rankOrder[j];
                rankOrder[j] = rankOrder[j + 1];
                rankOrder[j + 1] = r;
            }
        }
    }
",1
21273059,7,"    public RobotList<Location> sort_incr_Location(RobotList<Location> list, String field) {
        int length = list.size();
        Index_value[] enemy_dist = new Index_value[length];
        Location cur_loc = this.getLocation();
        for (int i = 0; i < length; i++) {
            enemy_dist[i] = new Index_value(i, distance(cur_loc, list.get(i)));
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (enemy_dist[i].value > enemy_dist[i + 1].value) {
                    Index_value a = enemy_dist[i];
                    enemy_dist[i] = enemy_dist[i + 1];
                    enemy_dist[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Location> new_location_list = new RobotList<Location>(Location.class);
        for (int i = 0; i < length; i++) {
            new_location_list.addLast(list.get(enemy_dist[i].index));
        }
        return new_location_list;
    }
",1
22486941,7,"    public void modifyBubble(int[] array) {
        for (int i = 0; i < array.length; i++) {
            if (i % 2 != 0) {
                for (int j = array.length - i / 2 - 2; j >= i / 2; j--) {
                    if (array[j] >= array[j + 1]) {
                        int temp = array[j];
                        array[j] = array[j + 1];
                        array[j + 1] = temp;
                    }
                }
            } else {
                for (int j = i / 2; j < array.length - 1 - i / 2; j++) {
                    if (array[j] >= array[j + 1]) {
                        int temp = array[j];
                        array[j] = array[j + 1];
                        array[j + 1] = temp;
                    }
                }
            }
        }
    }
",1
9210368,13,"    public ThreadChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            ThreadInfo tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }
",1
9883524,13,"    private void choose() {
        final int n = operators.length;
        if (nPick < n) {
            if (unequalWeights) {
                chooseUsingWeights();
            } else {
                for (int k = 0; k < nPick; ++k) {
                    final int which = k + MathUtils.nextInt(n - k);
                    final MCMCOperator tmp = currentRound[k];
                    currentRound[k] = currentRound[which];
                    currentRound[which] = tmp;
                }
            }
        }
    }
",1
6138230,13,"    public DoubleChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            String tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }
",1
966813,13,"    void shuffle(MersenneTwisterFast random) {
        int numObjs = fitnesses.length;
        float[] fitnesses = this.fitnesses;
        int[] indices = this.indices;
        float f;
        int i;
        int rand;
        for (int x = numObjs - 1; x >= 1; x--) {
            rand = random.nextInt(x + 1);
            f = fitnesses[x];
            fitnesses[x] = fitnesses[rand];
            fitnesses[rand] = f;
            i = indices[x];
            indices[x] = indices[rand];
            indices[rand] = i;
        }
    }
",1
17621068,13,"    public static synchronized <T> void shuffle(T[] anArray) {
        int n = anArray.length;
        for (int i = n - 1; i >= 1; i--) {
            int j = randomSource.nextInt(i + 1);
            T temp = anArray[j];
            anArray[j] = anArray[i];
            anArray[i] = temp;
        }
    }
",1
3894025,13,"    public void shuffle() {
        Random rand = new Random();
        for (int i = size() - 1; i > 0; i--) {
            int newIndex = rand.nextInt(i + 1);
            T temp = get(newIndex);
            set(newIndex, get(i));
            set(i, temp);
        }
    }
",1
7670209,13,"    public static void shuffleList(List<Integer> a) {
        int n = a.size();
        Random random = new Random();
        random.nextInt();
        for (int i = 0; i < n; i++) {
            int change = i + random.nextInt(n - i);
            swap(a, i, change);
        }
    }
",1
3596847,13,"    private static void solve_l2r_l1l2_svc(Problem prob, double[] w, double eps, double Cp, double Cn, SolverType solver_type) {
        int l = prob.l;
        int w_size = prob.n;
        int i, s, iter = 0;
        double C, d, G;
        double[] QD = new double[l];
        int max_iter = 1000;
        int[] index = new int[l];
        double[] alpha = new double[l];
        byte[] y = new byte[l];
        int active_size = l;
        double PG;
        double PGmax_old = Double.POSITIVE_INFINITY;
        double PGmin_old = Double.NEGATIVE_INFINITY;
        double PGmax_new, PGmin_new;
        double diag[] = new double[] { 0.5 / Cn, 0, 0.5 / Cp };
        double upper_bound[] = new double[] { Double.POSITIVE_INFINITY, 0, Double.POSITIVE_INFINITY };
        if (solver_type == SolverType.L2R_L1LOSS_SVC_DUAL) {
            diag[0] = 0;
            diag[2] = 0;
            upper_bound[0] = Cn;
            upper_bound[2] = Cp;
        }
        for (i = 0; i < w_size; i++) w[i] = 0;
        for (i = 0; i < l; i++) {
            alpha[i] = 0;
            if (prob.y[i] > 0) {
                y[i] = +1;
            } else {
                y[i] = -1;
            }
            QD[i] = diag[GETI(y, i)];
            for (FeatureNode xi : prob.x[i]) {
                QD[i] += xi.value * xi.value;
            }
            index[i] = i;
        }
        while (iter < max_iter) {
            PGmax_new = Double.NEGATIVE_INFINITY;
            PGmin_new = Double.POSITIVE_INFINITY;
            for (i = 0; i < active_size; i++) {
                int j = i + random.nextInt(active_size - i);
                swap(index, i, j);
            }
            for (s = 0; s < active_size; s++) {
                i = index[s];
                G = 0;
                byte yi = y[i];
                for (FeatureNode xi : prob.x[i]) {
                    G += w[xi.index - 1] * xi.value;
                }
                G = G * yi - 1;
                C = upper_bound[GETI(y, i)];
                G += alpha[i] * diag[GETI(y, i)];
                PG = 0;
                if (alpha[i] == 0) {
                    if (G > PGmax_old) {
                        active_size--;
                        swap(index, s, active_size);
                        s--;
                        continue;
                    } else if (G < 0) {
                        PG = G;
                    }
                } else if (alpha[i] == C) {
                    if (G < PGmin_old) {
                        active_size--;
                        swap(index, s, active_size);
                        s--;
                        continue;
                    } else if (G > 0) {
                        PG = G;
                    }
                } else {
                    PG = G;
                }
                PGmax_new = Math.max(PGmax_new, PG);
                PGmin_new = Math.min(PGmin_new, PG);
                if (Math.abs(PG) > 1.0e-12) {
                    double alpha_old = alpha[i];
                    alpha[i] = Math.min(Math.max(alpha[i] - G / QD[i], 0.0), C);
                    d = (alpha[i] - alpha_old) * yi;
                    for (FeatureNode xi : prob.x[i]) {
                        w[xi.index - 1] += d * xi.value;
                    }
                }
            }
            iter++;
            if (iter % 10 == 0) info(""."");
            if (PGmax_new - PGmin_new <= eps) {
                if (active_size == l) break; else {
                    active_size = l;
                    info(""*"");
                    PGmax_old = Double.POSITIVE_INFINITY;
                    PGmin_old = Double.NEGATIVE_INFINITY;
                    continue;
                }
            }
            PGmax_old = PGmax_new;
            PGmin_old = PGmin_new;
            if (PGmax_old <= 0) PGmax_old = Double.POSITIVE_INFINITY;
            if (PGmin_old >= 0) PGmin_old = Double.NEGATIVE_INFINITY;
        }
        info(NL + ""optimization finished, #iter = %d"" + NL, iter);
        if (iter >= max_iter) info(""%nWARNING: reaching max number of iterations%nUsing -s 2 may be faster (also see FAQ)%n%n"");
        double v = 0;
        int nSV = 0;
        for (i = 0; i < w_size; i++) v += w[i] * w[i];
        for (i = 0; i < l; i++) {
            v += alpha[i] * (alpha[i] * diag[GETI(y, i)] - 2);
            if (alpha[i] > 0) ++nSV;
        }
        info(""Objective value = %f"" + NL, v / 2);
        info(""nSV = %d"" + NL, nSV);
    }
",1
7079645,13,"    public synchronized boolean setSource(File file) {
        if (!file.isDirectory()) {
            return false;
        }
        m_current = -1;
        Random rand = new Random();
        m_files = file.listFiles(new ValidFileFilter());
        if (m_random) {
            List<File> fileList = Arrays.asList(m_files);
            Collections.shuffle(fileList, rand);
            m_files = fileList.toArray(m_files);
        }
        m_innerCount = 0;
        m_multiStimuliParsers = false;
        List<int[]> orderList = new LinkedList<int[]>();
        int[] order = null;
        StimuliParser parser = new FolderParser(m_maxsize, m_spp, 1, m_controls, false);
        StimuliParser parser2 = null;
        if (m_spp > 1) parser2 = new FolderParser(m_maxsize, m_spp - 1, 1, m_controls, false);
        if (parser.setSource(m_files[0])) {
            List<int[]> singleOrderList = new LinkedList<int[]>();
            m_multiStimuliParsers = true;
            order = new int[2];
            order[0] = 0;
            int thiscount = parser.getInnerStimuliCount();
            for (int i = 0; i < thiscount; ++i) {
                order[1] = i;
                singleOrderList.add(order.clone());
            }
            m_innerCount += thiscount;
            if (m_random) {
                Collections.shuffle(singleOrderList, rand);
            }
            orderList.addAll(singleOrderList);
        } else if (m_spp > 1) {
            File tiedFolder = getTiedFolder(m_files[0]);
            if (tiedFolder.isDirectory()) {
                List<int[]> singleOrderList = new LinkedList<int[]>();
                m_multiStimuliParsers = true;
                parser2.setSource(tiedFolder);
                order = new int[2];
                order[0] = 0;
                int thiscount = parser2.getInnerStimuliCount();
                for (int i = 0; i < thiscount; ++i) {
                    order[1] = i;
                    singleOrderList.add(order.clone());
                }
                m_innerCount += thiscount;
                if (m_random) Collections.shuffle(singleOrderList, rand);
                orderList.addAll(singleOrderList);
            }
        }
        if (m_multiStimuliParsers) {
            for (int i = 1; i < m_files.length; ++i) {
                List<int[]> singleOrderList = new LinkedList<int[]>();
                order[0] = i;
                int thiscount;
                if (!parser.setSource(m_files[i])) {
                    File tiedFolder = getTiedFolder(m_files[i]);
                    parser2.setSource(tiedFolder);
                    thiscount = parser2.getInnerStimuliCount();
                } else thiscount = parser.getInnerStimuliCount();
                for (int j = 0; j < thiscount; ++j) {
                    order[1] = j;
                    singleOrderList.add(order.clone());
                }
                m_innerCount += thiscount;
                if (m_random) {
                    Collections.shuffle(singleOrderList, rand);
                }
                orderList.addAll(singleOrderList);
            }
        } else {
            order = new int[m_spp];
            for (int i = 0; i < m_spp; ++i) order[i] = i;
            int h = 0;
            int choices = 0;
            while (true) {
                orderList.add(order.clone());
                ++choices;
                if (order[h] == m_files.length - m_spp + h) {
                    if (h == 0) break;
                    ++order[--h];
                    for (int i = h + 1; i < m_spp; ++i) order[i] = order[i - 1] + 1;
                } else {
                    h = m_spp - 1;
                    ++order[h];
                }
            }
            m_innerCount = choices;
            if (m_random) Collections.shuffle(orderList, rand);
        }
        if (m_sequences > 1) {
            m_innerCount *= m_sequences;
            List<int[]> holder = new LinkedList<int[]>(orderList);
            for (int i = 1; i < m_sequences; ++i) {
                List<int[]> temp = new LinkedList<int[]>();
                for (int[] v : orderList) temp.add(v.clone());
                Collections.shuffle(temp, rand);
                holder.addAll(temp);
            }
            orderList = holder;
        }
        m_order = orderList.toArray(new int[m_innerCount][order.length]);
        if (!m_multiStimuliParsers && m_random) {
            int temp;
            for (int[] v : m_order) {
                for (int i = 1; i < v.length; ++i) {
                    int swapi = rand.nextInt(i + 1);
                    if (swapi != i) {
                        temp = v[i];
                        v[i] = v[swapi];
                        v[swapi] = temp;
                    }
                }
            }
        }
        m_parsers = new StimuliParser[m_order[0].length];
        return true;
    }
",1
2423912,13,"    public static void shuffle(double[] source, Random randomizer) {
        int n = source.length;
        for (int i = n - 1; i > 0; i--) {
            int j = randomizer.nextInt(i + 1);
            double k = source[j];
            source[j] = source[i];
            source[i] = k;
        }
    }
",1
5172908,13,"    private static void shufflePool(List<Letter> a) {
        int n = a.toArray().length;
        Random random = new Random();
        random.nextInt();
        for (int i = 0; i < n; i++) {
            int change = i + random.nextInt(n - i);
            swap(a, i, change);
        }
    }
",1
7848932,13,"        private Target randomize(Target t) {
            if (t != null && t.getNext() != null) {
                ArrayList list = new ArrayList();
                while (t != null) {
                    list.add(t);
                    t = t.getNext();
                }
                Target[] arr = (Target[]) list.toArray(new Target[list.size()]);
                if (true) {
                    Arrays.sort(arr, new Comparator() {

                        public int compare(Object lhs, Object rhs) {
                            return ((Target) rhs).name.compareTo(((Target) lhs).name);
                        }
                    });
                    for (int i = 0; i < arr.length; ++i) {
                        t = arr[i].setNext(t);
                    }
                }
                if (params.random != null) {
                    t = null;
                    Random r = params.random;
                    for (int i = arr.length; --i >= 1; ) {
                        int x = r.nextInt(i + 1);
                        t = arr[x].setNext(t);
                        arr[x] = arr[i];
                    }
                    t = arr[0].setNext(t);
                }
            }
            return t;
        }
",1
19654781,13,"    public static void shuffle(double[] a) {
        Random random = new Random();
        for (int i = a.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            double swap = a[i];
            a[i] = a[j];
            a[j] = swap;
        }
    }
",1
8533735,13,"    public void shuffle() {
        Card tempCard = new Card();
        for (int i = 0; i < NUM_CARDS; i++) {
            int j = i + r.nextInt(NUM_CARDS - i);
            tempCard = cards[j];
            cards[j] = cards[i];
            cards[i] = tempCard;
        }
        position = 0;
    }
",1
10496866,13,"    public static void svm_cross_validation(svm_problem prob, svm_parameter param, int nr_fold, double[] target) {
        int i;
        int[] fold_start = new int[nr_fold + 1];
        int l = prob.l;
        int[] perm = new int[l];
        if ((param.svm_type == svm_parameter.C_SVC || param.svm_type == svm_parameter.NU_SVC) && nr_fold < l) {
            int[] tmp_nr_class = new int[1];
            int[][] tmp_label = new int[1][];
            int[][] tmp_start = new int[1][];
            int[][] tmp_count = new int[1][];
            svm_group_classes(prob, tmp_nr_class, tmp_label, tmp_start, tmp_count, perm);
            int nr_class = tmp_nr_class[0];
            int[] start = tmp_start[0];
            int[] count = tmp_count[0];
            int[] fold_count = new int[nr_fold];
            int c;
            int[] index = new int[l];
            for (i = 0; i < l; i++) index[i] = perm[i];
            for (c = 0; c < nr_class; c++) for (i = 0; i < count[c]; i++) {
                int j = i + rand.nextInt(count[c] - i);
                do {
                    int _ = index[start[c] + j];
                    index[start[c] + j] = index[start[c] + i];
                    index[start[c] + i] = _;
                } while (false);
            }
            for (i = 0; i < nr_fold; i++) {
                fold_count[i] = 0;
                for (c = 0; c < nr_class; c++) fold_count[i] += (i + 1) * count[c] / nr_fold - i * count[c] / nr_fold;
            }
            fold_start[0] = 0;
            for (i = 1; i <= nr_fold; i++) fold_start[i] = fold_start[i - 1] + fold_count[i - 1];
            for (c = 0; c < nr_class; c++) for (i = 0; i < nr_fold; i++) {
                int begin = start[c] + i * count[c] / nr_fold;
                int end = start[c] + (i + 1) * count[c] / nr_fold;
                for (int j = begin; j < end; j++) {
                    perm[fold_start[i]] = index[j];
                    fold_start[i]++;
                }
            }
            fold_start[0] = 0;
            for (i = 1; i <= nr_fold; i++) fold_start[i] = fold_start[i - 1] + fold_count[i - 1];
        } else {
            for (i = 0; i < l; i++) perm[i] = i;
            for (i = 0; i < l; i++) {
                int j = i + rand.nextInt(l - i);
                do {
                    int _ = perm[i];
                    perm[i] = perm[j];
                    perm[j] = _;
                } while (false);
            }
            for (i = 0; i <= nr_fold; i++) fold_start[i] = i * l / nr_fold;
        }
        for (i = 0; i < nr_fold; i++) {
            int begin = fold_start[i];
            int end = fold_start[i + 1];
            int j, k;
            svm_problem subprob = new svm_problem();
            subprob.l = l - (end - begin);
            subprob.x = new svm_node[subprob.l][];
            subprob.y = new double[subprob.l];
            k = 0;
            for (j = 0; j < begin; j++) {
                subprob.x[k] = prob.x[perm[j]];
                subprob.y[k] = prob.y[perm[j]];
                ++k;
            }
            for (j = end; j < l; j++) {
                subprob.x[k] = prob.x[perm[j]];
                subprob.y[k] = prob.y[perm[j]];
                ++k;
            }
            svm_model submodel = svm_train(subprob, param);
            if (param.probability == 1 && (param.svm_type == svm_parameter.C_SVC || param.svm_type == svm_parameter.NU_SVC)) {
                double[] prob_estimates = new double[svm_get_nr_class(submodel)];
                for (j = begin; j < end; j++) target[perm[j]] = svm_predict_probability(submodel, prob.x[perm[j]], prob_estimates);
            } else for (j = begin; j < end; j++) target[perm[j]] = svm_predict(submodel, prob.x[perm[j]]);
        }
    }
",1
15064,13,"    private int[] randomiseCars(int n) {
        int[] cars = new int[n];
        for (int i = 0; i < n; i++) cars[i] = i;
        Random r = new Random();
        for (int i = 0; i < n; i++) {
            int j = i + r.nextInt(n - i);
            int tmp = cars[i];
            cars[i] = cars[j];
            cars[j] = tmp;
        }
        return cars;
    }
",1
6938966,13,"    public static void shuffleArray(int[] a) {
        int n = a.length;
        Random random = new Random();
        random.nextInt();
        for (int i = 0; i < n; i++) {
            int change = i + random.nextInt(n - i);
            swap(a, i, change);
        }
    }
",1
16380022,13,"    public void shuffle(Random rand) {
        for (int i = cards.length - 1; i >= 0; i--) {
            int r = rand.nextInt(i + 1);
            Card t = cards[i];
            cards[i] = cards[r];
            cards[r] = t;
        }
        nextCard = 0;
    }
",1
19654780,13,"    public static void shuffle(int[] a) {
        Random random = new Random();
        for (int i = a.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            int swap = a[i];
            a[i] = a[j];
            a[j] = swap;
        }
    }
",1
1721214,13,"    public boolean shufflePatterns() {
        this.checker.init(""shufflePatterns"");
        this.checker.addCheck(this.patterns != null, ""The pattern list is a null pointer."");
        this.checker.addCheck(this.patterns.size() > 0, ""The pattern list is empty."");
        if (this.checker.isSecure()) {
            Random r = new Random();
            int j = 0;
            for (int i = 0; i < this.patterns.size(); i++) {
                j = r.nextInt(i + 1);
                Pattern temp = this.patterns.get(i);
                this.patterns.set(i, this.patterns.get(j));
                this.patterns.set(j, temp);
            }
            return true;
        }
        return false;
    }
",1
3596849,13,"    private static void solve_l1r_l2_svc(Problem prob_col, double[] w, double eps, double Cp, double Cn) {
        int l = prob_col.l;
        int w_size = prob_col.n;
        int j, s, iter = 0;
        int max_iter = 1000;
        int active_size = w_size;
        int max_num_linesearch = 20;
        double sigma = 0.01;
        double d, G_loss, G, H;
        double Gmax_old = Double.POSITIVE_INFINITY;
        double Gmax_new;
        double Gmax_init = 0;
        double d_old, d_diff;
        double loss_old = 0;
        double loss_new;
        double appxcond, cond;
        int[] index = new int[w_size];
        byte[] y = new byte[l];
        double[] b = new double[l];
        double[] xj_sq = new double[w_size];
        double[] C = new double[] { Cn, 0, Cp };
        for (j = 0; j < l; j++) {
            b[j] = 1;
            if (prob_col.y[j] > 0) y[j] = 1; else y[j] = -1;
        }
        for (j = 0; j < w_size; j++) {
            w[j] = 0;
            index[j] = j;
            xj_sq[j] = 0;
            for (FeatureNode xi : prob_col.x[j]) {
                int ind = xi.index - 1;
                double val = xi.value;
                xi.value *= y[ind];
                xj_sq[j] += C[GETI(y, ind)] * val * val;
            }
        }
        while (iter < max_iter) {
            Gmax_new = 0;
            for (j = 0; j < active_size; j++) {
                int i = j + random.nextInt(active_size - j);
                swap(index, i, j);
            }
            for (s = 0; s < active_size; s++) {
                j = index[s];
                G_loss = 0;
                H = 0;
                for (FeatureNode xi : prob_col.x[j]) {
                    int ind = xi.index - 1;
                    if (b[ind] > 0) {
                        double val = xi.value;
                        double tmp = C[GETI(y, ind)] * val;
                        G_loss -= tmp * b[ind];
                        H += tmp * val;
                    }
                }
                G_loss *= 2;
                G = G_loss;
                H *= 2;
                H = Math.max(H, 1e-12);
                double Gp = G + 1;
                double Gn = G - 1;
                double violation = 0;
                if (w[j] == 0) {
                    if (Gp < 0) violation = -Gp; else if (Gn > 0) violation = Gn; else if (Gp > Gmax_old / l && Gn < -Gmax_old / l) {
                        active_size--;
                        swap(index, s, active_size);
                        s--;
                        continue;
                    }
                } else if (w[j] > 0) violation = Math.abs(Gp); else violation = Math.abs(Gn);
                Gmax_new = Math.max(Gmax_new, violation);
                if (Gp <= H * w[j]) d = -Gp / H; else if (Gn >= H * w[j]) d = -Gn / H; else d = -w[j];
                if (Math.abs(d) < 1.0e-12) continue;
                double delta = Math.abs(w[j] + d) - Math.abs(w[j]) + G * d;
                d_old = 0;
                int num_linesearch;
                for (num_linesearch = 0; num_linesearch < max_num_linesearch; num_linesearch++) {
                    d_diff = d_old - d;
                    cond = Math.abs(w[j] + d) - Math.abs(w[j]) - sigma * delta;
                    appxcond = xj_sq[j] * d * d + G_loss * d + cond;
                    if (appxcond <= 0) {
                        for (FeatureNode x : prob_col.x[j]) {
                            b[x.index - 1] += d_diff * x.value;
                        }
                        break;
                    }
                    if (num_linesearch == 0) {
                        loss_old = 0;
                        loss_new = 0;
                        for (FeatureNode x : prob_col.x[j]) {
                            int ind = x.index - 1;
                            if (b[ind] > 0) {
                                loss_old += C[GETI(y, ind)] * b[ind] * b[ind];
                            }
                            double b_new = b[ind] + d_diff * x.value;
                            b[ind] = b_new;
                            if (b_new > 0) {
                                loss_new += C[GETI(y, ind)] * b_new * b_new;
                            }
                        }
                    } else {
                        loss_new = 0;
                        for (FeatureNode x : prob_col.x[j]) {
                            int ind = x.index - 1;
                            double b_new = b[ind] + d_diff * x.value;
                            b[ind] = b_new;
                            if (b_new > 0) {
                                loss_new += C[GETI(y, ind)] * b_new * b_new;
                            }
                        }
                    }
                    cond = cond + loss_new - loss_old;
                    if (cond <= 0) break; else {
                        d_old = d;
                        d *= 0.5;
                        delta *= 0.5;
                    }
                }
                w[j] += d;
                if (num_linesearch >= max_num_linesearch) {
                    info(""#"");
                    for (int i = 0; i < l; i++) b[i] = 1;
                    for (int i = 0; i < w_size; i++) {
                        if (w[i] == 0) continue;
                        for (FeatureNode x : prob_col.x[i]) {
                            b[x.index - 1] -= w[i] * x.value;
                        }
                    }
                }
            }
            if (iter == 0) Gmax_init = Gmax_new;
            iter++;
            if (iter % 10 == 0) info(""."");
            if (Gmax_new <= eps * Gmax_init) {
                if (active_size == w_size) break; else {
                    active_size = w_size;
                    info(""*"");
                    Gmax_old = Double.POSITIVE_INFINITY;
                    continue;
                }
            }
            Gmax_old = Gmax_new;
        }
        info(""%noptimization finished, #iter = %d%n"", iter);
        if (iter >= max_iter) info(""%nWARNING: reaching max number of iterations%n"");
        double v = 0;
        int nnz = 0;
        for (j = 0; j < w_size; j++) {
            for (FeatureNode x : prob_col.x[j]) {
                x.value *= prob_col.y[x.index - 1];
            }
            if (w[j] != 0) {
                v += Math.abs(w[j]);
                nnz++;
            }
        }
        for (j = 0; j < l; j++) if (b[j] > 0) v += C[GETI(y, j)] * b[j] * b[j];
        info(""Objective value = %f%n"", v);
        info(""#nonzeros/#features = %d/%d%n"", nnz, w_size);
    }
",1
3596848,13,"    private static void solve_l2r_lr_dual(Problem prob, double w[], double eps, double Cp, double Cn) {
        int l = prob.l;
        int w_size = prob.n;
        int i, s, iter = 0;
        double xTx[] = new double[l];
        int max_iter = 1000;
        int index[] = new int[l];
        double alpha[] = new double[2 * l];
        byte y[] = new byte[l];
        int max_inner_iter = 100;
        double innereps = 1e-2;
        double innereps_min = Math.min(1e-8, eps);
        double upper_bound[] = new double[] { Cn, 0, Cp };
        for (i = 0; i < w_size; i++) w[i] = 0;
        for (i = 0; i < l; i++) {
            if (prob.y[i] > 0) {
                y[i] = +1;
            } else {
                y[i] = -1;
            }
            alpha[2 * i] = Math.min(0.001 * upper_bound[GETI(y, i)], 1e-8);
            alpha[2 * i + 1] = upper_bound[GETI(y, i)] - alpha[2 * i];
            xTx[i] = 0;
            for (FeatureNode xi : prob.x[i]) {
                xTx[i] += (xi.value) * (xi.value);
                w[xi.index - 1] += y[i] * alpha[2 * i] * xi.value;
            }
            index[i] = i;
        }
        while (iter < max_iter) {
            for (i = 0; i < l; i++) {
                int j = i + random.nextInt(l - i);
                swap(index, i, j);
            }
            int newton_iter = 0;
            double Gmax = 0;
            for (s = 0; s < l; s++) {
                i = index[s];
                byte yi = y[i];
                double C = upper_bound[GETI(y, i)];
                double ywTx = 0, xisq = xTx[i];
                for (FeatureNode xi : prob.x[i]) {
                    ywTx += w[xi.index - 1] * xi.value;
                }
                ywTx *= y[i];
                double a = xisq, b = ywTx;
                int ind1 = 2 * i, ind2 = 2 * i + 1, sign = 1;
                if (0.5 * a * (alpha[ind2] - alpha[ind1]) + b < 0) {
                    ind1 = 2 * i + 1;
                    ind2 = 2 * i;
                    sign = -1;
                }
                double alpha_old = alpha[ind1];
                double z = alpha_old;
                if (C - z < 0.5 * C) z = 0.1 * z;
                double gp = a * (z - alpha_old) + sign * b + Math.log(z / (C - z));
                Gmax = Math.max(Gmax, Math.abs(gp));
                final double eta = 0.1;
                int inner_iter = 0;
                while (inner_iter <= max_inner_iter) {
                    if (Math.abs(gp) < innereps) break;
                    double gpp = a + C / (C - z) / z;
                    double tmpz = z - gp / gpp;
                    if (tmpz <= 0) z *= eta; else z = tmpz;
                    gp = a * (z - alpha_old) + sign * b + Math.log(z / (C - z));
                    newton_iter++;
                    inner_iter++;
                }
                if (inner_iter > 0) {
                    alpha[ind1] = z;
                    alpha[ind2] = C - z;
                    for (FeatureNode xi : prob.x[i]) {
                        w[xi.index - 1] += sign * (z - alpha_old) * yi * xi.value;
                    }
                }
            }
            iter++;
            if (iter % 10 == 0) info(""."");
            if (Gmax < eps) break;
            if (newton_iter < l / 10) innereps = Math.max(innereps_min, 0.1 * innereps);
        }
        info(""%noptimization finished, #iter = %d%n"", iter);
        if (iter >= max_iter) info(""%nWARNING: reaching max number of iterations%nUsing -s 0 may be faster (also see FAQ)%n%n"");
        double v = 0;
        for (i = 0; i < w_size; i++) v += w[i] * w[i];
        v *= 0.5;
        for (i = 0; i < l; i++) v += alpha[2 * i] * Math.log(alpha[2 * i]) + alpha[2 * i + 1] * Math.log(alpha[2 * i + 1]) - upper_bound[GETI(y, i)] * Math.log(upper_bound[GETI(y, i)]);
        info(""Objective value = %f%n"", v);
    }
",1
3596828,13,"    public static void crossValidation(Problem prob, Parameter param, int nr_fold, int[] target) {
        int i;
        int[] fold_start = new int[nr_fold + 1];
        int l = prob.l;
        int[] perm = new int[l];
        for (i = 0; i < l; i++) perm[i] = i;
        for (i = 0; i < l; i++) {
            int j = i + random.nextInt(l - i);
            swap(perm, i, j);
        }
        for (i = 0; i <= nr_fold; i++) fold_start[i] = i * l / nr_fold;
        for (i = 0; i < nr_fold; i++) {
            int begin = fold_start[i];
            int end = fold_start[i + 1];
            int j, k;
            Problem subprob = new Problem();
            subprob.bias = prob.bias;
            subprob.n = prob.n;
            subprob.l = l - (end - begin);
            subprob.x = new FeatureNode[subprob.l][];
            subprob.y = new int[subprob.l];
            k = 0;
            for (j = 0; j < begin; j++) {
                subprob.x[k] = prob.x[perm[j]];
                subprob.y[k] = prob.y[perm[j]];
                ++k;
            }
            for (j = end; j < l; j++) {
                subprob.x[k] = prob.x[perm[j]];
                subprob.y[k] = prob.y[perm[j]];
                ++k;
            }
            Model submodel = train(subprob, param);
            for (j = begin; j < end; j++) target[perm[j]] = predict(submodel, prob.x[perm[j]]);
        }
    }
",1
17621071,13,"    public static synchronized void shuffle(float[] anArray) {
        int n = anArray.length;
        for (int i = n - 1; i >= 1; i--) {
            int j = randomSource.nextInt(i + 1);
            float temp = anArray[j];
            anArray[j] = anArray[i];
            anArray[i] = temp;
        }
    }
",1
7436917,13,"    public IntChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            String tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }
",1
10868405,13,"    public void shuffle() {
        Random rng = new Random();
        int n = this.cards.size();
        while (--n > 0) {
            int k = rng.nextInt(n + 1);
            Card temp = this.cards.get(n);
            this.cards.set(n, this.cards.get(k));
            this.cards.set(k, temp);
        }
    }
",1
17510245,13,"    void permute(int[] a, int n) {
        for (int i = 0; i < n; i++) {
            int j = random.nextInt(i + 1);
            int tmp = a[i];
            a[i] = a[j];
            a[j] = tmp;
        }
    }
",1
19654782,13,"    public static void shuffle(long[] a) {
        Random random = new Random();
        for (int i = a.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            long swap = a[i];
            a[i] = a[j];
            a[j] = swap;
        }
    }
",1
7839340,13,"    public static void shuffle(int[] array, Random rng) {
        for (int i = array.length - 1; i >= 0; i--) {
            int index = rng.nextInt(i + 1);
            int a = array[index];
            array[index] = array[i];
            array[i] = a;
        }
    }
",1
2315719,13,"    public TypedObjectChoice randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            int tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }
",1
13912756,13,"    public RandomOrderIntCG(IntChoiceGenerator sub) {
        super(sub.id);
        setPreviousChoiceGenerator(sub.getPreviousChoiceGenerator());
        choices = new int[sub.getTotalNumberOfChoices()];
        for (int i = 0; i < choices.length; i++) {
            sub.advance();
            choices[i] = sub.getNextChoice();
        }
        for (int i = choices.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            int tmp = choices[i];
            choices[i] = choices[j];
            choices[j] = tmp;
        }
        nextIdx = -1;
    }
",1
7200130,13,"    public static void shuffle(int[] a, Random rand) {
        for (int i = a.length - 1; i >= 1; i--) {
            int j = rand.nextInt(i + 1);
            int tmp = a[i];
            a[i] = a[j];
            a[j] = tmp;
        }
    }
",1
5936119,13,"    public boolean batchFinished() throws Exception {
        Instances data = getInputFormat();
        if (data == null) throw new IllegalStateException(""No input instance format defined"");
        if (m_Converter == null) {
            int[] randomIndices = new int[m_ClassCounts.length];
            for (int i = 0; i < randomIndices.length; i++) {
                randomIndices[i] = i;
            }
            for (int j = randomIndices.length - 1; j > 0; j--) {
                int toSwap = m_Random.nextInt(j + 1);
                int tmpIndex = randomIndices[j];
                randomIndices[j] = randomIndices[toSwap];
                randomIndices[toSwap] = tmpIndex;
            }
            double[] randomizedCounts = new double[m_ClassCounts.length];
            for (int i = 0; i < randomizedCounts.length; i++) {
                randomizedCounts[i] = m_ClassCounts[randomIndices[i]];
            }
            if (m_ClassOrder == RANDOM) {
                m_Converter = randomIndices;
                m_ClassCounts = randomizedCounts;
            } else {
                int[] sorted = Utils.sort(randomizedCounts);
                m_Converter = new int[sorted.length];
                if (m_ClassOrder == FREQ_ASCEND) {
                    for (int i = 0; i < sorted.length; i++) {
                        m_Converter[i] = randomIndices[sorted[i]];
                    }
                } else if (m_ClassOrder == FREQ_DESCEND) {
                    for (int i = 0; i < sorted.length; i++) {
                        m_Converter[i] = randomIndices[sorted[sorted.length - i - 1]];
                    }
                } else {
                    throw new IllegalArgumentException(""Class order not defined!"");
                }
                double[] tmp2 = new double[m_ClassCounts.length];
                for (int i = 0; i < m_Converter.length; i++) {
                    tmp2[i] = m_ClassCounts[m_Converter[i]];
                }
                m_ClassCounts = tmp2;
            }
            FastVector values = new FastVector(data.classAttribute().numValues());
            for (int i = 0; i < data.numClasses(); i++) {
                values.addElement(data.classAttribute().value(m_Converter[i]));
            }
            FastVector newVec = new FastVector(data.numAttributes());
            for (int i = 0; i < data.numAttributes(); i++) {
                if (i == data.classIndex()) {
                    newVec.addElement(new Attribute(data.classAttribute().name(), values, data.classAttribute().getMetadata()));
                } else {
                    newVec.addElement(data.attribute(i));
                }
            }
            Instances newInsts = new Instances(data.relationName(), newVec, 0);
            newInsts.setClassIndex(data.classIndex());
            setOutputFormat(newInsts);
            int[] temp = new int[m_Converter.length];
            for (int i = 0; i < temp.length; i++) {
                temp[m_Converter[i]] = i;
            }
            m_Converter = temp;
            for (int xyz = 0; xyz < data.numInstances(); xyz++) {
                Instance datum = data.instance(xyz);
                if (!datum.isMissing(datum.classIndex())) {
                    datum.setClassValue((float) m_Converter[(int) datum.classValue()]);
                }
                push(datum);
            }
        }
        flushInput();
        m_NewBatch = true;
        return (numPendingOutput() != 0);
    }
",1
2451218,13,"    public TaggedDoubleChoiceFromSet randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            double tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }
",1
7357528,13,"    private ArrayList<Move> shuffle(ArrayList<Move> list) {
        Random random = new Random();
        for (int index = (list.size() - 1); index > 0; index--) {
            int other = random.nextInt(index + 1);
            Move temp = list.get(other);
            list.set(other, list.get(index));
            list.set(index, temp);
        }
        return list;
    }
",1
7839341,13,"    public static void shuffle(Object[] array, Random rng) {
        for (int i = array.length - 1; i >= 0; i--) {
            int index = rng.nextInt(i + 1);
            Object a = array[index];
            array[index] = array[i];
            array[i] = a;
        }
    }
",1
5226973,13,"    void shuffle() {
        Random random = new Random();
        for (int i = cards.size() - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            Card c = cards.get(j);
            cards.set(j, cards.get(i));
            cards.set(i, c);
        }
    }
",1
11205237,13,"    public ChoiceGenerator randomize() {
        for (int i = values.size() - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            SCEvent tmp = values.get(i);
            values.set(i, values.get(j));
            values.set(j, tmp);
        }
        return this;
    }
",1
13088707,13,"    public static void shuffle(int[] array, int n) {
        for (int i = 1; i < n; ++i) {
            int swap = s_random.nextInt(i + 1);
            int temp = array[swap];
            array[swap] = array[i];
            array[i] = temp;
        }
    }
",1
13088706,13,"    public static void shuffle(Object[] array) {
        int n = array.length;
        Object temp;
        for (int i = 1; i < n; ++i) {
            int swap = s_random.nextInt(i + 1);
            temp = array[swap];
            array[swap] = array[i];
            array[i] = temp;
        }
    }
",1
17621072,13,"    public static synchronized void shuffle(char[] anArray) {
        int n = anArray.length;
        for (int i = n - 1; i >= 1; i--) {
            int j = randomSource.nextInt(i + 1);
            char temp = anArray[j];
            anArray[j] = anArray[i];
            anArray[i] = temp;
        }
    }
",1
1313371,13,"    public static int[] permute(int N, Random rand) {
        int[] a = new int[N];
        for (int i = 0; i < N; i++) a[i] = i;
        for (int i = 0; i < N; i++) {
            int r = rand.nextInt(i + 1);
            int swap = a[r];
            a[r] = a[i];
            a[i] = swap;
        }
        return a;
    }
",1
17621070,13,"    public static synchronized void shuffle(double[] anArray) {
        int n = anArray.length;
        for (int i = n - 1; i >= 1; i--) {
            int j = randomSource.nextInt(i + 1);
            double temp = anArray[j];
            anArray[j] = anArray[i];
            anArray[i] = temp;
        }
    }
",1
20328639,13,"    public static final void shuffle(boolean[] list) {
        for (int i = list.length - 1; i >= 0; i--) {
            int j = rand.nextInt(i + 1);
            if (i == j) {
                continue;
            }
            boolean tmp = list[i];
            list[i] = list[j];
            list[j] = tmp;
        }
    }
",1
19119522,13,"    private void generateShuffleOrder() {
        if (mShuffleOrder == null || mShuffleOrder.length != mAllImages.getCount()) {
            mShuffleOrder = new int[mAllImages.getCount()];
            for (int i = 0, n = mShuffleOrder.length; i < n; i++) {
                mShuffleOrder[i] = i;
            }
        }
        for (int i = mShuffleOrder.length - 1; i >= 0; i--) {
            int r = mRandom.nextInt(i + 1);
            if (r != i) {
                int tmp = mShuffleOrder[r];
                mShuffleOrder[r] = mShuffleOrder[i];
                mShuffleOrder[i] = tmp;
            }
        }
    }
",1
17621069,13,"    public static synchronized void shuffle(int[] anArray) {
        int n = anArray.length;
        for (int i = n - 1; i >= 1; i--) {
            int j = randomSource.nextInt(i + 1);
            int temp = anArray[j];
            anArray[j] = anArray[i];
            anArray[i] = temp;
        }
    }
",1
10258420,13,"    private short[] geraConfInicial(int n, short[] array) {
        int swap;
        short aux;
        Random random = new Random();
        for (int pos = n - 1; pos > 0; --pos) {
            swap = random.nextInt(pos + 1);
            aux = array[pos];
            array[pos] = array[swap];
            array[swap] = aux;
        }
        return array;
    }
",1
19076717,13,"    @SuppressWarnings(""unused"")
    public static void main(String[] args) {
        int angleCount = 10800;
        float[] angles = new float[angleCount];
        float[] sinerror = new float[angleCount];
        float[] coserror = new float[angleCount];
        float[] atanerror = new float[angleCount];
        for (int i = 0; i < angleCount; i++) {
            float angle = (float) (Math.PI * 2 * i / angleCount);
            angles[i] = angle;
            float rs = (float) Math.sin(angle);
            float ls = sin(angle);
            sinerror[i] = Math.abs(rs - ls);
            float rc = (float) Math.cos(angle);
            float lc = cos(angle);
            coserror[i] = Math.abs(rc - lc);
            float ratan = (float) Math.atan2(100 * rs, 100 * rc);
            float latan = atan2(100 * rs, 100 * rc);
            atanerror[i] = MathUtils.angleDiff(ratan, latan);
        }
        float maxSin = -1, minSin = Float.MAX_VALUE, meanSin = 0;
        float maxCos = -1, minCos = Float.MAX_VALUE, meanCos = 0;
        float maxAtan = -1, minAtan = Float.MAX_VALUE, meanAtan = 0;
        for (int i = 0; i < angleCount; i++) {
            maxSin = Math.max(maxSin, sinerror[i]);
            minSin = Math.min(minSin, sinerror[i]);
            maxCos = Math.max(maxCos, coserror[i]);
            minCos = Math.min(minCos, coserror[i]);
            maxAtan = Math.max(maxAtan, atanerror[i]);
            minAtan = Math.min(minAtan, atanerror[i]);
            meanSin += sinerror[i];
            meanCos += coserror[i];
            meanAtan += atanerror[i];
        }
        meanSin /= angleCount;
        meanCos /= angleCount;
        meanAtan /= angleCount;
        System.out.println(""Accuracy:"");
        System.out.println(""sin/cos table size = "" + sin.length);
        System.out.println(""Sin\tmin\t\tmax\t\tmean"");
        System.out.println(""\t"" + minSin + ""\t"" + maxSin + ""\t"" + meanSin);
        System.out.println(""Cos\tmin\t\tmax\t\tmean"");
        System.out.println(""\t"" + minCos + ""\t"" + maxCos + ""\t"" + meanCos);
        System.out.println(""atan2 table size = "" + atan2.length);
        System.out.println(""Atan2\tmin\t\tmax\t\tmean (in degrees)"");
        System.out.println(""\t"" + Math.toDegrees(minAtan) + ""\t"" + Math.toDegrees(maxAtan) + ""\t"" + Math.toDegrees(meanAtan));
        System.out.println(""Performance:"");
        Random rng = new Random();
        for (int i = angles.length - 1; i >= 0; i--) {
            int index = rng.nextInt(i + 1);
            float a = angles[index];
            angles[index] = angles[i];
            angles[i] = a;
        }
        System.out.println(""testing"");
        int tests = (int) 2E7;
        for (int i = 0; i < 10; i++) {
            long t = System.currentTimeMillis();
            float jm = testMathSin(tests, angles);
            long duration = System.currentTimeMillis() - t;
            double jp = (double) tests / duration;
            t = System.currentTimeMillis();
            float fm = testFastSin(tests, angles);
            duration = System.currentTimeMillis() - t;
            double fp = (double) tests / duration;
            System.out.println(""Fast sin is "" + fp / jp + "" times faster than java sin"");
        }
        float[] coords = new float[100];
        float r = 100;
        for (int i = 0; i < coords.length; i++) {
            coords[i] = rng.nextFloat() * 2 * r - r;
        }
        for (int i = 0; i < 10; i++) {
            long t = System.currentTimeMillis();
            float jm = testMathAtan(tests, coords);
            long duration = System.currentTimeMillis() - t;
            double jp = (double) tests / duration;
            t = System.currentTimeMillis();
            float fm = testFastAtan(tests, coords);
            duration = System.currentTimeMillis() - t;
            double fp = (double) tests / duration;
            System.out.println(""Fast atan is "" + fp / jp + "" times faster than java atan"");
        }
    }
",1
22181822,13,"    public int[] shuffle(int[] d) {
        int n = d.length;
        int[] res = new int[n];
        System.arraycopy(d, 0, res, 0, n);
        for (int i = 0; i < n; i++) {
            int p = i + random.nextInt(n - i);
            int q = res[p];
            res[p] = res[i];
            res[i] = q;
        }
        return (res);
    }
",1
4490317,13,"    public static void randomize(int[] arr, int start, int end) {
        for (int i = end; i > 1 + start; i--) {
            int rnd_index = start + rnd.nextInt(i - start);
            int tmp = arr[i - 1];
            arr[i - 1] = arr[rnd_index];
            arr[rnd_index] = tmp;
        }
    }
",1
19654783,13,"    public static <T> void shuffle(T[] a) {
        Random random = new Random();
        for (int i = a.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            T swap = a[i];
            a[i] = a[j];
            a[j] = swap;
        }
    }
",1
8586224,13,"    protected void permute(int v[], Random random) {
        for (int i = v.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            if (i != j) {
                int tmp = v[i];
                v[i] = v[j];
                v[j] = tmp;
            }
        }
    }
",1
22648484,13,"    public ChoiceGenerator randomize() {
        for (int i = values.size() - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            UIAction tmp = values.get(i);
            values.set(i, values.get(j));
            values.set(j, tmp);
        }
        return this;
    }
",1
20328640,13,"    public static final void shuffle(Object[] list) {
        for (int i = list.length - 1; i >= 0; i--) {
            int j = rand.nextInt(i + 1);
            if (i == j) {
                continue;
            }
            Object tmp = list[i];
            list[i] = list[j];
            list[j] = tmp;
        }
    }
",1
13160464,13,"    public void shuffle() {
        currentDeckPosition = 0;
        int n = 52;
        while (--n > 0) {
            int k = rand.nextInt(n + 1);
            int temp = deck[n];
            deck[n] = deck[k];
            deck[k] = temp;
        }
    }
",1
20740028,13,"    public static String computeSignature(List words) {
        if (words.size() == 0) return ""(empty word list)"";
        readCaches();
        firstNew = true;
        int len = words.size() + 1;
        String[] word = new String[len];
        words.toArray(word);
        word[len - 1] = String.valueOf((char) 0xffff);
        Arrays.sort(word);
        List list = new ArrayList();
        String prev = word[0];
        int c = 0;
        for (int i = 0, imax = len; i < imax; i++) {
            String w = word[i];
            if (w.equals(prev)) c++; else {
                int freq = getFreq(prev);
                if (freq < Integer.MAX_VALUE) list.add(new WordFreq(prev, c, freq));
                prev = w;
                c = 1;
            }
        }
        if (list.size() == 0) return ""(no valid words)"";
        WordFreq[] bogus = new WordFreq[0];
        WordFreq[] wordfreq = (WordFreq[]) list.toArray(bogus);
        int validlen = Math.min(SignatureLength, wordfreq.length);
        if (""tfidf"".equals(Algorithm)) {
            Arrays.sort(wordfreq, new byRelFreq());
        } else if (""rarest"".equals(Algorithm)) {
            Arrays.sort(wordfreq, new byWebFreq());
        } else if (""random"".equals(Algorithm)) {
            Random rand = new Random();
            for (int i = 0, imax = validlen; i < imax; i++) {
                int swapi = rand.nextInt(imax);
                WordFreq tmp = wordfreq[i];
                wordfreq[i] = wordfreq[swapi];
                wordfreq[swapi] = tmp;
            }
        } else if (""random100k"".equals(Algorithm)) {
            Random rand = new Random();
            validlen = 0;
            for (int i = 0, imax = wordfreq.length; i < imax; i++) {
                WordFreq tmp = wordfreq[i];
                if (tmp.webcnt < 100000) {
                    int swapi = rand.nextInt(validlen + 1);
                    wordfreq[i] = wordfreq[validlen];
                    wordfreq[validlen] = wordfreq[swapi];
                    wordfreq[swapi] = tmp;
                    validlen++;
                }
            }
            validlen = Math.min(validlen, SignatureLength);
        } else {
            Arrays.sort(wordfreq, new byRoFreq());
        }
        if (DEBUG) {
            System.out.println(""* Rankings *"");
            for (int i = 0; i < Math.min(25, wordfreq.length); i++) System.out.println(wordfreq[i]);
        }
        StringBuffer sigsb = new StringBuffer(100);
        for (int i = 0, imax = validlen; i < imax; i++) {
            if (i > 0) sigsb.append(' ');
            sigsb.append(wordfreq[i].word);
            if (StudyOut != null) StudyOut.print(wordfreq[i].pagecnt + ""/"" + wordfreq[i].webcnt + "" "");
        }
        if (StudyOut != null) StudyOut.println();
        if (Verbose && newwords.size() > 0) {
            System.out.println();
        }
        writeCache();
        return sigsb.substring(0);
    }
",1
6088697,13,"    private void assertComparatorYieldsOrder(String[] orderedObjects, Comparator<String> comparator) {
        String[] keys = (String[]) orderedObjects.clone();
        boolean isInNewOrder = false;
        while (keys.length > 1 && isInNewOrder == false) {
            shuffle: {
                Random rand = new Random();
                for (int i = keys.length - 1; i > 0; i--) {
                    String swap = keys[i];
                    int j = rand.nextInt(i + 1);
                    keys[i] = keys[j];
                    keys[j] = swap;
                }
            }
            testShuffle: {
                for (int i = 0; i < keys.length && !isInNewOrder; i++) {
                    if (!orderedObjects[i].equals(keys[i])) {
                        isInNewOrder = true;
                    }
                }
            }
        }
        Arrays.sort(keys, comparator);
        for (int i = 0; i < orderedObjects.length; i++) {
            assertEquals(orderedObjects[i], keys[i]);
        }
    }
",1
14009710,13,"    public DoubleThresholdGenerator randomize() {
        for (int i = values.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            double tmp = values[i];
            values[i] = values[j];
            values[j] = tmp;
        }
        return this;
    }
",1
13140215,13,"    @Override
    public void shuffleInstances() {
        Random random = new Random(seed);
        for (int i = 0; i < userRecords.length; i++) {
            for (int j = userRecords[i].length - 1; j > 0; j--) {
                Rating r = userRecords[i][j];
                int k = random.nextInt(j + 1);
                userRecords[i][j] = userRecords[i][k];
                userRecords[i][k] = r;
            }
        }
    }
",1
17467511,13,"    public static final void randomShuffle(int[] v, Random r) {
        int n = v.length;
        while (--n > 0) {
            int k = r.nextInt(n + 1);
            int temp = v[n];
            v[n] = v[k];
            v[k] = temp;
        }
    }
",1
17621073,13,"    public static synchronized void shuffle(byte[] anArray) {
        int n = anArray.length;
        for (int i = n - 1; i >= 1; i--) {
            int j = randomSource.nextInt(i + 1);
            byte temp = anArray[j];
            anArray[j] = anArray[i];
            anArray[i] = temp;
        }
    }
",1
23677156,13,"	public static void shuffle2(int[] a) {
		//Alternate Fisher-Yates/Knuth Shuffle
		Random random = new Random();
		random.nextInt();
		
		for(int i = a.length-1; i >= 1; i--) {
			//Choose index to swap from 0 <= j <= i
			int j = random.nextInt(i+1);
			
			//Swap
			int tmp = a[i];
			a[i] = a[j];
			a[j] = tmp;
		}
	}
",1
531920,44,"    public static boolean isPalindrome(String numberString) {
        if (numberString.length() % 2 == 0) {
            String firstHalf = numberString.substring(0, numberString.length() / 2);
            String secondHalf = numberString.substring(numberString.length() / 2);
            String secondHalfReverse = (new StringBuffer(secondHalf)).reverse().toString();
            return firstHalf.equals(secondHalfReverse);
        }
        return false;
    }
",1
8972522,44,"    public static boolean isPalindrome(String stringToTest) {
        String workingCopyString = removeJunk(stringToTest);
        String reversedCopyString = reverse(stringToTest);
        return reversedCopyString.equalsIgnoreCase(workingCopyString);
    }
",1
22060129,44,"    public static boolean isPalindrome(String string) {
        int limit = string.length() / 2;
        if (limit == 0) {
            return true;
        }
        for (int forward = 0, backward = string.length() - 1; forward < limit; forward++, backward--) {
            if (string.charAt(forward) != string.charAt(backward)) {
                return false;
            }
        }
        return true;
    }
",1
103828,44,"    public static boolean isPalindrome(String word) {
        int left = 0;
        int right = word.length() - 1;
        while (left < right) {
            if (word.charAt(left) != word.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
",1
16152856,44,"    private static final boolean isPalindrome(final String s) {
        String opposite = """";
        for (int i = s.length() - 1; i >= 0; i--) opposite = opposite + s.charAt(i);
        return s.equals(opposite);
    }
",1
4758170,44,"    public static boolean test(String possiblePalindrome) {
        int endOfFirstHalf;
        int startOfSecondHalf;
        if (possiblePalindrome.length() % 2 == 0) {
            endOfFirstHalf = possiblePalindrome.length() / 2;
            startOfSecondHalf = endOfFirstHalf + 1;
        } else {
            endOfFirstHalf = possiblePalindrome.length() / 2;
            startOfSecondHalf = endOfFirstHalf + 2;
        }
        String first = possiblePalindrome.substring(0, endOfFirstHalf);
        String second = possiblePalindrome.substring(startOfSecondHalf - 1);
        return first.equals(reverse(second));
    }
",1
4328782,44,"    public static boolean isPalindrome(String string) {
        if (string.length() == 0) return true;
        int limit = string.length() / 2;
        for (int forward = 0, backward = string.length() - 1; forward < limit; forward++) if (string.charAt(forward) != string.charAt(backward)) return false;
        return true;
    }
",1
950313,44,"    private static boolean checkPalindrome(String string) {
        int length = string.length() / 2;
        int fullLength = string.length();
        for (int k = 0; k < length; k++) {
            if (string.charAt(k) != string.charAt(fullLength - 1 - k)) return false;
        }
        return true;
    }
",1
9755674,44,"    private boolean isPalindrome(String w) {
        for (int i = 0; i < w.length() / 2; i++) {
            if (w.charAt(i) != w.charAt(w.length() - 1 - i)) {
                return false;
            }
        }
        return true;
    }
",1
590962,44,"    private static boolean isPalindrome(String string) {
        for (int k = 0; k < string.length() / 2; k++) {
            if (string.charAt(k) != string.charAt(string.length() - (k + 1))) return false;
        }
        return true;
    }
",1
23355904,44,"    public static boolean checkPalindrome(String string) {
        if (string == null) {
            return false;
        }
        String reverse = new StringBuilder(string).reverse().toString();
        if (string.equals(reverse)) {
            return true;
        }
        return false;
    }
",1
10067403,44,"    private boolean isPalindrome(int i) {
        String s = String.valueOf(i);
        return s.equals(StringUtils.reverse(s));
    }
",1
3868943,44,"    public static boolean isPalindrome(String word) {
        boolean result = false;
        if (word.length() <= 1) result = true; else if (word.charAt(0) == word.charAt(word.length() - 1)) result = isPalindrome(word.substring(1, word.length() - 1));
        return result;
    }
",1
4128381,44,"    public boolean isPalindrome(String s) {
        return new StringBuilder(s).reverse().toString().equals(s);
    }
",1
426940,44,"    public static boolean isPalindrome(String str) {
        int begin = 0;
        int end = str.length() - 1;
        if (str == null) return false;
        while (begin < (int) (str.length() / 2)) {
            if (str.charAt(begin) != str.charAt(end)) return false; else {
                begin++;
                end--;
            }
        }
        return true;
    }
",1
136941,44,"    private static boolean isPalindrome(String sub) {
        int length = sub.length() / 2;
        for (int k = 0; k < length; k++) {
            if (sub.charAt(k) != sub.charAt(sub.length() - k - 1)) return false;
        }
        return true;
    }
",1
13839383,44,"    private boolean isPalindrome(int[] m) {
        for (int i = 0; i < m.length / 2; i++) {
            if (m[i] != m[m.length - 1 - i]) {
                return false;
            }
        }
        return true;
    }
",1
23677145,7,"	public static <T extends Comparable<T>> void BubbleSortComparable1(T[] num) {
		int j;
		boolean flag = true; // set flag to true to begin first pass
		T temp; // holding variable

		while (flag) {
			flag = false; // set flag to false awaiting a possible swap
			for (j = 0; j < num.length - 1; j++) {
				if (num[j].compareTo(num[j + 1]) > 0) // change to > for ascending sort
				{
					temp = num[j]; // swap elements
					num[j] = num[j + 1];
					num[j + 1] = temp;
					flag = true; // shows a swap occurred
				}
			}
		}
	}
",1
23677133,7,"	public static void BubbleSortInt1(int[] num) {
		boolean flag = true; // set flag to true to begin first pass
		int temp; // holding variable

		while (flag) {
			flag = false; // set flag to false awaiting a possible swap
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1]) // change to > for ascending sort
				{
					temp = num[j]; // swap elements
					num[j] = num[j + 1];
					num[j + 1] = temp;
					flag = true; // shows a swap occurred
				}
			}
		}
	}
",1
20660203,7,"    public static void main(String args[]) {
        int temp;
        int[] a1 = { 6, 2, -3, 7, -1, 8, 9, 0 };
        for (int j = 0; j < (a1.length * a1.length); j++) {
            for (int i = 0; i < a1.length - 1; i++) {
                if (a1[i] > a1[i + 1]) {
                    temp = a1[i];
                    a1[i] = a1[i + 1];
                    a1[i + 1] = temp;
                }
            }
        }
        for (int i = 0; i < a1.length; i++) {
            System.out.print("" "" + a1[i]);
        }
    }
",1
23677137,7,"	public static void BubbleSortDouble1(double[] num) {
		boolean flag = true; // set flag to true to begin first pass
		double temp; // holding variable

		while (flag) {
			flag = false; // set flag to false awaiting a possible swap
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1]) // change to > for ascending sort
				{
					temp = num[j]; // swap elements
					num[j] = num[j + 1];
					num[j + 1] = temp;
					flag = true; // shows a swap occurred
				}
			}
		}
	}
",1
23677146,7,"	public static <T extends Comparable<T>> void BubbleSortComparable2(T[] num) {
		int last_exchange;
		int right_border = num.length - 1;
		do {
			last_exchange = 0;
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j].compareTo(num[j + 1]) > 0)
				{
					T temp = num[j];
					num[j] = num[j + 1];
					num[j + 1] = temp;
					last_exchange = j;
				}
			}
			right_border = last_exchange;
		} while (right_border > 0);
	}
",1
23677134,7,"	public static void BubbleSortInt2(int[] num) {
		int last_exchange;
		int right_border = num.length - 1;
		do {
			last_exchange = 0;
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1])
				{
					int temp = num[j];
					num[j] = num[j + 1];
					num[j + 1] = temp;
					last_exchange = j;
				}
			}
			right_border = last_exchange;
		} while (right_border > 0);
	}
",1
15568623,7,"    public Resultado procesar() {
        if (resultado != null) return resultado;
        int[] a = new int[elems.size()];
        Iterator iter = elems.iterator();
        int w = 0;
        while (iter.hasNext()) {
            a[w] = ((Integer) iter.next()).intValue();
            w++;
        }
        int n = a.length;
        long startTime = System.currentTimeMillis();
        int i, j, temp;
        for (i = 0; i < n - 1; i++) {
            for (j = i; j < n - 1; j++) {
                if (a[i] > a[j + 1]) {
                    temp = a[i];
                    a[i] = a[j + 1];
                    a[j + 1] = temp;
                    pasos++;
                }
            }
        }
        long endTime = System.currentTimeMillis();
        resultado = new Resultado((int) (endTime - startTime), pasos, a.length);
        System.out.println(""Resultado BB: "" + resultado);
        return resultado;
    }
",1
21273053,7,"    public RobotList<Enemy> sort_incr_Enemy(RobotList<Enemy> list, String field) {
        int length = list.size();
        Index_value[] enemy_dist = new Index_value[length];
        if (field.equals("""") || field.equals(""location"")) {
            Location cur_loc = this.getLocation();
            for (int i = 0; i < length; i++) {
                enemy_dist[i] = new Index_value(i, distance(cur_loc, list.get(i).location));
            }
        } else if (field.equals(""health"")) {
            for (int i = 0; i < length; i++) {
                enemy_dist[i] = new Index_value(i, list.get(i).health);
            }
        } else {
            say(""impossible to sort list - nothing modified"");
            return list;
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (enemy_dist[i].value > enemy_dist[i + 1].value) {
                    Index_value a = enemy_dist[i];
                    enemy_dist[i] = enemy_dist[i + 1];
                    enemy_dist[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Enemy> new_enemy_list = new RobotList<Enemy>(Enemy.class);
        for (int i = 0; i < length; i++) {
            new_enemy_list.addLast(list.get(enemy_dist[i].index));
        }
        return new_enemy_list;
    }
",1
23677142,7,"	public static void BubbleSortShort2(short[] num) {
		int last_exchange;
		int right_border = num.length - 1;
		do {
			last_exchange = 0;
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1])
				{
					short temp = num[j];
					num[j] = num[j + 1];
					num[j + 1] = temp;
					last_exchange = j;
				}
			}
			right_border = last_exchange;
		} while (right_border > 0);
	}
",1
19260977,7,"    public int[] sort() {
        boolean t = true;
        int temp = 0;
        int[] mas = new int[N];
        Random rand = new Random();
        for (int i = 0; i < N; i++) {
            mas[i] = rand.nextInt(10) + 1;
        }
        while (t) {
            t = false;
            for (int i = 0; i < mas.length - 1; i++) {
                if (mas[i] > mas[i + 1]) {
                    temp = mas[i];
                    mas[i] = mas[i + 1];
                    mas[i + 1] = temp;
                    t = true;
                }
            }
        }
        return mas;
    }
",1
23677138,7,"	public static void BubbleSortDouble2(double[] num) {
		int last_exchange;
		int right_border = num.length - 1;
		do {
			last_exchange = 0;
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1])
				{
					double temp = num[j];
					num[j] = num[j + 1];
					num[j + 1] = temp;
					last_exchange = j;
				}
			}
			right_border = last_exchange;
		} while (right_border > 0);
	}
",1
21273052,7,"    public RobotList<Float> sort_decr_Float(RobotList<Float> list, String field) {
        int length = list.size();
        Index_value[] distri = new Index_value[length];
        for (int i = 0; i < length; i++) {
            distri[i] = new Index_value(i, list.get(i));
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (distri[i].value < distri[i + 1].value) {
                    Index_value a = distri[i];
                    distri[i] = distri[i + 1];
                    distri[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Float> sol = new RobotList<Float>(Float.class);
        for (int i = 0; i < length; i++) {
            sol.addLast(new Float(distri[i].value));
        }
        return sol;
    }
",1
21779336,7,"    private void weightAndPlaceClasses() {
        int rows = getRows();
        for (int curRow = _maxPackageRank; curRow < rows; curRow++) {
            xPos = getHGap() / 2;
            ClassdiagramNode[] rowObject = getObjectsInRow(curRow);
            for (int i = 0; i < rowObject.length; i++) {
                if (curRow == _maxPackageRank) {
                    int nDownlinks = rowObject[i].getDownlinks().size();
                    rowObject[i].setWeight((nDownlinks > 0) ? (1 / nDownlinks) : 2);
                } else {
                    Vector uplinks = rowObject[i].getUplinks();
                    int nUplinks = uplinks.size();
                    if (nUplinks > 0) {
                        float average_col = 0;
                        for (int j = 0; j < uplinks.size(); j++) {
                            average_col += ((ClassdiagramNode) (uplinks.elementAt(j))).getColumn();
                        }
                        average_col /= nUplinks;
                        rowObject[i].setWeight(average_col);
                    } else {
                        rowObject[i].setWeight(1000);
                    }
                }
            }
            int[] pos = new int[rowObject.length];
            for (int i = 0; i < pos.length; i++) {
                pos[i] = i;
            }
            boolean swapped = true;
            while (swapped) {
                swapped = false;
                for (int i = 0; i < pos.length - 1; i++) {
                    if (rowObject[pos[i]].getWeight() > rowObject[pos[i + 1]].getWeight()) {
                        int temp = pos[i];
                        pos[i] = pos[i + 1];
                        pos[i + 1] = temp;
                        swapped = true;
                    }
                }
            }
            for (int i = 0; i < pos.length; i++) {
                rowObject[pos[i]].setColumn(i);
                if ((i > _vMax) && (rowObject[pos[i]].getUplinks().size() == 0) && (rowObject[pos[i]].getDownlinks().size() == 0)) {
                    if (getColumns(rows - 1) > _vMax) {
                        rows++;
                    }
                    rowObject[pos[i]].setRank(rows - 1);
                } else {
                    rowObject[pos[i]].setLocation(new Point(xPos, yPos));
                    xPos += rowObject[pos[i]].getSize().getWidth() + getHGap();
                }
            }
            yPos += getRowHeight(curRow) + getVGap();
        }
    }
",1
23677144,7,"	public static void BubbleSortByte2(byte[] num) {
		int last_exchange;
		int right_border = num.length - 1;
		do {
			last_exchange = 0;
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1])
				{
					byte temp = num[j];
					num[j] = num[j + 1];
					num[j + 1] = temp;
					last_exchange = j;
				}
			}
			right_border = last_exchange;
		} while (right_border > 0);
	}
",1
23677143,7,"	public static void BubbleSortByte1(byte[] num) {
		boolean flag = true; // set flag to true to begin first pass
		byte temp; // holding variable

		while (flag) {
			flag = false; // set flag to false awaiting a possible swap
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1]) // change to > for ascending sort
				{
					temp = num[j]; // swap elements
					num[j] = num[j + 1];
					num[j + 1] = temp;
					flag = true; // shows a swap occurred
				}
			}
		}
	}
",1
23677140,7,"	public static void BubbleSortLong2(long[] num) {
		int last_exchange;
		int right_border = num.length - 1;
		do {
			last_exchange = 0;
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1])
				{
					long temp = num[j];
					num[j] = num[j + 1];
					num[j + 1] = temp;
					last_exchange = j;
				}
			}
			right_border = last_exchange;
		} while (right_border > 0);
	}
",1
22888751,7,"    public static float medianElement(float[] array, int size) {
        float[] tmpArray = new float[size];
        System.arraycopy(array, 0, tmpArray, 0, size);
        boolean changed = true;
        while (changed) {
            changed = false;
            for (int i = 0; i < size - 1; i++) {
                if (tmpArray[i] > tmpArray[i + 1]) {
                    changed = true;
                    float tmp = tmpArray[i];
                    tmpArray[i] = tmpArray[i + 1];
                    tmpArray[i + 1] = tmp;
                }
            }
        }
        return tmpArray[size / 2];
    }
",1
23677135,7,"	public static void BubbleSortFloat1(float[] num) {
		boolean flag = true; // set flag to true to begin first pass
		float temp; // holding variable

		while (flag) {
			flag = false; // set flag to false awaiting a possible swap
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1]) // change to > for ascending sort
				{
					temp = num[j]; // swap elements
					num[j] = num[j + 1];
					num[j + 1] = temp;
					flag = true; // shows a swap occurred
				}
			}
		}
	}
",1
23677141,7,"	public static void BubbleSortShort1(short[] num) {
		boolean flag = true; // set flag to true to begin first pass
		short temp; // holding variable

		while (flag) {
			flag = false; // set flag to false awaiting a possible swap
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1]) // change to > for ascending sort
				{
					temp = num[j]; // swap elements
					num[j] = num[j + 1];
					num[j + 1] = temp;
					flag = true; // shows a swap occurred
				}
			}
		}
	}
",1
23677139,7,"	public static void BubbleSortLong1(long[] num) {
		boolean flag = true; // set flag to true to begin first pass
		long temp; // holding variable

		while (flag) {
			flag = false; // set flag to false awaiting a possible swap
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1]) // change to > for ascending sort
				{
					temp = num[j]; // swap elements
					num[j] = num[j + 1];
					num[j + 1] = temp;
					flag = true; // shows a swap occurred
				}
			}
		}
	}
",1
23677136,7,"	public static void BubbleSortFloat2(float[] num) {
		int last_exchange;
		int right_border = num.length - 1;
		do {
			last_exchange = 0;
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1])
				{
					float temp = num[j];
					num[j] = num[j + 1];
					num[j + 1] = temp;
					last_exchange = j;
				}
			}
			right_border = last_exchange;
		} while (right_border > 0);
	}
",1
22135738,7,"    protected void sort(double[] a) throws Exception {
        for (int i = a.length - 1; i >= 0; i--) {
            boolean swapped = false;
            for (int j = 0; j < i; j++) {
                if (a[j] > a[j + 1]) {
                    double d = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = d;
                    swapped = true;
                }
            }
            if (!swapped) return;
        }
    }
",1
22961758,13,"    public void touchSomeFiles(int percentage, int mode) {
        try {
            File[] files = dir.listFiles(mff);
            Random rnd = new Random();
            for (int i = files.length - 1; i >= 0; i--) {
                int j = rnd.nextInt(i + 1);
                File swap = files[i];
                files[i] = files[j];
                files[j] = swap;
            }
            int howfar = files.length * percentage / 100;
            if (mode == TOUCH_MODE_RECREATE || mode == TOUCH_MODE_COPY_TWICE) {
                for (int i = 0; i < howfar; i++) {
                    File f = files[i];
                    if (mode == TOUCH_MODE_COPY_TWICE) {
                        File bf = new File(f.getParent(), ""recreate--"" + f.getName());
                        recreateFile(f, bf);
                    } else {
                        recreateFile(f, f);
                    }
                }
                if (mode == TOUCH_MODE_COPY_TWICE) {
                    try {
                        Thread.sleep(15000);
                    } catch (InterruptedException ex) {
                        ex.printStackTrace();
                    }
                    for (int i = 0; i < howfar; i++) {
                        File f = files[i];
                        File bf = new File(f.getParent(), ""recreate--"" + f.getName());
                        recreateFile(bf, f);
                    }
                }
            } else if (mode == TOUCH_MODE_ACCESS || mode == TOUCH_MODE_MODIFY) {
                for (int i = 0; i < howfar; i++) {
                    RandomAccessFile raf = new RandomAccessFile(files[i], mode == TOUCH_MODE_MODIFY ? ""rw"" : ""r"");
                    if (raf.length() > 0) {
                        int pos = rnd.nextInt(Math.max(0, (int) raf.length()));
                        raf.seek(pos);
                        byte byte1 = raf.readByte();
                        if (mode == TOUCH_MODE_MODIFY) {
                            raf.seek(pos);
                            raf.write(byte1);
                        }
                    }
                    raf.close();
                    files[i].setLastModified(LAST_MODIFIED_DATE);
                }
            } else {
                throw new IllegalArgumentException();
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
",1
23677157,13,"	public static <T> void shuffle3(T[] a) {
		//Standard Fisher-Yates/Knuth Shuffle for Object array
		int length = a.length;
				
		Random random = new Random();
		random.nextInt();
				
		for(int i = 0; i < length; i++) {
			//Chose index to swap with from i <= j < length
			int j = i + random.nextInt(length-i);
			
			//Swap
			T tmp = a[i];
			a[i] = a[j];
			a[j] = tmp;
		}
	}
",1
23677155,13,"	public static void shuffle1(int[] a) {
		//Standard Fisher-Yates/Knuth Shuffle
		int length = a.length;
		
		Random random = new Random();
		random.nextInt();
		
		for(int i = 0; i < length; i++) {
			//Chose index to swap with from i <= j < length
			int j = i + random.nextInt(length-i);
			
			//Swap
			int tmp = a[i];
			a[i] = a[j];
			a[j] = tmp;
		}
	}
",1
20328638,13,"    public static final void shuffle(int[] list) {
        for (int i = list.length - 1; i >= 0; i--) {
            int j = rand.nextInt(i + 1);
            if (i == j) {
                continue;
            }
            int tmp = list[i];
            list[i] = list[j];
            list[j] = tmp;
        }
    }
",1
23677226,44,"	public static boolean isPalindrome(String original) {
		//A not very efficient example
		String reverse = """";
		int length = original.length();
		for (int i = length - 1; i >= 0; i--)
			reverse = reverse + original.charAt(i);

		if (original.equals(reverse))
			return true;
		else
			return false;
	}
",1
1142778,2,"    public String getChallengers() {
        InputStream is = null;
        String result = """";
        try {
            HttpClient httpclient = new DefaultHttpClient();
            HttpPost httppost = new HttpPost(domain);
            httppost.setEntity(new UrlEncodedFormEntity(library));
            HttpResponse response = httpclient.execute(httppost);
            HttpEntity entity = response.getEntity();
            is = entity.getContent();
        } catch (Exception e) {
            Log.e(""log_tag"", ""Error in http connection "" + e.toString());
        }
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(is, ""iso-8859-1""), 8);
            StringBuilder sb = new StringBuilder();
            String line = null;
            while ((line = reader.readLine()) != null) {
                sb.append(line + "","");
            }
            is.close();
            result = sb.toString();
            if (result.equals(""null,"")) {
                return ""none"";
            } else return result;
        } catch (Exception e) {
            Log.e(""log_tag"", ""Error converting result "" + e.toString());
        }
        return ""none"";
    }
",0
10625892,2,"    public static String getTextFromUrl(final String url) {
        InputStreamReader inputStreamReader = null;
        BufferedReader bufferedReader = null;
        try {
            final StringBuilder result = new StringBuilder();
            inputStreamReader = new InputStreamReader(new URL(url).openStream());
            bufferedReader = new BufferedReader(inputStreamReader);
            String line;
            while ((line = bufferedReader.readLine()) != null) {
                result.append(HtmlUtil.quoteHtml(line)).append(""\r"");
            }
            return result.toString();
        } catch (final IOException exception) {
            return exception.getMessage();
        } finally {
            InputOutputUtil.close(bufferedReader);
            InputOutputUtil.close(inputStreamReader);
        }
    }
",0
4482782,2,"    public static String httpGet(URL url) throws Exception {
        URLConnection connection = url.openConnection();
        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        StringBuffer content = new StringBuffer();
        String line = null;
        while ((line = reader.readLine()) != null) {
            content.append(line);
        }
        return content.toString();
    }
",0
6937,2,"    public static void main(String[] args) throws Exception {
        String urlString = ""http://php.tech.sina.com.cn/download/d_load.php?d_id=7877&down_id=151542"";
        urlString = EncodeUtils.encodeURL(urlString);
        URL url = new URL(urlString);
        System.out.println(""第一次："" + url);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        HttpURLConnection.setFollowRedirects(true);
        Map req = conn.getRequestProperties();
        System.out.println(""第一次请求头："");
        printMap(req);
        conn.connect();
        System.out.println(""第一次响应："");
        System.out.println(conn.getResponseMessage());
        int code = conn.getResponseCode();
        System.out.println(""第一次code:"" + code);
        printMap(conn.getHeaderFields());
        System.out.println(conn.getURL().getFile());
        if (code == 404 && !(conn.getURL() + """").equals(urlString)) {
            System.out.println(conn.getURL());
            String tmp = URLEncoder.encode(conn.getURL().toString(), ""gbk"");
            System.out.println(URLEncoder.encode(""在线音乐播放脚本"", ""GBK""));
            System.out.println(tmp);
            url = new URL(tmp);
            System.out.println(""第二次："" + url);
            conn = (HttpURLConnection) url.openConnection();
            System.out.println(""第二次响应："");
            System.out.println(""code:"" + code);
            printMap(conn.getHeaderFields());
        }
    }
",0
2640244,2,"    public DocumentDialog(Frame frame, String title, String document) {
        setTitle(title);
        textArea = new JTextArea();
        textPane = new StdScrollPane(textArea, StdScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, StdScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        textArea.setEditable(false);
        getContentPane().add(textPane);
        URL url = DocumentDialog.class.getClassLoader().getResource(document);
        try {
            StringBuilder sb = new StringBuilder();
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));
            String buildNumber = MessageBundle.getBuildNumber();
            String releaseNumber = MessageBundle.getReleaseNumber();
            String tmp;
            while ((tmp = in.readLine()) != null) {
                tmp = tmp.replace(""${build_number}"", buildNumber);
                tmp = tmp.replace(""${release_number}"", releaseNumber);
                sb.append(tmp + ""\n"");
            }
            textArea.setText(sb.toString());
            textArea.setCaretPosition(0);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",0
10489209,2,"    public static ISimpleChemObjectReader createReader(URL url, String urlString, String type) throws CDKException {
        if (type == null) {
            type = ""mol"";
        }
        ISimpleChemObjectReader cor = null;
        try {
            Reader input = new BufferedReader(getReader(url));
            FormatFactory formatFactory = new FormatFactory(8192);
            IChemFormat format = formatFactory.guessFormat(input);
            if (format != null) {
                if (format instanceof RGroupQueryFormat) {
                    cor = new RGroupQueryReader();
                    cor.setReader(input);
                } else if (format instanceof CMLFormat) {
                    cor = new CMLReader(urlString);
                    cor.setReader(url.openStream());
                } else if (format instanceof MDLV2000Format) {
                    cor = new MDLV2000Reader(getReader(url));
                    cor.setReader(input);
                }
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        if (cor == null) {
            if (type.equals(JCPFileFilter.cml) || type.equals(JCPFileFilter.xml)) {
                cor = new CMLReader(urlString);
            } else if (type.equals(JCPFileFilter.sdf)) {
                cor = new MDLV2000Reader(getReader(url));
            } else if (type.equals(JCPFileFilter.mol)) {
                cor = new MDLV2000Reader(getReader(url));
            } else if (type.equals(JCPFileFilter.inchi)) {
                try {
                    cor = new INChIReader(new URL(urlString).openStream());
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (type.equals(JCPFileFilter.rxn)) {
                cor = new MDLRXNV2000Reader(getReader(url));
            } else if (type.equals(JCPFileFilter.smi)) {
                cor = new SMILESReader(getReader(url));
            }
        }
        if (cor == null) {
            throw new CDKException(GT._(""Could not determine file format""));
        }
        if (cor instanceof MDLV2000Reader) {
            try {
                BufferedReader in = new BufferedReader(getReader(url));
                String line;
                while ((line = in.readLine()) != null) {
                    if (line.equals(""$$$$"")) {
                        String message = GT._(""It seems you opened a mol or sdf"" + "" file containing several molecules. "" + ""Only the first one will be shown"");
                        JOptionPane.showMessageDialog(null, message, GT._(""sdf-like file""), JOptionPane.INFORMATION_MESSAGE);
                        break;
                    }
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
        return cor;
    }
",0
14380467,2,"    public String readTemplateToString(String fileName) {
        URL url = null;
        url = classLoader.getResource(fileName);
        StringBuffer content = new StringBuffer();
        if (url == null) {
            String error = ""Template file could not be found: "" + fileName;
            throw new RuntimeException(error);
        }
        try {
            BufferedReader breader = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));
            String strLine = """";
            while ((strLine = breader.readLine()) != null) {
                content.append(strLine).append(""\n"");
            }
            breader.close();
        } catch (Exception e) {
            throw new RuntimeException(""Problem while loading file: "" + fileName);
        }
        return content.toString();
    }
",0
9106740,2,"    public String sendXml(URL url, String xmlMessage, boolean isResponseExpected) throws IOException {
        if (url == null) {
            throw new IllegalArgumentException(""url == null"");
        }
        if (xmlMessage == null) {
            throw new IllegalArgumentException(""xmlMessage == null"");
        }
        LOGGER.finer(""url = "" + url);
        LOGGER.finer(""xmlMessage = :"" + xmlMessage + "":"");
        LOGGER.finer(""isResponseExpected = "" + isResponseExpected);
        String answer = null;
        try {
            URLConnection urlConnection = url.openConnection();
            urlConnection.setRequestProperty(""Content-type"", ""text/xml"");
            urlConnection.setDoOutput(true);
            urlConnection.setUseCaches(false);
            Writer writer = null;
            try {
                writer = new OutputStreamWriter(urlConnection.getOutputStream());
                writer.write(xmlMessage);
                writer.flush();
            } finally {
                if (writer != null) {
                    writer.close();
                }
            }
            LOGGER.finer(""message written"");
            StringBuilder sb = new StringBuilder();
            BufferedReader in = null;
            try {
                in = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
                if (isResponseExpected) {
                    String inputLine;
                    while ((inputLine = in.readLine()) != null) {
                        sb.append(inputLine).append(""\n"");
                    }
                    answer = sb.toString();
                    LOGGER.finer(""response read"");
                }
            } catch (FileNotFoundException e) {
                LOGGER.log(Level.SEVERE, ""No response"", e);
            } finally {
                if (in != null) {
                    in.close();
                }
            }
        } catch (ConnectException e) {
            LOGGER.log(Level.SEVERE, e.getMessage(), e);
        }
        LOGGER.finer(""answer = :"" + answer + "":"");
        return answer;
    }
",0
12078160,2,"    public String getIpAddress() {
        try {
            URL url = new URL(""http://checkip.dyndns.org"");
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String linha;
            String rtn = """";
            while ((linha = in.readLine()) != null) rtn += linha;
            ;
            in.close();
            return filtraRetorno(rtn);
        } catch (IOException ex) {
            Logger.getLogger(ExternalIp.class.getName()).log(Level.SEVERE, null, ex);
            return ""ERRO."";
        }
    }
",0
20153060,2,"    public static void openFile(PublicHubList hublist, String url) {
        BufferedReader fichAl;
        String linha;
        try {
            if (url.startsWith(""http://"")) fichAl = new BufferedReader(new InputStreamReader((new java.net.URL(url)).openStream())); else fichAl = new BufferedReader(new FileReader(url));
            while ((linha = fichAl.readLine()) != null) {
                try {
                    hublist.addDCHub(new DCHub(linha, DCHub.hublistFormater));
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",0
129856,2,"    public String getScenarioData(String urlForSalesData) throws IOException, Exception {
        InputStream inputStream = null;
        BufferedReader bufferedReader = null;
        DataInputStream input = null;
        StringBuffer sBuf = new StringBuffer();
        Proxy proxy;
        if (httpWebProxyServer != null && Integer.toString(httpWebProxyPort) != null) {
            SocketAddress address = new InetSocketAddress(httpWebProxyServer, httpWebProxyPort);
            proxy = new Proxy(Proxy.Type.HTTP, address);
        } else {
            proxy = null;
        }
        proxy = null;
        URL url;
        try {
            url = new URL(urlForSalesData);
            HttpURLConnection httpUrlConnection;
            if (proxy != null) httpUrlConnection = (HttpURLConnection) url.openConnection(proxy); else httpUrlConnection = (HttpURLConnection) url.openConnection();
            httpUrlConnection.setDoInput(true);
            httpUrlConnection.setRequestMethod(""GET"");
            String name = rb.getString(""WRAP_NAME"");
            String password = rb.getString(""WRAP_PASSWORD"");
            Credentials simpleAuthCrentials = new Credentials(TOKEN_TYPE.SimpleApiAuthToken, name, password);
            ACSTokenProvider tokenProvider = new ACSTokenProvider(httpWebProxyServer, httpWebProxyPort, simpleAuthCrentials);
            String requestUriStr1 = ""https://"" + solutionName + ""."" + acmHostName + ""/"" + serviceName;
            String appliesTo1 = rb.getString(""SIMPLEAPI_APPLIES_TO"");
            String token = tokenProvider.getACSToken(requestUriStr1, appliesTo1);
            httpUrlConnection.addRequestProperty(""token"", ""WRAPv0.9 "" + token);
            httpUrlConnection.addRequestProperty(""solutionName"", solutionName);
            httpUrlConnection.connect();
            if (httpUrlConnection.getResponseCode() == HttpServletResponse.SC_UNAUTHORIZED) {
                List<TestSalesOrderService> salesOrderServiceBean = new ArrayList<TestSalesOrderService>();
                TestSalesOrderService response = new TestSalesOrderService();
                response.setResponseCode(HttpServletResponse.SC_UNAUTHORIZED);
                response.setResponseMessage(httpUrlConnection.getResponseMessage());
                salesOrderServiceBean.add(response);
            }
            inputStream = httpUrlConnection.getInputStream();
            input = new DataInputStream(inputStream);
            bufferedReader = new BufferedReader(new InputStreamReader(input));
            String str;
            while (null != ((str = bufferedReader.readLine()))) {
                sBuf.append(str);
            }
            String responseString = sBuf.toString();
            return responseString;
        } catch (MalformedURLException e) {
            throw e;
        } catch (IOException e) {
            throw e;
        }
    }
",0
13821141,2,"    public static String readUrlText(String urlString) throws IOException {
        URL url = new URL(urlString);
        InputStream stream = url.openStream();
        StringBuilder buf = new StringBuilder();
        BufferedReader in = null;
        try {
            in = new BufferedReader(new InputStreamReader(stream));
            String str;
            while ((str = in.readLine()) != null) {
                buf.append(str);
                buf.append(System.getProperty(""line.separator""));
            }
        } catch (IOException e) {
            System.out.println(""Error reading text from URL ["" + url + ""]: "" + e.toString());
            throw e;
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                    System.out.println(""Error closing after reading text from URL ["" + url + ""]: "" + e.toString());
                }
            }
        }
        return buf.toString();
    }
",0
4453922,2,"    public static void request() {
        try {
            URL url = new URL(""http://www.nseindia.com/marketinfo/companyinfo/companysearch.jsp?cons=ghcl&section=7"");
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                System.out.println(line);
            }
            rd.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",0
5753321,2,"    public String selectFROM() throws Exception {
        BufferedReader in = null;
        String data = null;
        try {
            HttpClient httpclient = new DefaultHttpClient();
            URI uri = new URI(""http://**.**.**.**/OctopusManager/index2.php"");
            HttpGet request = new HttpGet();
            request.setURI(uri);
            HttpResponse httpresponse = httpclient.execute(request);
            HttpEntity httpentity = httpresponse.getEntity();
            in = new BufferedReader(new InputStreamReader(httpentity.getContent()));
            StringBuffer sb = new StringBuffer("""");
            String line = """";
            while ((line = in.readLine()) != null) {
                sb.append(line);
            }
            in.close();
            data = sb.toString();
            return data;
        } finally {
            if (in != null) {
                try {
                    in.close();
                    return data;
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }
",0
8612323,2,"    public ProductListByCatHandler(int cathegory, int langId) {
        try {
            URL url = new URL(""http://eiffel.itba.edu.ar/hci/service/Catalog.groovy?method=GetProductListByCategory&category_id="" + cathegory + ""&language_id="" + langId);
            URLConnection urlc = url.openConnection();
            urlc.setDoOutput(false);
            urlc.setAllowUserInteraction(false);
            BufferedReader br = new BufferedReader(new InputStreamReader(urlc.getInputStream()));
            String str;
            StringBuffer sb = new StringBuffer();
            while ((str = br.readLine()) != null) {
                sb.append(str);
                sb.append(""\n"");
            }
            br.close();
            String response = sb.toString();
            if (response == null) {
                return;
            }
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            DocumentBuilder db = dbf.newDocumentBuilder();
            InputSource is = new InputSource();
            is.setCharacterStream(new StringReader(response));
            Document dom = db.parse(is);
            NodeList nl = dom.getElementsByTagName(""product"");
            for (int i = 0; i < nl.getLength(); i++) {
                Element nodes = (Element) nl.item(i);
                String id = nodes.getAttribute(""id"").toString();
                NodeList name = nodes.getElementsByTagName(""name"");
                NodeList rank2 = nodes.getElementsByTagName(""sales_rank"");
                NodeList price = nodes.getElementsByTagName(""price"");
                NodeList url2 = nodes.getElementsByTagName(""image_url"");
                String nameS = getCharacterDataFromElement((Element) name.item(0));
                String rank2S = getCharacterDataFromElement((Element) rank2.item(0));
                String priceS = getCharacterDataFromElement((Element) price.item(0));
                String url2S = getCharacterDataFromElement((Element) url2.item(0));
                list.add(new ProductShort(id, nameS, rank2S, priceS, url2S));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",0
2633238,2,"    public static String getResourceFromURL(URL url, String acceptHeader) throws java.io.IOException {
        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
        urlConnection.setUseCaches(false);
        urlConnection.setRequestProperty(""Accept"", acceptHeader);
        urlConnection.setInstanceFollowRedirects(true);
        BufferedReader input = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
        String content = """";
        String line;
        while ((line = input.readLine()) != null) {
            content += line;
        }
        input.close();
        return content;
    }
",0
497400,2,"    public TVRageShowInfo(String xmlShowName) {
        String[] tmp, tmp2;
        String line = """";
        this.usrShowName = xmlShowName;
        try {
            URL url = new URL(""http://www.tvrage.com/quickinfo.php?show="" + xmlShowName.replaceAll("" "", ""%20""));
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((line = in.readLine()) != null) {
                tmp = line.split(""@"");
                if (tmp[0].equals(""Show Name"")) showName = tmp[1];
                if (tmp[0].equals(""Show URL"")) showURL = tmp[1];
                if (tmp[0].equals(""Latest Episode"")) {
                    StringTokenizer st = new StringTokenizer(tmp[1], ""^"");
                    for (int i = 0; st.hasMoreTokens(); i++) {
                        if (i == 0) {
                            tmp2 = st.nextToken().split(""x"");
                            latestSeasonNum = tmp2[0];
                            latestEpisodeNum = tmp2[1];
                            if (latestSeasonNum.charAt(0) == '0') latestSeasonNum = latestSeasonNum.substring(1);
                        } else if (i == 1) latestTitle = st.nextToken().replaceAll(""&"", ""and""); else latestAirDate = st.nextToken();
                    }
                }
                if (tmp[0].equals(""Next Episode"")) {
                    StringTokenizer st = new StringTokenizer(tmp[1], ""^"");
                    for (int i = 0; st.hasMoreTokens(); i++) {
                        if (i == 0) {
                            tmp2 = st.nextToken().split(""x"");
                            nextSeasonNum = tmp2[0];
                            nextEpisodeNum = tmp2[1];
                            if (nextSeasonNum.charAt(0) == '0') nextSeasonNum = nextSeasonNum.substring(1);
                        } else if (i == 1) nextTitle = st.nextToken().replaceAll(""&"", ""and""); else nextAirDate = st.nextToken();
                    }
                }
                if (tmp[0].equals(""Status"")) status = tmp[1];
                if (tmp[0].equals(""Airtime"")) airTime = tmp[1];
            }
            if (airTime.length() != 0) {
                tmp = airTime.split("","");
                airTimeHour = tmp[1];
            }
            in.close();
            url = new URL(showURL);
            in = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((line = in.readLine()) != null) {
                if (line.indexOf(""<b>Latest Episode: </b>"") > -1) {
                    tmp = line.split(""'>"");
                    if (tmp[2].indexOf(':') > -1) {
                        tmp = tmp[2].split("":"");
                        latestSeriesNum = tmp[0];
                    }
                } else if (line.indexOf(""<b>Next Episode: </b>"") > -1) {
                    tmp = line.split(""'>"");
                    if (tmp[2].indexOf(':') > -1) {
                        tmp = tmp[2].split("":"");
                        nextSeriesNum = tmp[0];
                    }
                }
            }
            in.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
    }
",0
8587541,2,"    public static List importSymbol(Report report, Symbol symbol, TradingDate startDate, TradingDate endDate) throws IOException {
        List quotes = new ArrayList();
        String URLString = constructURL(symbol, startDate, endDate);
        QuoteFilter filter = new YahooQuoteFilter(symbol);
        PreferencesManager.ProxyPreferences proxyPreferences = PreferencesManager.loadProxySettings();
        try {
            URL url = new URL(URLString);
            InputStreamReader input = new InputStreamReader(url.openStream());
            BufferedReader bufferedInput = new BufferedReader(input);
            String line = bufferedInput.readLine();
            while (line != null) {
                line = bufferedInput.readLine();
                if (line != null) {
                    try {
                        Quote quote = filter.toQuote(line);
                        quotes.add(quote);
                        verify(report, quote);
                    } catch (QuoteFormatException e) {
                        report.addError(Locale.getString(""YAHOO"") + "":"" + symbol + "":"" + Locale.getString(""ERROR"") + "": "" + e.getMessage());
                    }
                }
            }
            bufferedInput.close();
        } catch (BindException e) {
            DesktopManager.showErrorMessage(Locale.getString(""UNABLE_TO_CONNECT_ERROR"", e.getMessage()));
            throw new IOException();
        } catch (ConnectException e) {
            DesktopManager.showErrorMessage(Locale.getString(""UNABLE_TO_CONNECT_ERROR"", e.getMessage()));
            throw new IOException();
        } catch (UnknownHostException e) {
            DesktopManager.showErrorMessage(Locale.getString(""UNKNOWN_HOST_ERROR"", e.getMessage()));
            throw new IOException();
        } catch (NoRouteToHostException e) {
            DesktopManager.showErrorMessage(Locale.getString(""DESTINATION_UNREACHABLE_ERROR"", e.getMessage()));
            throw new IOException();
        } catch (MalformedURLException e) {
            DesktopManager.showErrorMessage(Locale.getString(""INVALID_PROXY_ERROR"", proxyPreferences.host, proxyPreferences.port));
            throw new IOException();
        } catch (FileNotFoundException e) {
            report.addError(Locale.getString(""YAHOO"") + "":"" + symbol + "":"" + Locale.getString(""ERROR"") + "": "" + Locale.getString(""NO_QUOTES_FOUND""));
        } catch (IOException e) {
            DesktopManager.showErrorMessage(Locale.getString(""ERROR_DOWNLOADING_QUOTES""));
            throw new IOException();
        }
        return quotes;
    }
",0
324679,2,"    public boolean import_hints(String filename) {
        int pieceId;
        int i, col, row;
        int rotation;
        int number;
        boolean byurl = true;
        e2piece temppiece;
        String lineread;
        StringTokenizer tok;
        BufferedReader entree;
        try {
            if (byurl == true) {
                URL url = new URL(baseURL, filename);
                InputStream in = url.openStream();
                entree = new BufferedReader(new InputStreamReader(in));
            } else {
                entree = new BufferedReader(new FileReader(filename));
            }
            pieceId = 0;
            lineread = entree.readLine();
            tok = new StringTokenizer(lineread, "" "");
            number = Integer.parseInt(tok.nextToken());
            for (i = 0; i < number; i++) {
                lineread = entree.readLine();
                if (lineread == null) {
                    break;
                }
                tok = new StringTokenizer(lineread, "" "");
                pieceId = Integer.parseInt(tok.nextToken());
                col = Integer.parseInt(tok.nextToken()) - 1;
                row = Integer.parseInt(tok.nextToken()) - 1;
                rotation = Integer.parseInt(tok.nextToken());
                System.out.println(""placing hint piece : "" + pieceId);
                place_piece_at(pieceId, col, row, 0);
                temppiece = board.get_piece_at(col, row);
                temppiece.reset_rotation();
                temppiece.rotate(rotation);
                temppiece.set_as_hint();
            }
            return true;
        } catch (IOException err) {
            return false;
        }
    }
",0
20539816,2,"    public static Collection<SearchKeyResult> searchKey(String iText, String iKeyServer) throws Exception {
        Vector<SearchKeyResult> outVec = new Vector<SearchKeyResult>();
        String uri = iKeyServer + ""/pks/lookup?search="" + URLEncoder.encode(iText, ""UTF-8"");
        URL url = new URL(uri);
        BufferedReader input = new BufferedReader(new InputStreamReader(url.openStream()));
        Pattern regex = Pattern.compile(""pub.*?<a\\s+href\\s*=\""(.*?)\"".*?>\\s*(\\w+)\\s*</a>.*?(\\d+-\\d+-\\d+).*?<a\\s+href\\s*=\"".*?\"".*?>\\s*(.+?)\\s*</a>"", Pattern.CANON_EQ);
        String line;
        while ((line = input.readLine()) != null) {
            Matcher regexMatcher = regex.matcher(line);
            while (regexMatcher.find()) {
                String id = regexMatcher.group(2);
                String downUrl = iKeyServer + regexMatcher.group(1);
                String downDate = regexMatcher.group(3);
                String name = HTMLDecoder.decodeHTML(regexMatcher.group(4));
                outVec.add(new SearchKeyResult(id, name, downDate, downUrl));
            }
        }
        input.close();
        return outVec;
    }
",0
15489464,2,"    public Object send(URL url, Object params) throws Exception {
        params = processRequest(params);
        String response = """";
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        response += in.readLine();
        while (response != null) response += in.readLine();
        in.close();
        return processResponse(response);
    }
",0
5414796,2,"    public static void upper() throws Exception {
        File input = new File(""dateiname"");
        PostMethod post = new PostMethod(""url"");
        post.setRequestBody(new FileInputStream(input));
        if (input.length() < Integer.MAX_VALUE) post.setRequestContentLength((int) input.length()); else post.setRequestContentLength(EntityEnclosingMethod.CONTENT_LENGTH_CHUNKED);
        post.setRequestHeader(""Content-type"", ""text/xml; charset=ISO-8859�1"");
        HttpClient httpclient = new HttpClient();
        httpclient.executeMethod(post);
        post.releaseConnection();
        URL url = new URL(""https://www.amazon.de/"");
        URLConnection conn = url.openConnection();
        BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        String line;
        while ((line = rd.readLine()) != null) {
            System.out.println(line);
        }
        rd.close();
    }
",0
668846,2,"    public static String getURL(String urlString, String getData, String postData) {
        try {
            if (getData != null) if (!getData.equals("""")) urlString += ""?"" + getData;
            URL url = new URL(urlString);
            URLConnection connection = url.openConnection();
            if (!postData.equals("""")) {
                connection.setDoOutput(true);
                PrintWriter out = new PrintWriter(connection.getOutputStream());
                out.print(postData);
                out.close();
            }
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            int inputLine;
            String output = """";
            while ((inputLine = in.read()) != -1) output += (char) inputLine;
            in.close();
            return output;
        } catch (Exception e) {
            return null;
        }
    }
",0
297790,2,"    public static String get(String strUrl) {
        try {
            URL url = new URL(strUrl);
            URLConnection conn = url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String s = """";
            String sRet = """";
            while ((s = in.readLine()) != null) {
                sRet += s;
            }
            return sRet;
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return """";
    }
",0
3493862,2,"    @Test
    public void testDocumentDownloadExcel() throws IOException {
        if (uploadedExcelDocumentID == null) {
            fail(""Document Upload Test should run first"");
        }
        String downloadLink = GoogleDownloadLinkGenerator.generateXlDownloadLink(uploadedExcelDocumentID);
        URL url = new URL(downloadLink);
        URLConnection urlConnection = url.openConnection();
        urlConnection.connect();
        InputStream input = url.openStream();
        FileWriter fw = new FileWriter(""tmpOutput.kb"");
        Reader reader = new InputStreamReader(input);
        BufferedReader bufferedReader = new BufferedReader(reader);
        String strLine = """";
        int count = 0;
        while (count < 10000) {
            strLine = bufferedReader.readLine();
            if (strLine != null && strLine != """") {
                fw.write(strLine);
            }
            count++;
        }
    }
",0
6613739,2,"    private static MappedObject sendHttpRequestToUrl(URL url, String method) throws Exception {
        try {
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod(method);
            connection.connect();
            InputStream is = connection.getInputStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(is));
            StringBuilder buffer = new StringBuilder();
            String line = null;
            while ((line = reader.readLine()) != null) {
                buffer.append(line);
            }
            System.out.println(""Read: "" + buffer.toString());
            connection.disconnect();
            JAXBContext context = JAXBContext.newInstance(MappedObject.class);
            Unmarshaller unmarshaller = context.createUnmarshaller();
            MappedObject mapped = (MappedObject) unmarshaller.unmarshal(new StringReader(buffer.toString()));
            return mapped;
        } catch (IOException e) {
            e.printStackTrace();
        }
        throw new Exception(""Could not establish connection to "" + url.toExternalForm());
    }
",0
5390079,2,"    private Map getBlackHoleData() throws Exception {
        File dataFile = new File(Kit.getDataDir() + BLACK_HOLE);
        if (dataFile.exists() && daysOld(dataFile) < 1) {
            return getStoredData(dataFile);
        }
        InputStream stream = null;
        try {
            String bh_url = ""http://www.critique.org/users/critters/blackholes/sightdata.html"";
            URL url = new URL(bh_url);
            stream = url.openStream();
        } catch (IOException e) {
            return getStoredData(dataFile);
        }
        BufferedReader br = new BufferedReader(new InputStreamReader(stream));
        StringBuffer data = new StringBuffer();
        String line;
        while ((line = br.readLine()) != null) {
            data.append(line);
        }
        br.close();
        Pattern p = Pattern.compile(regexp);
        Matcher m = p.matcher(data);
        Map map = new THashMap();
        while (m.find()) {
            map.put(m.group(1).trim(), new ReplyTimeDatum(Integer.parseInt(m.group(3)), Integer.parseInt(m.group(4)), 0, Integer.parseInt(m.group(2))));
        }
        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(dataFile));
        oos.writeObject(map);
        oos.close();
        return map;
    }
",0
11101256,2,"    private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException {
        String subline = line.substring(line.indexOf(inTo) + inTo.length());
        String tempStr = subline.substring(subline.indexOf(inFrom) + inFrom.length(), subline.indexOf(inTo));
        String inURL = ""http://goal.2010worldcup.163.com/data/match/general/"" + tempStr.substring(tempStr.indexOf(""/"") + 1) + "".xml"";
        URL url = new URL(inURL);
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), ""utf-8""));
        String inLine = null;
        String scoreFrom = ""score=\"""";
        String homeTo = ""\"" side=\""Home"";
        String awayTo = ""\"" side=\""Away"";
        String goalInclud = ""Stat"";
        String playerFrom = ""playerId=\"""";
        String playerTo = ""\"" position="";
        String timeFrom = ""time=\"""";
        String timeTo = ""\"" period"";
        String teamFinish = ""</Team>"";
        boolean homeStart = false;
        boolean awayStart = false;
        while ((inLine = reader.readLine()) != null) {
            if (inLine.indexOf(teamFinish) != -1) {
                homeStart = false;
                awayStart = false;
            }
            if (inLine.indexOf(homeTo) != -1) {
                result.get(key).setHomeScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(homeTo)));
                homeStart = true;
            }
            if (homeStart && inLine.indexOf(goalInclud) != -1) {
                MatchEvent me = new MatchEvent();
                me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))));
                me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)));
                result.get(key).getHomeEvents().add(me);
            }
            if (inLine.indexOf(awayTo) != -1) {
                result.get(key).setAwayScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(awayTo)));
                awayStart = true;
            }
            if (awayStart && inLine.indexOf(goalInclud) != -1) {
                MatchEvent me = new MatchEvent();
                me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))));
                me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)));
                result.get(key).getAwayEvents().add(me);
            }
        }
        reader.close();
    }
",0
8023601,2,"    protected static List<Pattern> getBotPatterns() {
        List<Pattern> patterns = new ArrayList<Pattern>();
        try {
            Enumeration<URL> urls = AbstractPustefixRequestHandler.class.getClassLoader().getResources(""META-INF/org/pustefixframework/http/bot-user-agents.txt"");
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                InputStream in = url.openStream();
                BufferedReader reader = new BufferedReader(new InputStreamReader(in, ""utf8""));
                String line;
                while ((line = reader.readLine()) != null) {
                    line = line.trim();
                    if (!line.startsWith(""#"")) {
                        Pattern pattern = Pattern.compile(line);
                        patterns.add(pattern);
                    }
                }
                in.close();
            }
        } catch (IOException e) {
            throw new RuntimeException(""Error reading bot user-agent configuration"", e);
        }
        return patterns;
    }
",0
10345032,2,"    private String GetStringFromURL(String URL) {
        InputStream in = null;
        InputStreamReader inputStreamReader = null;
        BufferedReader bufferedReader = null;
        String outstring = """";
        try {
            java.net.URL url = new java.net.URL(URL);
            in = url.openStream();
            inputStreamReader = new InputStreamReader(in);
            bufferedReader = new BufferedReader(inputStreamReader);
            StringBuffer out = new StringBuffer("""");
            String nextLine;
            String newline = System.getProperty(""line.separator"");
            while ((nextLine = bufferedReader.readLine()) != null) {
                out.append(nextLine);
                out.append(newline);
            }
            outstring = new String(out);
        } catch (IOException e) {
            System.out.println(""Failed to read from "" + URL);
            outstring = """";
        } finally {
            try {
                bufferedReader.close();
                inputStreamReader.close();
            } catch (Exception e) {
            }
        }
        return outstring;
    }
",0
6908537,2,"    public String login() {
        System.out.println(""Logging in to LOLA"");
        try {
            String data = URLEncoder.encode(""email"", ""UTF-8"") + ""="" + URLEncoder.encode(get_email(), ""UTF-8"");
            data += ""&"" + URLEncoder.encode(""pw"", ""UTF-8"") + ""="" + URLEncoder.encode(get_pw(), ""UTF-8"");
            URL url = new URL(URL_LOLA + FILE_LOGIN);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(data);
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line, sessid;
            line = rd.readLine();
            sessid = get_sessid(line);
            this.set_session(sessid);
            wr.close();
            rd.close();
            return sessid;
        } catch (Exception e) {
            System.out.println(""Login Error"");
            return """";
        }
    }
",0
3577906,2,"    public static TestResponse get(String urlString, String accept) throws IOException {
        HttpURLConnection httpCon = null;
        byte[] result = null;
        byte[] errorResult = null;
        try {
            URL url = new URL(urlString);
            httpCon = (HttpURLConnection) url.openConnection();
            httpCon.setRequestMethod(""GET"");
            httpCon.setRequestProperty(""Accept"", accept);
            BufferedInputStream in = new BufferedInputStream(httpCon.getInputStream());
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            int next = in.read();
            while (next > -1) {
                os.write(next);
                next = in.read();
            }
            os.flush();
            result = os.toByteArray();
            os.close();
        } catch (IOException e) {
        } finally {
            InputStream errorStream = httpCon.getErrorStream();
            if (errorStream != null) {
                BufferedInputStream errorIn = new BufferedInputStream(errorStream);
                ByteArrayOutputStream errorOs = new ByteArrayOutputStream();
                int errorNext = errorIn.read();
                while (errorNext > -1) {
                    errorOs.write(errorNext);
                    errorNext = errorIn.read();
                }
                errorOs.flush();
                errorResult = errorOs.toByteArray();
                errorOs.close();
            }
            return new TestResponse(httpCon.getResponseCode(), errorResult, result);
        }
    }
",0
14328796,2,"    public ServiceInfo[] findServices(String name) {
        Vector results = new Vector();
        String service_file = ServiceDiscovery.SERVICE_HOME + name;
        for (int loader_count = 0; loader_count < class_loaders_.size(); loader_count++) {
            ClassLoader loader = (ClassLoader) class_loaders_.elementAt(loader_count);
            Enumeration enumeration = null;
            try {
                enumeration = loader.getResources(service_file);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            if (enumeration == null) continue;
            while (enumeration.hasMoreElements()) {
                try {
                    URL url = (URL) enumeration.nextElement();
                    InputStream is = url.openStream();
                    if (is != null) {
                        try {
                            BufferedReader rd;
                            try {
                                rd = new BufferedReader(new InputStreamReader(is, ""UTF-8""));
                            } catch (java.io.UnsupportedEncodingException e) {
                                rd = new BufferedReader(new InputStreamReader(is));
                            }
                            try {
                                String service_class_name;
                                while ((service_class_name = rd.readLine()) != null) {
                                    service_class_name.trim();
                                    if ("""".equals(service_class_name)) continue;
                                    if (service_class_name.startsWith(""#"")) continue;
                                    ServiceInfo sinfo = new ServiceInfo();
                                    sinfo.setClassName(service_class_name);
                                    sinfo.setLoader(loader);
                                    sinfo.setURL(url);
                                    results.add(sinfo);
                                }
                            } finally {
                                rd.close();
                            }
                        } finally {
                            is.close();
                        }
                    }
                } catch (MalformedURLException ex) {
                    ex.printStackTrace();
                } catch (IOException ioe) {
                    ;
                }
            }
        }
        ServiceInfo result_array[] = new ServiceInfo[results.size()];
        results.copyInto(result_array);
        return (result_array);
    }
",0
8665323,2,"    public String GetMemberName(String id) {
        String name = null;
        try {
            String line;
            URL url = new URL(intvasmemberDeatails + ""?CID="" + id);
            URLConnection connection = url.openConnection();
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            while ((line = reader.readLine()) != null) {
                name = line;
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        String[] parts = name.split("" "");
        rating = parts[2];
        return parts[0] + "" "" + parts[1];
    }
",0
6276686,2,"    public static String sendGetRequest(String endpoint, String requestParameters) {
        String result = null;
        if (endpoint.startsWith(""http://"")) {
            try {
                StringBuffer data = new StringBuffer();
                String urlStr = endpoint;
                if (requestParameters != null && requestParameters.length() > 0) {
                    urlStr += ""?"" + requestParameters;
                }
                URL url = new URL(urlStr);
                URLConnection conn = url.openConnection();
                BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                StringBuffer sb = new StringBuffer();
                String line;
                while ((line = rd.readLine()) != null) {
                    sb.append(line + ""\n"");
                }
                rd.close();
                result = sb.toString();
            } catch (Exception e) {
            }
        }
        return result;
    }
",0
55568,2,"    public static void httpOnLoad(String fileName, String urlpath) throws Exception {
        URL url = new URL(urlpath);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod(""GET"");
        conn.connect();
        int responseCode = conn.getResponseCode();
        System.err.println(""Code : "" + responseCode);
        System.err.println(""getResponseMessage : "" + conn.getResponseMessage());
        if (responseCode >= 400) {
            return;
        }
        int threadSize = 3;
        int fileLength = conn.getContentLength();
        System.out.println(""fileLength:"" + fileLength);
        int block = fileLength / threadSize;
        int lastBlock = fileLength - (block * (threadSize - 1));
        conn.disconnect();
        File file = new File(fileName);
        RandomAccessFile randomFile = new RandomAccessFile(file, ""rw"");
        randomFile.setLength(fileLength);
        randomFile.close();
        for (int i = 2; i < 3; i++) {
            int startPosition = i * block;
            if (i == threadSize - 1) {
                block = lastBlock;
            }
            RandomAccessFile threadFile = new RandomAccessFile(file, ""rw"");
            threadFile.seek(startPosition);
            new TestDownFile(url, startPosition, threadFile, block).start();
        }
    }
",0
2396188,2,"    public static Vector getMetaKeywordsFromURL(String p_url) throws Exception {
        URL x_url = new URL(p_url);
        URLConnection x_conn = x_url.openConnection();
        InputStreamReader x_is_reader = new InputStreamReader(x_conn.getInputStream());
        BufferedReader x_reader = new BufferedReader(x_is_reader);
        String x_line = null;
        String x_lc_line = null;
        int x_body = -1;
        String x_keyword_list = null;
        int x_keywords = -1;
        String[] x_meta_keywords = null;
        while ((x_line = x_reader.readLine()) != null) {
            x_lc_line = x_line.toLowerCase();
            x_keywords = x_lc_line.indexOf(""<meta name=\""keywords\"" content=\"""");
            if (x_keywords != -1) {
                x_keywords = ""<meta name=\""keywords\"" content=\"""".length();
                x_keyword_list = x_line.substring(x_keywords, x_line.indexOf(""\"">"", x_keywords));
                x_keyword_list = x_keyword_list.replace(',', ' ');
                x_meta_keywords = Parser.extractWordsFromSpacedList(x_keyword_list);
            }
            x_body = x_lc_line.indexOf(""<body"");
            if (x_body != -1) break;
        }
        Vector x_vector = new Vector(x_meta_keywords.length);
        for (int i = 0; i < x_meta_keywords.length; i++) x_vector.add(x_meta_keywords[i]);
        return x_vector;
    }
",0
17673488,2,"    public String get(String question) {
        try {
            System.out.println(url + question);
            URL urlonlineserver = new URL(url + question);
            BufferedReader in = new BufferedReader(new InputStreamReader(urlonlineserver.openStream()));
            String inputLine;
            String returnstring = """";
            while ((inputLine = in.readLine()) != null) returnstring += inputLine;
            in.close();
            return returnstring;
        } catch (IOException e) {
            return """";
        }
    }
",0
8537682,2,"    public static String urlPost(Map<String, String> paraMap, String urlStr) throws IOException {
        String strParam = """";
        for (Map.Entry<String, String> entry : paraMap.entrySet()) {
            strParam = strParam + (entry.getKey() + ""="" + entry.getValue()) + ""&"";
        }
        URL url = new URL(urlStr);
        URLConnection connection = url.openConnection();
        connection.setDoOutput(true);
        OutputStreamWriter out = new OutputStreamWriter(connection.getOutputStream(), ""utf-8"");
        out.write(strParam);
        out.flush();
        out.close();
        String sCurrentLine;
        String sTotalString;
        sCurrentLine = """";
        sTotalString = """";
        InputStream l_urlStream;
        l_urlStream = connection.getInputStream();
        BufferedReader l_reader = new BufferedReader(new InputStreamReader(l_urlStream));
        while ((sCurrentLine = l_reader.readLine()) != null) {
            sTotalString += sCurrentLine + ""\r\n"";
        }
        System.out.println(sTotalString);
        return sTotalString;
    }
",0
19693366,2,"    @Override
    public void exec() {
        BufferedReader in = null;
        try {
            URL url = new URL(getUrl());
            in = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer result = new StringBuffer();
            String str;
            while ((str = in.readLine()) != null) {
                result.append(str);
            }
            logger.info(""received message: "" + result);
        } catch (Exception e) {
            logger.error(""HttpGetEvent could not execute"", e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                    logger.error(""BufferedReader could not be closed"", e);
                }
            }
        }
    }
",0
5561642,2,"    protected BufferedReader getDataReader() {
        BufferedReader in = null;
        PrintWriter out = null;
        try {
            String line;
            URL url = new URL(this.catalog.getCatalogURL());
            Debug.output(""Catalog URL:"" + url.toString());
            in = new BufferedReader(new InputStreamReader(url.openStream()));
            File dir = (File) SessionHandler.getServletContext().getAttribute(""javax.servlet.context.tempdir"");
            File temp = new File(dir, TEMP);
            Debug.output(""Temp file:"" + temp.toString());
            out = new PrintWriter(new BufferedWriter(new FileWriter(temp)));
            while ((line = in.readLine()) != null) {
                out.println(line);
            }
            Debug.output(""Temp file size:"" + temp.length());
            return new BufferedReader(new FileReader(temp));
        } catch (IOException e) {
            throw new SeismoException(e);
        } finally {
            Util.close(in);
            Util.close(out);
        }
    }
",0
14936644,2,"    String readArticleFromFile(String urlStr) {
        String docbase = getDocumentBase().toString();
        int pos = docbase.lastIndexOf('/');
        if (pos > -1) {
            docbase = docbase.substring(0, pos + 1);
        } else {
            docbase = """";
        }
        docbase = docbase + urlStr;
        String prog = """";
        try {
            URL url = new URL(docbase);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            if (in != null) {
                while (true) {
                    try {
                        String mark = in.readLine();
                        if (mark == null) break;
                        prog = prog + mark + ""\n"";
                    } catch (Exception e) {
                    }
                }
                in.close();
            }
        } catch (Exception e) {
        }
        return prog;
    }
",0
1115284,2,"    public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        resp.setContentType(""text/html"");
        resp.getWriter().println(""Getting feed..."");
        String googleFeed = ""http://news.google.com/news?ned=us&topic=h&output=rss"";
        String totalFeed = """";
        try {
            URL url = new URL(googleFeed);
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = null;
            while ((line = reader.readLine()) != null) {
                totalFeed += line;
            }
            reader.close();
            parseFeedandPersist(totalFeed, resp);
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
    }
",0
2390396,2,"    @Override
    protected void processImport() throws SudokuInvalidFormatException {
        importFolder(mUri.getLastPathSegment());
        try {
            URL url = new URL(mUri.toString());
            InputStreamReader isr = new InputStreamReader(url.openStream());
            BufferedReader br = null;
            try {
                br = new BufferedReader(isr);
                String s;
                while ((s = br.readLine()) != null) {
                    if (!s.equals("""")) {
                        importGame(s);
                    }
                }
            } finally {
                if (br != null) br.close();
            }
        } catch (MalformedURLException e) {
            throw new RuntimeException(e);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
",0
19347071,2,"    private static List<String> loadServicesImplementations(final Class ofClass) {
        List<String> result = new ArrayList<String>();
        String override = System.getProperty(ofClass.getName());
        if (override != null) {
            result.add(override);
        }
        ClassLoader loader = ServiceLib.class.getClassLoader();
        URL url = loader.getResource(""META-INF/services/"" + ofClass.getName());
        if (url == null) {
            return result;
        }
        InputStream inStream = null;
        InputStreamReader reader = null;
        BufferedReader bReader = null;
        try {
            inStream = url.openStream();
            reader = new InputStreamReader(inStream);
            bReader = new BufferedReader(reader);
            String line;
            while ((line = bReader.readLine()) != null) {
                if (!line.matches(""\\s*(#.*)?"")) {
                    result.add(line.trim());
                }
            }
        } catch (IOException iox) {
            LOG.log(Level.WARNING, ""Could not load services descriptor: "" + url.toString(), iox);
        } finally {
            finalClose(bReader);
            finalClose(reader);
            finalClose(inStream);
        }
        return result;
    }
",0
15660054,2,"    public static List<PluginInfo> getPluginInfos(String urlRepo) throws MalformedURLException, IOException {
        XStream xStream = new XStream();
        xStream.alias(""plugin"", PluginInfo.class);
        xStream.alias(""plugins"", List.class);
        List<PluginInfo> infos = null;
        URL url;
        BufferedReader in = null;
        StringBuilder buffer = new StringBuilder();
        try {
            url = new URL(urlRepo);
            in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                buffer.append(inputLine);
            }
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
            } catch (IOException ex) {
                Logger.getLogger(RemotePluginsManager.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        infos = (List<PluginInfo>) xStream.fromXML(buffer.toString());
        return infos;
    }
",0
807346,2,"    String runScript(String scriptName) {
        String data = """";
        try {
            URL url = new URL(getCodeBase().toString() + scriptName);
            InputStream in = url.openStream();
            BufferedInputStream buffIn = new BufferedInputStream(in);
            do {
                int temp = buffIn.read();
                if (temp == -1) break;
                data = data + (char) temp;
            } while (true);
        } catch (Exception e) {
            data = ""error!"";
        }
        return data;
    }
",0
7614574,2,"    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String zOntoJsonApiUrl = getInitParameter(""zOntoJsonApiServletUrl"");
        URL url = new URL(zOntoJsonApiUrl + ""?"" + req.getQueryString());
        resp.setContentType(""text/html"");
        InputStreamReader bf = new InputStreamReader(url.openStream());
        BufferedReader bbf = new BufferedReader(bf);
        String response = """";
        String line = bbf.readLine();
        PrintWriter out = resp.getWriter();
        while (line != null) {
            response += line;
            line = bbf.readLine();
        }
        out.print(response);
        out.close();
    }
",0
3493863,2,"    @Test
    public void testDocumentDownloadKnowledgeBase() throws IOException {
        if (uploadedKbDocumentID == null) {
            fail(""Document Upload Test should run first"");
        }
        String downloadLink = GoogleDownloadLinkGenerator.generateTextDownloadLink(uploadedKbDocumentID);
        URL url = new URL(downloadLink);
        URLConnection urlConnection = url.openConnection();
        urlConnection.connect();
        InputStream input = url.openStream();
        FileWriter fw = new FileWriter(""tmpOutput.kb"");
        Reader reader = new InputStreamReader(input);
        BufferedReader bufferedReader = new BufferedReader(reader);
        String strLine = """";
        int count = 0;
        while (count < 10000) {
            strLine = bufferedReader.readLine();
            if (strLine != null && strLine != """") {
                fw.write(strLine);
            }
            count++;
        }
    }
",0
20900753,2,"    public boolean isServerAlive(String pStrURL) {
        boolean isAlive;
        long t1 = System.currentTimeMillis();
        try {
            URL url = new URL(pStrURL);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                logger.fine(inputLine);
            }
            logger.info(""**  Connection successful..  **"");
            in.close();
            isAlive = true;
        } catch (Exception e) {
            logger.info(""**  Connection failed..  **"");
            e.printStackTrace();
            isAlive = false;
        }
        long t2 = System.currentTimeMillis();
        logger.info(""Time taken to check connection: "" + (t2 - t1) + "" ms."");
        return isAlive;
    }
",0
7604737,2,"    public String get(String url) {
        String buf = null;
        StringBuilder resultBuffer = new StringBuilder(512);
        if (debug.DEBUG) debug.logger(""gov.llnl.tox.util.href"", ""get(url)>> "" + url);
        try {
            URL theURL = new URL(url);
            URLConnection urlConn = theURL.openConnection();
            urlConn.setDoOutput(true);
            urlConn.setReadTimeout(timeOut);
            BufferedReader urlReader = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
            do {
                buf = urlReader.readLine();
                if (buf != null) {
                    resultBuffer.append(buf);
                    resultBuffer.append(""\n"");
                }
            } while (buf != null);
            urlReader.close();
            if (debug.DEBUG) debug.logger(""gov.llnl.tox.util.href"", ""get(output)>> "" + resultBuffer.toString());
            int xmlNdx = resultBuffer.lastIndexOf(""?>"");
            if (xmlNdx == -1) result = resultBuffer.toString(); else result = resultBuffer.substring(xmlNdx + 2);
        } catch (Exception e) {
            result = debug.logger(""gov.llnl.tox.util.href"", ""error: get >> "", e);
        }
        return (result);
    }
",0
13348537,2,"    private List<String> readLines(String filename) {
        List<String> lines = new ArrayList<String>();
        URL url = Util.getResource(filename);
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
            while (true) {
                String line = br.readLine();
                if (line == null) {
                    break;
                }
                lines.add(line);
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        return lines;
    }
",0
3631989,2,"    public void run() {
        URL url;
        try {
            url = new URL(""http://localhost:8080/glowaxes/dailytrend.jsp"");
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((str = in.readLine()) != null) {
            }
            in.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
    }
",0
21751,2,"    public static void processRequest(byte[] b) throws Exception {
        URL url = new URL(""http://localhost:8080/instantsoap-ws-echotest-1.0/services/instantsoap/applications"");
        URLConnection connection = url.openConnection();
        HttpURLConnection httpConn = (HttpURLConnection) connection;
        httpConn.setRequestProperty(""Content-Length"", String.valueOf(b.length));
        httpConn.setRequestProperty(""Content-Type"", ""text/xml; charset=utf-8"");
        httpConn.setRequestProperty(""SOAPAction"", """");
        httpConn.setRequestMethod(""POST"");
        httpConn.setDoOutput(true);
        httpConn.setDoInput(true);
        OutputStream out = httpConn.getOutputStream();
        out.write(b);
        out.close();
        BufferedReader in = new BufferedReader(new InputStreamReader(httpConn.getInputStream()));
        String inputLine;
        while ((inputLine = in.readLine()) != null) System.out.println(inputLine);
        in.close();
    }
",0
7313198,2,"    public ForDomainparReq(String urlstr, String domain) throws IOException {
        URL url = new URL(urlstr);
        URLConnection conn = url.openConnection();
        conn.setRequestProperty(""domain"", domain);
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream(), ""UTF8""));
            StringBuffer response = new StringBuffer();
            String line = """";
            while ((line = reader.readLine()) != null) {
                response.append(line);
            }
            reader.close();
            jsonContectResult = response.toString();
        } catch (SocketTimeoutException e) {
            log.severe(""SoketTimeout NO!! RC  try again !!"" + e.getMessage());
            jsonContectResult = null;
        } catch (Exception e) {
            log.severe(""Except Rescue Start !! RC try again!! "" + e.getMessage());
            jsonContectResult = null;
        }
    }
",0
2467280,2,"    private static void discoverRegisteryEntries(DataSourceRegistry registry) {
        try {
            Enumeration<URL> urls = DataSetURL.class.getClassLoader().getResources(""META-INF/org.virbo.datasource.DataSourceFactory.extensions"");
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String s = reader.readLine().trim();
                while (s != null) {
                    if (s.length() > 0) {
                        String[] ss = s.split(""\\s"");
                        for (int i = 1; i < ss.length; i++) {
                            registry.registerExtension(ss[0], ss[i], null);
                        }
                    }
                    s = reader.readLine();
                }
                reader.close();
            }
            urls = DataSetURL.class.getClassLoader().getResources(""META-INF/org.virbo.datasource.DataSourceFactory.mimeTypes"");
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String s = reader.readLine().trim();
                while (s != null) {
                    if (s.length() > 0) {
                        String[] ss = s.split(""\\s"");
                        for (int i = 1; i < ss.length; i++) {
                            registry.registerMimeType(ss[0], ss[i]);
                        }
                    }
                    s = reader.readLine();
                }
                reader.close();
            }
            urls = DataSetURL.class.getClassLoader().getResources(""META-INF/org.virbo.datasource.DataSourceFormat.extensions"");
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String s = reader.readLine().trim();
                while (s != null) {
                    if (s.length() > 0) {
                        String[] ss = s.split(""\\s"");
                        for (int i = 1; i < ss.length; i++) {
                            registry.registerFormatter(ss[0], ss[i]);
                        }
                    }
                    s = reader.readLine();
                }
                reader.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",0
12330089,2,"    public static void main(String[] args) throws Exception {
        final URL url = new URL(""http://www.ebi.ac.uk/Tools/webservices/psicquic/registry/registry?action=ACTIVE&format=txt"");
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String str;
        Map<String, String> psiqcuicServices = new HashMap<String, String>();
        while ((str = in.readLine()) != null) {
            final int idx = str.indexOf('=');
            psiqcuicServices.put(str.substring(0, idx), str.substring(idx + 1, str.length()));
        }
        in.close();
        System.out.println(""Found "" + psiqcuicServices.size() + "" active service(s)."");
        for (Object o : psiqcuicServices.keySet()) {
            String serviceName = (String) o;
            String serviceUrl = psiqcuicServices.get(serviceName);
            System.out.println(serviceName + "" -> "" + serviceUrl);
            UniversalPsicquicClient client = new UniversalPsicquicClient(serviceUrl);
            try {
                SearchResult<?> result = client.getByInteractor(""brca2"", 0, 50);
                System.out.println(""Interactions found: "" + result.getTotalCount());
                for (BinaryInteraction binaryInteraction : result.getData()) {
                    String interactorIdA = binaryInteraction.getInteractorA().getIdentifiers().iterator().next().getIdentifier();
                    String interactorIdB = binaryInteraction.getInteractorB().getIdentifiers().iterator().next().getIdentifier();
                    String interactionAc = ""-"";
                    if (!binaryInteraction.getInteractionAcs().isEmpty()) {
                        CrossReference cr = (CrossReference) binaryInteraction.getInteractionAcs().iterator().next();
                        interactionAc = cr.getIdentifier();
                    }
                    System.out.println(""\tInteraction ("" + interactionAc + ""): "" + interactorIdA + "" interacts with "" + interactorIdB);
                }
            } catch (Throwable e) {
                System.err.println(""Service is down! "" + serviceName + ""("" + serviceUrl + "")"");
            }
        }
    }
",0
5609837,2,"    public String postXmlRequest(String url, String data) {
        DefaultHttpClient httpclient = new DefaultHttpClient();
        HttpPost httppost = new HttpPost(url);
        StringBuffer responseStr = new StringBuffer();
        try {
            System.out.println(data);
            Log4j.logger.info(""Request:\n"" + data);
            StringEntity reqEntity = new StringEntity(data, ""UTF-8"");
            reqEntity.setContentType(""text/xml"");
            httppost.setEntity(reqEntity);
            HttpResponse response = httpclient.execute(httppost);
            HttpEntity entity = response.getEntity();
            this.setPostSatus(response.getStatusLine().getStatusCode());
            BufferedReader reader = new BufferedReader(new InputStreamReader(entity.getContent(), ""UTF-8""));
            String line = null;
            while ((line = reader.readLine()) != null) {
                responseStr.append(line + ""\n"");
            }
            if (entity != null) {
                entity.consumeContent();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        System.out.println(responseStr);
        Log4j.logger.info(""Response:\n"" + responseStr);
        return responseStr.toString();
    }
",0
249612,2,"    protected static boolean checkVersion(String address) {
        Scanner scanner = null;
        try {
            URL url = new URL(address);
            InputStream iS = url.openStream();
            scanner = new Scanner(iS);
            if (scanner == null && DEBUG) System.out.println(""SCANNER NULL"");
            String firstLine = scanner.nextLine();
            double latestVersion = Double.valueOf(firstLine.trim());
            double thisVersion = JCards.VERSION;
            if (thisVersion >= latestVersion) {
                JCards.latestVersion = true;
            } else {
                displaySimpleAlert(null, JCards.VERSION_PREFIX + latestVersion + "" is available online!\n"" + ""Look under the file menu for a link to the download site."");
            }
        } catch (Exception e) {
            if (VERBOSE || DEBUG) {
                System.out.println(""Can't decide latest version"");
                e.printStackTrace();
            }
            return false;
        }
        return true;
    }
",0
370458,2,"    public static void copy(URL url, String outPath) throws IOException {
        System.out.println(""copying from: "" + url + "" to "" + outPath);
        InputStream in = url.openStream();
        FileOutputStream fout = new FileOutputStream(outPath);
        byte[] data = new byte[8192];
        int read = -1;
        while ((read = in.read(data)) != -1) {
            fout.write(data, 0, read);
        }
        fout.close();
    }
",0
8565955,2,"    private static String webService(String strUrl) {
        StringBuffer buffer = new StringBuffer();
        try {
            URL url = new URL(strUrl);
            InputStream input = url.openStream();
            String sCurrentLine = """";
            InputStreamReader read = new InputStreamReader(input, ""utf-8"");
            BufferedReader l_reader = new java.io.BufferedReader(read);
            while ((sCurrentLine = l_reader.readLine()) != null) {
                buffer.append(sCurrentLine);
            }
            return buffer.toString();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
",0
3577905,2,"    public static TestResponse post(String urlString, byte[] data, String contentType, String accept) throws IOException {
        HttpURLConnection httpCon = null;
        byte[] result = null;
        byte[] errorResult = null;
        try {
            URL url = new URL(urlString);
            httpCon = (HttpURLConnection) url.openConnection();
            httpCon.setDoOutput(true);
            httpCon.setRequestMethod(""POST"");
            httpCon.setRequestProperty(""Content-Type"", contentType);
            httpCon.setRequestProperty(""Accept"", accept);
            if (data != null) {
                OutputStream output = httpCon.getOutputStream();
                output.write(data);
                output.close();
            }
            BufferedInputStream in = new BufferedInputStream(httpCon.getInputStream());
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            int next = in.read();
            while (next > -1) {
                os.write(next);
                next = in.read();
            }
            os.flush();
            result = os.toByteArray();
            os.close();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            InputStream errorStream = httpCon.getErrorStream();
            if (errorStream != null) {
                BufferedInputStream errorIn = new BufferedInputStream(errorStream);
                ByteArrayOutputStream errorOs = new ByteArrayOutputStream();
                int errorNext = errorIn.read();
                while (errorNext > -1) {
                    errorOs.write(errorNext);
                    errorNext = errorIn.read();
                }
                errorOs.flush();
                errorResult = errorOs.toByteArray();
                errorOs.close();
            }
            return new TestResponse(httpCon.getResponseCode(), errorResult, result);
        }
    }
",0
11073250,2,"    protected void loadText(final Element elem) {
        final String urlAttr = elem.getAttributeValue(""url"");
        if (urlAttr != null) {
            String result = """";
            try {
                final URL url = new URL(DatabaseViewerManager.baseURL, urlAttr);
                final BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String line = reader.readLine();
                while (line != null) {
                    result += line + ""\n"";
                    line = reader.readLine();
                }
                elem.addContent(result);
                elem.removeAttribute(""url"");
            } catch (final Exception e) {
                throw new RuntimeException(""Could not insert text template for database viewer from file"", e);
            }
        }
    }
",0
11193872,2,"    private static <T> Collection<T> loadFromServices(Class<T> interf) throws Exception {
        ClassLoader classLoader = DSServiceLoader.class.getClassLoader();
        Enumeration<URL> e = classLoader.getResources(""META-INF/services/"" + interf.getName());
        Collection<T> services = new ArrayList<T>();
        while (e.hasMoreElements()) {
            URL url = e.nextElement();
            InputStream is = url.openStream();
            try {
                BufferedReader r = new BufferedReader(new InputStreamReader(is, ""UTF-8""));
                while (true) {
                    String line = r.readLine();
                    if (line == null) {
                        break;
                    }
                    int comment = line.indexOf('#');
                    if (comment >= 0) {
                        line = line.substring(0, comment);
                    }
                    String name = line.trim();
                    if (name.length() == 0) {
                        continue;
                    }
                    Class<?> clz = Class.forName(name, true, classLoader);
                    Class<? extends T> impl = clz.asSubclass(interf);
                    Constructor<? extends T> ctor = impl.getConstructor();
                    T svc = ctor.newInstance();
                    services.add(svc);
                }
            } finally {
                is.close();
            }
        }
        return services;
    }
",0
16602362,2,"    public static LinkedList Import(String url) throws Exception {
        LinkedList data = new LinkedList();
        BufferedReader in = new BufferedReader(new InputStreamReader((new URL(url)).openStream()));
        String csvLine;
        while ((csvLine = in.readLine()) != null) {
            StringTokenizer st = new StringTokenizer(csvLine, "","");
            CSVData cd = new CSVData();
            st.nextToken();
            st.nextToken();
            cd.matrNumber = Integer.parseInt(st.nextToken().trim());
            cd.fName = st.nextToken().trim();
            cd.lName = st.nextToken().trim();
            cd.email = st.nextToken().trim();
            cd.stdyPath = st.nextToken().trim();
            cd.sem = Integer.parseInt(st.nextToken().trim());
            data.add(cd);
        }
        in.close();
        return data;
    }
",0
7760030,2,"    private void loadNumberFormats() {
        String fileToLocate = ""/"" + FILENAME_NUMBER_FMT;
        URL url = getClass().getClassLoader().getResource(fileToLocate);
        if (url == null) {
            return;
        }
        List<String> lines;
        try {
            lines = IOUtils.readLines(url.openStream());
        } catch (IOException e) {
            throw new ConfigurationException(""Problem loading file "" + fileToLocate, e);
        }
        for (String line : lines) {
            if (line.startsWith(""#"") || StringUtils.isBlank(line)) {
                continue;
            }
            String[] parts = StringUtils.split(line, ""="");
            addFormat(parts[0], new DecimalFormat(parts[1]));
        }
    }
",0
6541771,2,"    private String sendMail() throws IOException {
        String msg = StringEscapeUtils.escapeHtml(message.getText());
        StringBuffer buf = new StringBuffer();
        buf.append(encode(""n"", name.getText()));
        buf.append(""&"").append(encode(""e"", email.getText()));
        buf.append(""&"").append(encode(""r"", recpt.getText()));
        buf.append(""&"").append(encode(""m"", msg));
        buf.append(""&"").append(encode(""s"", score));
        buf.append(""&"").append(encode(""i"", calcScoreImage()));
        buf.append(""&"").append(encode(""c"", digest(recpt.getText() + ""_"" + score)));
        URL url = new URL(""http://www.enerjy.com/share/mailit.php"");
        URLConnection conn = url.openConnection();
        conn.setDoOutput(true);
        OutputStreamWriter writer = null;
        BufferedReader reader = null;
        boolean haveOk = false;
        try {
            writer = new OutputStreamWriter(conn.getOutputStream());
            writer.write(buf.toString());
            writer.flush();
            reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            for (String line = reader.readLine(); null != line; line = reader.readLine()) {
                if (line.startsWith(""err:"")) {
                    return line.substring(4);
                } else if (line.equals(""ok"")) {
                    haveOk = true;
                }
            }
        } finally {
            StreamUtils.close(writer);
            StreamUtils.close(reader);
        }
        if (!haveOk) {
            return ""The server did not return a response."";
        }
        return null;
    }
",0
17339760,2,"    public static String get_content(String _url) throws Exception {
        URL url = new URL(_url);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String inputLine;
        String content = new String();
        while ((inputLine = in.readLine()) != null) {
            content += inputLine;
        }
        in.close();
        return content;
    }
",0
21808207,2,"    public static void test() {
        addToCounter(""computeracces.html"");
        try {
            JFrame jfr = new JFrame(""Webconnect"");
            URL url = new URL(""http://apps.sourceforge.net/piwik/lyricscatcher/piwik.php?idsite=1"");
            JEditorPane jep = new JEditorPane();
            jfr.add(jep);
            String urlstr = ""http://apps.sourceforge.net/piwik/lyricscatcher/piwik.php?url=http%3a%2f%2flyricscatcher.sourceforge.net%2fpiwik.php&action_name=&idsite=1&res=1440x900&h="";
            Calendar cal = Calendar.getInstance();
            urlstr += cal.get(Calendar.HOUR_OF_DAY);
            urlstr += ""&m="";
            urlstr += cal.get(Calendar.MINUTE);
            urlstr += ""&s="";
            urlstr += cal.get(Calendar.SECOND);
            urlstr += ""&fla=1&dir=1&qt=1&realp=1&pdf=1&wma=1&java=1&cookie=0&title=JAVAACCESS&urlref=http%3a%2f%2flyricscatcher.sourceforge.net%2fcomputeraccespage.html"";
            System.out.println(urlstr);
            URL nurl = new URL(urlstr);
            InputStream ist = nurl.openStream();
            InputStreamReader isr = new InputStreamReader(ist);
            BufferedReader in = new BufferedReader(isr);
            String line = """";
            String inputline = """";
            while ((inputline = in.readLine()) != null) {
                line += inputline + ""\n"";
            }
            System.out.println(""finished: length of correct url="" + line.length());
            URL myurl = new URL(urlstr);
            URLConnection urlc = myurl.openConnection();
            urlc.getContent();
            System.out.println(urlc.getLastModified());
            System.out.println(urlc.getPermission());
            System.out.println(urlc.getRequestProperties());
            System.out.println(urlc.getContentEncoding());
            System.out.println(urlc.getContentLength());
            urlc.connect();
            InputStream dist = myurl.openStream();
            while (ist.available() >= 0) {
                ist.read();
            }
            ist.close();
            Document d = jep.getEditorKitForContentType(""html"").createDefaultDocument();
            d.getDefaultRootElement();
            jep.setContentType(""text/html"");
            jep.setText(""<html><img src=\""http://apps.sourceforge.net/piwik/lyricscatcher/piwik.php?idsite=1\"" alt=\""there's a problem...\""/><img src=\"""" + urlstr + ""\"" alt=\""Another problem\"" style=\""border:0\"" /></html>"");
            jfr.setLocationByPlatform(true);
            jfr.setSize(100, 100);
            jfr.show();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",0
3609806,2,"    private static String getData(String myurl) throws Exception {
        System.out.println(""getdata"");
        URL url = new URL(myurl);
        uc = (HttpURLConnection) url.openConnection();
        br = new BufferedReader(new InputStreamReader(uc.getInputStream()));
        String temp = """", k = """";
        while ((temp = br.readLine()) != null) {
            System.out.println(temp);
            k += temp;
        }
        br.close();
        return k;
    }
",0
4641591,2,"    public static String executePost(String urlStr, Map paramsMap) throws IOException {
        StringBuffer result = new StringBuffer();
        HttpURLConnection connection = null;
        URL url = new URL(urlStr);
        connection = (HttpURLConnection) url.openConnection();
        connection.setDoOutput(true);
        connection.setDoInput(true);
        connection.setRequestMethod(""POST"");
        PrintWriter out = new PrintWriter(connection.getOutputStream());
        Iterator paramKeys = paramsMap.keySet().iterator();
        while (paramKeys.hasNext()) {
            String paramName = (String) paramKeys.next();
            out.print(paramName + ""="" + paramsMap.get(paramName));
            if (paramKeys.hasNext()) {
                out.print('&');
            }
        }
        out.flush();
        BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        String inputLine;
        while ((inputLine = in.readLine()) != null) {
            result.append(inputLine);
        }
        in.close();
        out.close();
        connection.disconnect();
        String msg = result.toString();
        return stripOuterElement(msg);
    }
",0
18284811,2,"    private Map<String, String> readStuff(Iterator<URL> urls) throws IOException {
        Map<String, String> result = new LinkedHashMap();
        while (urls.hasNext()) {
            URL url = urls.next();
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String s = reader.readLine();
            while (s != null) {
                s = s.trim();
                if (s.length() > 0) {
                    String[] ss = s.split(""\\s"");
                    for (int i = 1; i < ss.length; i++) {
                        result.put(ss[i], ss[0]);
                    }
                }
                s = reader.readLine();
            }
            reader.close();
        }
        return result;
    }
",0
8265645,2,"    public static String readURL(String urlStr, boolean debug) {
        if (debug) System.out.print(""    trying: "" + urlStr + ""\n"");
        URL url = null;
        try {
            url = new URL(urlStr);
        } catch (java.net.MalformedURLException e) {
            System.out.print(""test failed: using URL: "");
            System.out.print(e.getMessage());
            System.out.print('\n');
            return null;
        }
        HttpURLConnection huc = null;
        try {
            huc = (HttpURLConnection) url.openConnection();
        } catch (IOException e) {
            System.out.print(""test failed: using URL: "");
            System.out.print(e.getMessage());
            System.out.print('\n');
            return null;
        }
        String contentType = huc.getContentType();
        if (contentType == null || contentType.indexOf(""text/xml"") < 0) {
            System.out.print(""*** Warning ***  Content-Type not set to text/xml"");
            System.out.print('\n');
            System.out.print(""    Content-type: "");
            System.out.print(contentType);
            System.out.print('\n');
        }
        InputStream urlStream = null;
        try {
            urlStream = huc.getInputStream();
        } catch (java.io.IOException e) {
            System.out.print(""test failed: opening URL: "");
            System.out.print(e.getMessage());
            System.out.print('\n');
            return null;
        }
        BufferedReader in = new BufferedReader(new InputStreamReader(urlStream));
        boolean xml = true;
        String href = null, inputLine = null;
        StringBuffer content = new StringBuffer(), stylesheet = null;
        Transformer transformer = null;
        try {
            inputLine = in.readLine();
        } catch (java.io.IOException e) {
            System.out.print(""test failed: reading first line of response: "");
            System.out.print(e.getMessage());
            System.out.print('\n');
            return null;
        }
        if (inputLine == null) {
            System.out.print(""test failed: No input read from URL"");
            System.out.print('\n');
            return null;
        }
        if (!inputLine.startsWith(""<?xml "")) {
            xml = false;
            content.append(inputLine);
        }
        if (xml) {
            int offset = inputLine.indexOf('>');
            if (offset + 2 < inputLine.length()) {
                inputLine = inputLine.substring(offset + 1);
                offset = inputLine.indexOf('<');
                if (offset > 0) inputLine = inputLine.substring(offset);
            } else try {
                inputLine = in.readLine();
            } catch (java.io.IOException e) {
                System.out.print(""test failed: reading response: "");
                System.out.print(e.getMessage());
                System.out.print('\n');
                return null;
            }
            content.append(inputLine);
        }
        try {
            while ((inputLine = in.readLine()) != null) content.append(inputLine);
        } catch (java.io.IOException e) {
            System.out.print(""test failed: reading response: "");
            System.out.print(e.getMessage());
            System.out.print('\n');
            return null;
        }
        String contentStr = content.toString();
        if (transformer != null) {
            StreamSource streamXMLRecord = new StreamSource(new StringReader(contentStr));
            StringWriter xmlRecordWriter = new StringWriter();
            try {
                transformer.transform(streamXMLRecord, new StreamResult(xmlRecordWriter));
                System.out.print(""        successfully applied stylesheet '"");
                System.out.print(href);
                System.out.print(""'"");
                System.out.print('\n');
            } catch (javax.xml.transform.TransformerException e) {
                System.out.print(""unable to apply stylesheet '"");
                System.out.print(href);
                System.out.print(""'to response: "");
                System.out.print(e.getMessage());
                System.out.print('\n');
                e.printStackTrace();
            }
        }
        return contentStr;
    }
",0
8831513,2,"    public String sendMessage(String message, boolean log) {
        StringBuilder ret;
        try {
            URL url = new URL(this.stringURL);
            HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
            urlConnection.setRequestMethod(""POST"");
            urlConnection.setDoOutput(true);
            urlConnection.setDoInput(true);
            urlConnection.setRequestProperty(""User-Agent"", serverName);
            urlConnection.setRequestProperty(""Host"", ip);
            urlConnection.setRequestProperty(""Content-type"", ""text/xml"");
            urlConnection.setRequestProperty(""Content-length"", Integer.toString(message.length()));
            PrintWriter _out = new PrintWriter(urlConnection.getOutputStream());
            if (log) {
                CampaignData.mwlog.infoLog(""Sending Message: "" + MWCyclopsUtils.formatMessage(message));
            } else CampaignData.mwlog.infoLog(""Sending Message: "" + message);
            _out.println(message);
            _out.flush();
            _out.close();
            ret = new StringBuilder();
            if (log) {
                BufferedReader _in = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
                String input;
                while ((input = _in.readLine()) != null) ret.append(input + ""\n"");
                CampaignData.mwlog.infoLog(ret.toString());
                _in.close();
            } else {
                BufferedReader _in = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
                while (_in.readLine() != null) {
                }
                _in.close();
            }
            _out.close();
            urlConnection.disconnect();
            return ret.toString();
        } catch (Exception ex) {
            CampaignData.mwlog.errLog(ex);
        }
        return """";
    }
",0
3169056,2,"    private List<String> getHashesFrom(String webPage) {
        Vector<String> out = new Vector();
        try {
            URL url = new URL(webPage);
            BufferedReader r = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            while ((line = r.readLine()) != null) {
                out.add(line);
            }
        } catch (Exception X) {
            return null;
        }
        return out;
    }
",0
8951478,2,"    private void jbInit() throws Exception {
        getContentPane().setLayout(borderLayout1);
        this.setTitle(""�ϥλ���"");
        jTextPane1.setEditable(false);
        this.getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);
        jScrollPane1.getViewport().add(jTextPane1);
        this.setSize(400, 600);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        URL url = ReadmeFrame.class.getResource(""readme.txt"");
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
        StringBuilder strBuilder = new StringBuilder();
        while (reader.ready()) {
            strBuilder.append(reader.readLine());
            strBuilder.append('\n');
        }
        reader.close();
        jTextPane1.setText(strBuilder.toString());
    }
",0
5037610,2,"    public void actionPerformed(ActionEvent e) {
        Object src = e.getSource();
        if (src == submitButton) {
            SubmissionProfile profile = (SubmissionProfile) destinationCombo.getSelectedItem();
            String uri = profile.endpoint;
            String authPoint = profile.authenticationPoint;
            String user = userIDField.getText();
            String passwd = new String(passwordField.getPassword());
            try {
                URL url = new URL(authPoint + ""?username="" + user + ""&password="" + passwd);
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String line = """";
                String text = """";
                while ((line = reader.readLine()) != null) {
                    text = text + line;
                }
                reader.close();
                submit(uri, user);
                JOptionPane.showMessageDialog(null, ""Submission accepted"", ""Success"", JOptionPane.INFORMATION_MESSAGE);
                this.setVisible(false);
                this.dispose();
            } catch (Exception ex) {
                ex.printStackTrace();
                if (ex instanceof java.io.IOException) {
                    String msg = ex.getMessage();
                    if (msg.indexOf(""HTTP response code: 401"") != -1) JOptionPane.showMessageDialog(null, ""Invalid Username/Password"", ""Invalid Username/Password"", JOptionPane.ERROR_MESSAGE); else if (msg.indexOf(""HTTP response code: 404"") != -1) {
                        try {
                            submit(uri, user);
                            JOptionPane.showMessageDialog(null, ""Submission accepted"", ""Success"", JOptionPane.INFORMATION_MESSAGE);
                        } catch (Exception exc) {
                            exc.printStackTrace();
                        }
                    }
                }
            }
        } else if (src == cancelButton) {
            this.setVisible(false);
            this.dispose();
        }
    }
",0
8005681,2,"    public static String URLtoString(URL url) throws IOException {
        String xml = null;
        if (url != null) {
            URLConnection con = url.openConnection();
            con.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            con.setRequestProperty(""User-agent"", ""Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)"");
            InputStream is = con.getInputStream();
            ByteArrayOutputStream buffer = new ByteArrayOutputStream();
            byte[] bytes = new byte[512];
            for (int i = is.read(bytes, 0, 512); i != -1; i = is.read(bytes, 0, 512)) {
                buffer.write(bytes, 0, i);
            }
            xml = new String(buffer.toByteArray());
            is.close();
            buffer.close();
        }
        return xml;
    }
",0
6830445,2,"    public static void main(String[] args) throws IOException {
        System.out.println(""start"");
        URL url = new URL(""https://spreadsheets.google.com/feeds/list/"" + ""0AnoMCh3_x82sdERLR3FvVDBIWXpjT1JlcENmOFdERVE/"" + ""od7/public/basic"");
        InputStream is = url.openStream();
        BufferedReader br = new BufferedReader(new InputStreamReader(is));
        String line;
        while ((line = br.readLine()) != null) {
            String[] mass = line.split(""<entry>"");
            for (String m : mass) {
                System.out.println(m);
            }
        }
    }
",0
19494842,2,"    private void callService() {
        try {
            URL url = new URL(baseUrl + servicePath + attributes);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            StringBuffer buf = new StringBuffer();
            while ((inputLine = in.readLine()) != null) {
                buf.append(inputLine);
            }
            in.close();
            answer = buf.toString();
        } catch (MalformedURLException e) {
            answer = ""Malformed Url:"" + e.getMessage();
            return;
        } catch (IOException e) {
            answer = ""I/O exception: "" + e.getMessage();
            return;
        }
    }
",0
2221297,2,"    public static String getURLContent(String urlToSearchString) throws IOException {
        URL url = new URL(urlToSearchString);
        URLConnection conn = url.openConnection();
        String encoding = conn.getContentEncoding();
        if (encoding == null) encoding = ""ISO-8859-1"";
        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), encoding));
        StringBuilder sb = new StringBuilder(16384);
        try {
            String line;
            while ((line = br.readLine()) != null) {
                sb.append(line);
                sb.append('\n');
            }
        } finally {
            br.close();
        }
        return sb.toString();
    }
",0
10754938,2,"    public static URL getIconURLForUser(String id) {
        try {
            URL url = new URL(""http://profiles.yahoo.com/"" + id);
            BufferedReader r = new BufferedReader(new InputStreamReader(url.openStream()));
            String input = null;
            while ((input = r.readLine()) != null) {
                if (input.indexOf(""<a href=\"""") < 0) continue;
                if (input.indexOf(""<img src=\"""") < 0) continue;
                if (input.indexOf(""<a href=\"""") > input.indexOf(""<img src=\"""")) continue;
                String href = input.substring(input.indexOf(""<a href=\"""") + 9);
                String src = input.substring(input.indexOf(""<img src=\"""") + 10);
                if (href.indexOf(""\"""") < 0) continue;
                if (src.indexOf(""\"""") < 0) continue;
                href = href.substring(0, href.indexOf(""\""""));
                src = src.substring(0, src.indexOf(""\""""));
                if (href.equals(src)) {
                    return new URL(href);
                }
            }
        } catch (IOException e) {
        }
        URL toReturn = null;
        try {
            toReturn = new URL(""http://us.i1.yimg.com/us.yimg.com/i/ppl/no_photo.gif"");
        } catch (MalformedURLException e) {
            Debug.assrt(false);
        }
        return toReturn;
    }
",0
2465747,2,"    public static String postRequest(String urlString, HashMap data) {
        String returnData = """";
        try {
            URL url = new URL(urlString);
            URLConnection connection = url.openConnection();
            connection.setDoOutput(true);
            connection.setDoInput(true);
            PrintWriter out = new PrintWriter(connection.getOutputStream());
            Object[] keySet = data.keySet().toArray();
            Object[] values = data.values().toArray();
            for (int count = 0; count < keySet.length; count++) {
                out.print(URLEncoder.encode((String) keySet[count]) + ""="" + URLEncoder.encode((String) values[count]));
                if ((count + 1) < keySet.length) out.print(""&"");
            }
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                returnData += inputLine;
            }
            in.close();
        } catch (Exception e) {
            e.printStackTrace();
            returnData = null;
        }
        return (returnData);
    }
",0
3541458,2,"    public static String post(String strUrl, String strPostString) {
        NoMuleRuntime.showDebug(""POST : "" + strUrl + ""("" + strPostString + "")"");
        try {
            URL url = new URL(strUrl);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod(""POST"");
            conn.setDoInput(true);
            conn.setDoOutput(true);
            conn.setUseCaches(true);
            conn.setAllowUserInteraction(true);
            HttpURLConnection.setFollowRedirects(true);
            conn.setInstanceFollowRedirects(true);
            conn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            DataOutputStream out = new DataOutputStream(conn.getOutputStream());
            out.writeBytes(strPostString);
            out.flush();
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String s = """";
            StringBuffer sRet = new StringBuffer();
            while ((s = in.readLine()) != null) {
                sRet.append(s);
            }
            in.close();
            return sRet.toString();
        } catch (MalformedURLException e) {
            NoMuleRuntime.showError(""Internal Error. Malformed URL."");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""Internal I/O Error."");
            e.printStackTrace();
        }
        return """";
    }
",0
7143591,2,"    public void getWebByUrl(String strUrl, String charset, String fileIndex) {
        try {
            System.out.println(""Getting web by url: "" + strUrl);
            addReport(""Getting web by url: "" + strUrl + ""\n"");
            URL url = new URL(strUrl);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            InputStream is = null;
            is = url.openStream();
            String filePath = fPath + ""/web"" + fileIndex + "".htm"";
            PrintWriter pw = null;
            FileOutputStream fos = new FileOutputStream(filePath);
            OutputStreamWriter writer = new OutputStreamWriter(fos);
            pw = new PrintWriter(writer);
            BufferedReader bReader = new BufferedReader(new InputStreamReader(is));
            StringBuffer sb = new StringBuffer();
            String rLine = null;
            String tmp_rLine = null;
            while ((rLine = bReader.readLine()) != null) {
                tmp_rLine = rLine;
                int str_len = tmp_rLine.length();
                if (str_len > 0) {
                    sb.append(""\n"" + tmp_rLine);
                    pw.println(tmp_rLine);
                    pw.flush();
                    if (deepUrls.get(strUrl) < webDepth) getUrlByString(tmp_rLine, strUrl);
                }
                tmp_rLine = null;
            }
            is.close();
            pw.close();
            System.out.println(""Get web successfully! "" + strUrl);
            addReport(""Get web successfully! "" + strUrl + ""\n"");
            addWebSuccessed();
        } catch (Exception e) {
            System.out.println(""Get web failed!       "" + strUrl);
            addReport(""Get web failed!       "" + strUrl + ""\n"");
            addWebFailed();
        }
    }
",0
471591,2,"    private String getFanFouMessage(int pageNo) throws IOException {
        URL url = new URL(""http://api.fanfou.com/statuses/user_timeline.json?page="" + pageNo);
        HttpURLConnection request = (HttpURLConnection) url.openConnection();
        request.setDoOutput(true);
        request.setRequestMethod(""GET"");
        String basicAuth = Base64.encode((getUsername() + "":"" + getPassword()).getBytes());
        request.addRequestProperty(""Authorization"", ""Basic "" + basicAuth);
        System.out.println(""Sending request..."");
        request.connect();
        System.out.println(""Response: "" + request.getResponseCode() + "" "" + request.getResponseMessage());
        BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));
        String b = null;
        StringBuffer sb = new StringBuffer();
        while ((b = reader.readLine()) != null) {
            sb.append(b);
        }
        return sb.toString();
    }
",0
19549577,2,"    protected InputStream callApiPost(String apiUrl, Map<String, List<String>> parameters, int expected) {
        try {
            URL url = new URL(apiUrl);
            HttpURLConnection request = (HttpURLConnection) url.openConnection();
            if (ApplicationConstants.CONNECT_TIMEOUT > -1) {
                request.setConnectTimeout(ApplicationConstants.CONNECT_TIMEOUT);
            }
            if (ApplicationConstants.READ_TIMEOUT > -1) {
                request.setReadTimeout(ApplicationConstants.READ_TIMEOUT);
            }
            for (String headerName : requestHeaders.keySet()) {
                request.setRequestProperty(headerName, requestHeaders.get(headerName));
            }
            request.setRequestMethod(""POST"");
            request.setDoOutput(true);
            PrintStream out = new PrintStream(new BufferedOutputStream(request.getOutputStream()));
            out.print(getParametersString(parameters));
            out.flush();
            out.close();
            request.connect();
            if (request.getResponseCode() != expected) {
                throw new BingMapsException(convertStreamToString(request.getErrorStream()));
            } else {
                return getWrappedInputStream(request.getInputStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding()));
            }
        } catch (IOException e) {
            throw new BingMapsException(e);
        }
    }
",0
2336999,2,"    @Override
    public String baiDuHotNews() {
        HttpClient client = new DefaultHttpClient();
        HttpGet httpGet = new HttpGet(""http://news.baidu.com/z/wise_topic_processor/wise_hotwords_list.php?bd_page_type=1&tn=wapnews_hotwords_list&type=1&index=1&pfr=3-11-bdindex-top-3--"");
        String hostNews = """";
        try {
            HttpResponse response = client.execute(httpGet);
            HttpEntity httpEntity = response.getEntity();
            BufferedReader buffer = new BufferedReader(new InputStreamReader(httpEntity.getContent()));
            String line = """";
            boolean todayNewsExist = false, firstNewExist = false;
            int newsCount = -1;
            while ((line = buffer.readLine()) != null) {
                if (todayNewsExist || line.contains(""<div class=\""news_title\"">"")) todayNewsExist = true; else continue;
                if (firstNewExist || line.contains(""<div class=\""list-item\"">"")) {
                    firstNewExist = true;
                    newsCount++;
                } else continue;
                if (todayNewsExist && firstNewExist && (newsCount == 1)) {
                    Pattern hrefPattern = Pattern.compile(""<a.*>(.+?)</a>.*"");
                    Matcher matcher = hrefPattern.matcher(line);
                    if (matcher.find()) {
                        hostNews = matcher.group(1);
                        break;
                    } else newsCount--;
                }
            }
        } catch (ClientProtocolException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return hostNews;
    }
",0
6614947,2,"    public static String getPageSource(String url) throws ClientProtocolException, IOException {
        HttpClient client = new DefaultHttpClient();
        HttpGet request = new HttpGet(url);
        HttpResponse response = client.execute(request);
        InputStream in = response.getEntity().getContent();
        BufferedReader reader = new BufferedReader(new InputStreamReader(in));
        StringBuilder source = new StringBuilder();
        String line = null;
        while ((line = reader.readLine()) != null) source.append(line);
        in.close();
        return source.toString();
    }
",0
9068428,2,"    public static String getTextFileFromURL(String urlName) {
        try {
            StringBuffer textFile = new StringBuffer("""");
            String line = null;
            URL url = new URL(urlName);
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((line = reader.readLine()) != null) textFile = textFile.append(line + ""\n"");
            reader.close();
            return textFile.toString();
        } catch (Exception e) {
            Debug.signal(Debug.ERROR, null, ""Failed to open "" + urlName + "", exception "" + e);
            return null;
        }
    }
",0
2591064,2,"    public static String sendGetRequest(String endpoint, String requestParameters) {
        if (endpoint == null) return null;
        String result = null;
        if (endpoint.startsWith(""http://"")) {
            try {
                StringBuffer data = new StringBuffer();
                String urlStr = endpoint;
                if (requestParameters != null && requestParameters.length() > 0) {
                    urlStr += ""?"" + requestParameters;
                }
                URL url = new URL(urlStr);
                URLConnection conn = url.openConnection();
                BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                StringBuffer sb = new StringBuffer();
                String line;
                while ((line = rd.readLine()) != null) {
                    sb.append(line);
                }
                rd.close();
                result = sb.toString();
            } catch (Exception e) {
                Logger.getLogger(HTTPClient.class.getClass().getName()).log(Level.FINE, ""Could not connect to URL, is the service online?"");
            }
        }
        return result;
    }
",0
7500669,2,"    public static void main(String[] args) throws Exception {
        if (args.length < 2) {
            System.err.println(""Usage:  java SOAPClient4XG "" + ""http://soapURL soapEnvelopefile.xml"" + "" [SOAPAction]"");
            System.err.println(""SOAPAction is optional."");
            System.exit(1);
        }
        String SOAPUrl = args[0];
        String xmlFile2Send = args[1];
        String SOAPAction = """";
        if (args.length > 2) SOAPAction = args[2];
        URL url = new URL(SOAPUrl);
        URLConnection connection = url.openConnection();
        HttpURLConnection httpConn = (HttpURLConnection) connection;
        FileInputStream fin = new FileInputStream(xmlFile2Send);
        ByteArrayOutputStream bout = new ByteArrayOutputStream();
        copy(fin, bout);
        fin.close();
        byte[] b = bout.toByteArray();
        httpConn.setRequestProperty(""Content-Length"", String.valueOf(b.length));
        httpConn.setRequestProperty(""Content-Type"", ""text/xml; charset=utf-8"");
        httpConn.setRequestProperty(""SOAPAction"", SOAPAction);
        httpConn.setRequestMethod(""POST"");
        httpConn.setDoOutput(true);
        httpConn.setDoInput(true);
        OutputStream out = httpConn.getOutputStream();
        out.write(b);
        out.close();
        InputStreamReader isr = new InputStreamReader(httpConn.getInputStream());
        BufferedReader in = new BufferedReader(isr);
        String inputLine;
        while ((inputLine = in.readLine()) != null) System.out.println(inputLine);
        in.close();
    }
",0
2731569,2,"    @Override
    public byte[] getAvatar() throws IOException {
        HttpUriRequest request;
        try {
            request = new HttpGet(mUrl);
        } catch (IllegalArgumentException e) {
            IOException ioe = new IOException(""Invalid url "" + mUrl);
            ioe.initCause(e);
            throw ioe;
        }
        HttpResponse response = mClient.execute(request);
        HttpEntity entity = response.getEntity();
        InputStream in = entity.getContent();
        ByteArrayOutputStream os = new ByteArrayOutputStream();
        try {
            byte[] data = new byte[1024];
            int nbread;
            while ((nbread = in.read(data)) != -1) {
                os.write(data, 0, nbread);
            }
        } finally {
            in.close();
            os.close();
        }
        return os.toByteArray();
    }
",0
8075978,2,"    public String getDataAsString(String url) throws RuntimeException {
        try {
            String responseBody = """";
            URLConnection urlc;
            if (!url.toUpperCase().startsWith(""HTTP://"") && !url.toUpperCase().startsWith(""HTTPS://"")) {
                urlc = tryOpenConnection(url);
            } else {
                urlc = new URL(url).openConnection();
            }
            urlc.setUseCaches(false);
            urlc.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            urlc.setRequestProperty(""User-Agent"", ""Mozilla/5.0 (X11; U; Linux x86_64; en-GB; rv:1.9.1.9) Gecko/20100414 Iceweasel/3.5.9 (like Firefox/3.5.9)"");
            urlc.setRequestProperty(""Accept-Encoding"", ""gzip"");
            InputStreamReader re = new InputStreamReader(urlc.getInputStream());
            BufferedReader rd = new BufferedReader(re);
            String line = """";
            while ((line = rd.readLine()) != null) {
                responseBody += line;
                responseBody += ""\n"";
                line = null;
            }
            rd.close();
            re.close();
            return responseBody;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
",0
14475614,2,"    @SuppressWarnings(""unchecked"")
    public static <T extends Class> Collection<T> listServices(T serviceType, ClassLoader classLoader) throws IOException, ClassNotFoundException {
        final Collection<T> result = new LinkedHashSet<T>();
        final Enumeration<URL> resouces = classLoader.getResources(""META-INF/services/"" + serviceType.getName());
        while (resouces.hasMoreElements()) {
            final URL url = resouces.nextElement();
            final BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            try {
                String line = reader.readLine();
                while (line != null) {
                    if (line.startsWith(""#"")) {
                    } else if ("""".equals(line.trim())) {
                    } else {
                        final T implClass = (T) Class.forName(line, true, classLoader);
                        if (!serviceType.isAssignableFrom(implClass)) {
                            throw new IllegalStateException(String.format(""%s: class %s does not implement required interfafce %s"", url, implClass, serviceType));
                        }
                        result.add(implClass);
                    }
                    line = reader.readLine();
                }
            } finally {
                reader.close();
            }
        }
        return result;
    }
",0
8342005,2,"    @Override
    protected String doInBackground(String... params) {
        try {
            URL url = new URL(""http://www.foamsnet.com/smsapi/send.php?username="" + username + ""&password="" + password + ""&to="" + to + ""&msg="" + URLEncoder.encode(msg));
            URLConnection urlc = url.openConnection();
            BufferedReader sin = new BufferedReader(new InputStreamReader(urlc.getInputStream()));
            String inputLine = sin.readLine();
            inputLine = inputLine == null ? ""null"" : inputLine;
            sin.close();
            output = inputLine;
            if (logsent) {
                ContentResolver contentResolver = cr;
                ContentValues values = new ContentValues();
                values.put(""address"", ""+91"" + inputLine.split("" "")[3]);
                values.put(""body"", msg);
                contentResolver.insert(Uri.parse(""content://sms/sent""), values);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
",0
14232817,2,"    protected void lookupForParsedElementAnnotations(JClassType t) {
        List<JMethod> methods = getParsableElementMethods(t);
        if (methods != null) {
            for (JMethod method : methods) {
                ParsedElement elementAnnotation = method.getAnnotation(ParsedElement.class);
                if (elementAnnotation.type() == ParsedElement.Types.SYNC) {
                    try {
                        String contents = """";
                        URL url = getClass().getClassLoader().getResource(elementAnnotation.file());
                        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                        String line = null;
                        while ((line = reader.readLine()) != null) {
                            contents += line;
                        }
                        reader.close();
                        ParsedElementDescriptor elementDescriptor = new ParsedElementDescriptor(method.getName(), contents.replaceAll(""\"""", ""'""), elementAnnotation.type());
                        this.parsedElementList.add(elementDescriptor);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                } else {
                    ParsedElementDescriptor elementDescriptor = new ParsedElementDescriptor(method.getName(), elementAnnotation.file(), elementAnnotation.type());
                    this.parsedElementList.add(elementDescriptor);
                }
            }
        }
    }
",0
15796324,2,"    public static List importSymbols(List symbols) throws ImportExportException {
        List quotes = new ArrayList();
        String URLString = constructURL(symbols);
        IDQuoteFilter filter = new YahooIDQuoteFilter();
        PreferencesManager.ProxyPreferences proxyPreferences = PreferencesManager.loadProxySettings();
        try {
            URL url = new URL(URLString);
            InputStreamReader input = new InputStreamReader(url.openStream());
            BufferedReader bufferedInput = new BufferedReader(input);
            String line;
            do {
                line = bufferedInput.readLine();
                if (line != null) {
                    try {
                        IDQuote quote = filter.toIDQuote(line);
                        quote.verify();
                        quotes.add(quote);
                    } catch (QuoteFormatException e) {
                    }
                }
            } while (line != null);
            bufferedInput.close();
        } catch (BindException e) {
            throw new ImportExportException(Locale.getString(""UNABLE_TO_CONNECT_ERROR"", e.getMessage()));
        } catch (ConnectException e) {
            throw new ImportExportException(Locale.getString(""UNABLE_TO_CONNECT_ERROR"", e.getMessage()));
        } catch (UnknownHostException e) {
            throw new ImportExportException(Locale.getString(""UNKNOWN_HOST_ERROR"", e.getMessage()));
        } catch (NoRouteToHostException e) {
            throw new ImportExportException(Locale.getString(""DESTINATION_UNREACHABLE_ERROR"", e.getMessage()));
        } catch (MalformedURLException e) {
            throw new ImportExportException(Locale.getString(""INVALID_PROXY_ERROR"", proxyPreferences.host, proxyPreferences.port));
        } catch (FileNotFoundException e) {
            throw new ImportExportException(Locale.getString(""ERROR_DOWNLOADING_QUOTES""));
        } catch (IOException e) {
            throw new ImportExportException(Locale.getString(""ERROR_DOWNLOADING_QUOTES""));
        }
        return quotes;
    }
",0
7531800,2,"    public List<DemandeChargement> getArtistToLoadFromWiki() throws Exception {
        URL fileURL = new URL(""http://beastchild.free.fr/wiki/doku.php?id=music"");
        URLConnection urlConnection = fileURL.openConnection();
        InputStream httpStream = urlConnection.getInputStream();
        BufferedReader br = new BufferedReader(new InputStreamReader(httpStream, ""ISO-8859-1""));
        String ligne;
        List<DemandeChargement> dem = new ArrayList<DemandeChargement>();
        while ((ligne = br.readLine()) != null) {
            if (ligne.indexOf(""&lt;@@@&gt;"") != -1) {
                String maidS = ligne.substring(ligne.indexOf(""&lt;@@@&gt;"") + 11, ligne.indexOf(""&lt;/@@@&gt;"")).trim();
                try {
                    long maid = Long.parseLong(maidS);
                    log.info(""MAID to load : "" + maid);
                    dem.add(new DemandeChargement(maid));
                } catch (Exception e) {
                    log.error(""Impossible de recuperer le MAID : "" + maidS);
                }
            }
        }
        br.close();
        httpStream.close();
        return dem;
    }
",0
19886663,2,"    public boolean retrieveByPMID(String pmid) {
        try {
            URL url = new URL(baseURL + ""&id="" + pmid.trim());
            BufferedReader xml = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = null;
            StringBuffer title_sb = new StringBuffer();
            while ((line = xml.readLine()) != null) {
                if (line.indexOf(""<ArticleTitle>"") != -1) {
                    title_sb.delete(0, title_sb.length());
                    title_sb.append(line.substring(line.indexOf(""<ArticleTitle>"") + 14, line.length() - 15));
                } else if (line.indexOf(""<AbstractText>"") != -1) {
                    PrintWriter article = new PrintWriter(new FileWriter(new File(outputDir.getPath() + File.separatorChar + pmid + "".txt"")));
                    article.println(title_sb);
                    article.println(line.substring(line.indexOf(""<AbstractText>"") + 14, line.length() - 15));
                    article.close();
                    break;
                }
            }
            xml.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }
",0
7670003,2,"    @Override
    public Object execute(ExecutionEvent event) throws ExecutionException {
        URL url;
        try {
            url = new URL(""platform:/plugin/de.vogella.rcp.plugin.filereader/files/test.txt"");
            InputStream inputStream = url.openConnection().getInputStream();
            BufferedReader in = new BufferedReader(new InputStreamReader(inputStream));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                System.out.println(inputLine);
            }
            in.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }
",0
14194234,2,"    private String File2String(String directory, String filename) {
        String line;
        InputStream in = null;
        try {
            File f = new File(filename);
            System.out.println(""File On:>>>>>>>>>> "" + f.getCanonicalPath());
            in = new FileInputStream(f);
        } catch (FileNotFoundException ex) {
            in = null;
        } catch (IOException ex) {
            in = null;
        }
        try {
            if (in == null) {
                filename = directory + ""/"" + filename;
                java.net.URL urlFile = ClassLoader.getSystemResource(filename);
                if (urlFile == null) {
                    System.out.println(""Integrated Chips list file not found: "" + filename);
                    System.exit(-1);
                }
                in = urlFile.openStream();
            }
            BufferedReader reader = new BufferedReader(new InputStreamReader(in));
            StringBuffer xmlText = new StringBuffer();
            while ((line = reader.readLine()) != null) {
                xmlText.append(line);
            }
            reader.close();
            return xmlText.toString();
        } catch (FileNotFoundException ex) {
            System.out.println(""Integrated Chips list file not found"");
            System.exit(-1);
        } catch (IOException ex) {
            ex.printStackTrace();
            System.exit(-1);
        }
        return null;
    }
",0
7518607,2,"    private ArrayList<String> getFiles(String date) {
        ArrayList<String> files = new ArrayList<String>();
        String info = """";
        try {
            obtainServerFilesView.setLblProcessText(java.util.ResourceBundle.getBundle(""bgpanalyzer/resources/Bundle"").getString(""ObtainServerFilesView.Label.Progress.Obtaining_Data""));
            URL url = new URL(URL_ROUTE_VIEWS + date + ""/"");
            URLConnection conn = url.openConnection();
            conn.setDoOutput(false);
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                if (!line.equals("""")) info += line + ""%"";
            }
            obtainServerFilesView.setLblProcessText(java.util.ResourceBundle.getBundle(""bgpanalyzer/resources/Bundle"").getString(""ObtainServerFilesView.Label.Progress.Processing_Data""));
            info = Patterns.removeTags(info);
            StringTokenizer st = new StringTokenizer(info, ""%"");
            info = """";
            boolean alternador = false;
            int index = 1;
            while (st.hasMoreTokens()) {
                String token = st.nextToken();
                if (!token.trim().equals("""")) {
                    int pos = token.indexOf("".bz2"");
                    if (pos != -1) {
                        token = token.substring(1, pos + 4);
                        files.add(token);
                    }
                }
            }
            rd.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return files;
    }
",0
10140251,2,"    protected String contentString() {
        String result = null;
        URL url;
        String encoding = null;
        try {
            url = url();
            URLConnection connection = url.openConnection();
            connection.setDoInput(true);
            connection.setDoOutput(false);
            connection.setUseCaches(false);
            for (Enumeration e = bindingKeys().objectEnumerator(); e.hasMoreElements(); ) {
                String key = (String) e.nextElement();
                if (key.startsWith(""?"")) {
                    connection.setRequestProperty(key.substring(1), valueForBinding(key).toString());
                }
            }
            if (connection.getContentEncoding() != null) {
                encoding = connection.getContentEncoding();
            }
            if (encoding == null) {
                encoding = (String) valueForBinding(""encoding"");
            }
            if (encoding == null) {
                encoding = ""UTF-8"";
            }
            InputStream stream = connection.getInputStream();
            byte bytes[] = ERXFileUtilities.bytesFromInputStream(stream);
            stream.close();
            result = new String(bytes, encoding);
        } catch (IOException ex) {
            throw NSForwardException._runtimeExceptionForThrowable(ex);
        }
        return result;
    }
",0
18426418,2,"    protected void load() throws IOException {
        for (ClassLoader classLoader : classLoaders) {
            Enumeration<URL> en = classLoader.getResources(""META-INF/services/"" + serviceClass.getName());
            while (en.hasMoreElements()) {
                URL url = en.nextElement();
                InputStream in = url.openStream();
                try {
                    BufferedReader reader = new BufferedReader(new InputStreamReader(in));
                    try {
                        String line = null;
                        while ((line = reader.readLine()) != null) {
                            if (!line.startsWith(""#"")) {
                                line = line.trim();
                                if (line.length() > 0) contributions.add(resolveClass(url, line));
                            }
                        }
                    } finally {
                        reader.close();
                    }
                } finally {
                    in.close();
                }
            }
        }
    }
",0
5435234,2,"    public static String getURLContent(String urlStr) throws MalformedURLException, IOException {
        URL url = new URL(urlStr);
        log.info(""url: "" + url);
        URLConnection conn = url.openConnection();
        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        StringBuffer buf = new StringBuffer();
        String inputLine;
        while ((inputLine = in.readLine()) != null) {
            buf.append(inputLine);
        }
        in.close();
        return buf.toString();
    }
",0
7902692,2,"    @Override
    public MapInfo getMap(int mapId) {
        MapInfo info = mapCache.get(mapId);
        if (info != null && info.getContent() == null) {
            if (info.getInfo().get(""fileName"") == null) {
                if (mapId != lastRequestedMap) {
                    lastRequestedMap = mapId;
                    System.out.println(""MapLoaderClient::getMap:requesting map from server "" + mapId);
                    serverConnection.sendMessage(new MessageFetch(FetchType.map.name(), mapId));
                }
            } else {
                try {
                    System.out.println(""MapLoaderClient::getMap:loading map from file "" + info.getInfo().get(""fileName""));
                    BufferedReader bufferedreader;
                    URL fetchUrl = new URL(localMapContextUrl, info.getInfo().get(""fileName""));
                    URLConnection urlconnection = fetchUrl.openConnection();
                    if (urlconnection.getContentEncoding() != null) {
                        bufferedreader = new BufferedReader(new InputStreamReader(urlconnection.getInputStream(), urlconnection.getContentEncoding()));
                    } else {
                        bufferedreader = new BufferedReader(new InputStreamReader(urlconnection.getInputStream(), ""utf-8""));
                    }
                    String line;
                    StringBuilder mapContent = new StringBuilder();
                    while ((line = bufferedreader.readLine()) != null) {
                        mapContent.append(line);
                        mapContent.append(""\n"");
                    }
                    info.setContent(mapContent.toString());
                    fireMapChanged(info);
                } catch (IOException _ex) {
                    System.err.println(""MapLoaderClient::getMap:: Can't read from "" + info.getInfo().get(""fileName""));
                }
            }
        }
        return info;
    }
",0
15311522,2,"    public String buscaCDE() {
        URL url;
        Properties prop = new CargaProperties().Carga();
        BufferedReader in;
        String inputLine;
        String miLinea = null;
        try {
            url = new URL(prop.getProperty(""CDE""));
            in = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.contains(""lastSuccessfulBuild/artifact/server/plugin/dist/pentaho-cdf-dd-TRUNK"")) {
                    miLinea = inputLine;
                    miLinea = miLinea.substring(miLinea.indexOf(""lastSuccessfulBuild/artifact/server/plugin/dist/pentaho-cdf-dd-TRUNK""));
                    miLinea = miLinea.substring(0, miLinea.indexOf(""\"">""));
                    miLinea = url + miLinea;
                }
            }
        } catch (Throwable t) {
        }
        log.debug(""Detetectado last build CDE: "" + miLinea);
        return miLinea;
    }
",0
10330989,2,"    public DialogueSymbole(final JFrame jframe, final Element el, final String srcAttr) {
        super(jframe, JaxeResourceBundle.getRB().getString(""symbole.Insertion""), true);
        this.jframe = jframe;
        this.el = el;
        final String nomf = el.getAttribute(srcAttr);
        boolean applet = false;
        try {
            final File dossierSymboles = new File(""symboles"");
            if (!dossierSymboles.exists()) {
                JOptionPane.showMessageDialog(jframe, JaxeResourceBundle.getRB().getString(""erreur.SymbolesNonTrouve""), JaxeResourceBundle.getRB().getString(""erreur.Erreur""), JOptionPane.ERROR_MESSAGE);
                return;
            }
            liste = chercherImages(dossierSymboles);
        } catch (AccessControlException ex) {
            applet = true;
            try {
                final URL urlListe = DialogueSymbole.class.getClassLoader().getResource(""symboles/liste.txt"");
                BufferedReader in = new BufferedReader(new InputStreamReader(urlListe.openStream()));
                final ArrayList<File> listeImages = new ArrayList<File>();
                String ligne = null;
                while ((ligne = in.readLine()) != null) {
                    if (!"""".equals(ligne.trim())) listeImages.add(new File(""symboles/"" + ligne.trim()));
                }
                liste = listeImages.toArray(new File[listeImages.size()]);
            } catch (IOException ex2) {
                LOG.error(ex2);
            }
        }
        final JPanel cpane = new JPanel(new BorderLayout());
        setContentPane(cpane);
        final GridLayout grille = new GridLayout((int) Math.ceil(liste.length / 13.0), 13, 10, 10);
        final JPanel spane = new JPanel(grille);
        cpane.add(spane, BorderLayout.CENTER);
        ichoix = 0;
        final MyMouseListener ecouteur = new MyMouseListener();
        labels = new JLabel[liste.length];
        for (int i = 0; i < liste.length; i++) {
            if (nomf != null && !"""".equals(nomf) && nomf.equals(liste[i].getPath())) ichoix = i;
            URL urlIcone;
            try {
                if (applet) {
                    final URL urlListe = DialogueSymbole.class.getClassLoader().getResource(""symboles/liste.txt"");
                    final String baseURL = urlListe.toString().substring(0, urlListe.toString().indexOf(""symboles/liste.txt""));
                    urlIcone = new URL(baseURL + liste[i].getPath());
                } else urlIcone = liste[i].toURL();
            } catch (MalformedURLException ex) {
                LOG.error(ex);
                break;
            }
            final Icon ic = new ImageIcon(urlIcone);
            final JLabel label = new JLabel(ic);
            label.addMouseListener(ecouteur);
            labels[i] = label;
            spane.add(label);
        }
        final JPanel bpane = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        final JButton boutonAnnuler = new JButton(JaxeResourceBundle.getRB().getString(""bouton.Annuler""));
        boutonAnnuler.addActionListener(this);
        boutonAnnuler.setActionCommand(""Annuler"");
        bpane.add(boutonAnnuler);
        final JButton boutonOK = new JButton(JaxeResourceBundle.getRB().getString(""bouton.OK""));
        boutonOK.addActionListener(this);
        boutonOK.setActionCommand(""OK"");
        bpane.add(boutonOK);
        cpane.add(bpane, BorderLayout.SOUTH);
        getRootPane().setDefaultButton(boutonOK);
        choix(ichoix);
        pack();
        if (jframe != null) {
            final Rectangle r = jframe.getBounds();
            setLocation(r.x + r.width / 4, r.y + r.height / 4);
        } else {
            final Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
            setLocation((screen.width - getSize().width) / 3, (screen.height - getSize().height) / 3);
        }
    }
",0
14557732,2,"    public List<Rule> parse(Runestone stone, URL url) throws IOException {
        List<Rule> rules = new ArrayList<Rule>();
        Map<String, String> macros = new HashMap<String, String>();
        BufferedReader bin = null;
        try {
            bin = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = bin.readLine();
            while (line != null) {
                line = line.trim();
                if (line.startsWith(""Macro:"")) {
                    String name = line.substring(6).trim();
                    String value = bin.readLine();
                    if (value != null) {
                        value = value.trim();
                        for (Map.Entry<String, String> macro : macros.entrySet()) {
                            value = value.replace(""("" + macro.getKey() + "")"", macro.getValue());
                        }
                        if (macros.containsKey(name)) System.err.println(""WARNING: macro '"" + name + ""' is being redefined"");
                        macros.put(name, value);
                    }
                }
                if (line.startsWith(""Rule:"")) {
                    String name = line.substring(5).trim();
                    line = bin.readLine();
                    Map<String, Boolean> options = new HashMap<String, Boolean>();
                    String[] requires = new String[0];
                    String[] provides = new String[0];
                    if (line != null && line.startsWith(""Options:"")) {
                        String data[] = line.substring(8).trim().split("","");
                        for (String opt : data) {
                            String[] kvp = opt.split(""="");
                            options.put(kvp[0].trim(), Boolean.valueOf(kvp[1].trim()));
                        }
                        line = bin.readLine();
                    }
                    if (line != null && line.startsWith(""Requires:"")) {
                        requires = line.substring(9).trim().split(""\\s+"");
                        line = bin.readLine();
                    }
                    if (line != null && line.startsWith(""Provides:"")) {
                        provides = line.substring(9).trim().split(""\\s+"");
                        line = bin.readLine();
                    }
                    if (line == null) {
                        throw new RuntimeException(""We've found the end of the file in the middle of a rule, something is really wrong"");
                    }
                    String lhs = """";
                    while (line != null && (!line.trim().equals(""=>"") && !line.startsWith(""Rule:""))) {
                        lhs += line.trim();
                        line = bin.readLine();
                    }
                    for (Map.Entry<String, String> macro : macros.entrySet()) {
                        lhs = lhs.replace(""("" + macro.getKey() + "")"", macro.getValue());
                    }
                    Transition t = null;
                    if (lhs.length() > 0) t = parse(stone, lhs);
                    String rhs = """";
                    if (line != null && !line.startsWith(""Rule:"")) line = bin.readLine();
                    while (line != null && !line.trim().startsWith(""Rule:"")) {
                        rhs += line + ""\n"";
                        line = bin.readLine();
                    }
                    rhs = rhs.trim();
                    Rule rule = null;
                    if (rhs.equals("""")) {
                        rule = new RuleSimpleImpl(name, t, options, name);
                    } else if (rhs.startsWith(""["")) {
                        String type = rhs.substring(1, rhs.length() - 1).trim();
                        if (type.equals("""")) type = name;
                        rule = new RuleSimpleImpl(name, t, options, type);
                    } else if (rhs.startsWith(""{"")) {
                        rhs = rhs.substring(1, rhs.length() - 1);
                        try {
                            rule = compiler.compile(name, options, t, rhs);
                        } catch (Throwable e) {
                            System.out.println(""\nSomething wicked this way comes..."");
                            e.printStackTrace();
                            e.getCause().printStackTrace();
                        }
                    } else {
                        System.err.println(""Unsupported type of RHS for rule '"" + name + ""', rule will not be compiled"");
                    }
                    if (rule != null) {
                        rule.addRequired(requires);
                        rule.addProvided(provides);
                        rules.add(rule);
                    } else {
                        System.err.println(""No idea what happend but the rule instance is null!"");
                    }
                } else if (line.startsWith(""Import:"")) {
                    rules.addAll(parse(stone, new URL(url, line.substring(7).trim())));
                }
                if (line == null || !line.trim().startsWith(""Rule:"")) line = bin.readLine();
            }
        } finally {
            if (bin != null) {
                try {
                    bin.close();
                } catch (IOException e) {
                }
            }
        }
        return rules;
    }
",0
2878646,2,"    @Test
    public void testRoundTrip() {
        try {
            URL url = new URL(""http://localhost:8192/OMFHTTPJMSRoundtripService/"");
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(testMessageHeader + testMessage);
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                logger.debug(""Line: "" + line);
            }
            wr.close();
            rd.close();
        } catch (MalformedURLException e1) {
            e1.printStackTrace();
        } catch (IOException e1) {
            e1.printStackTrace();
        }
        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            logger.error(""InterruptedException caught trying to sleep test: "" + e.getMessage());
        }
        boolean messageReceived = false;
        ArrayList<String> messages = testJMSListener.getReceivedMessages();
        for (Iterator<String> iterator = messages.iterator(); iterator.hasNext(); ) {
            String string = (String) iterator.next();
            logger.debug(""String received: "" + string);
            if (testMessage.equals(string)) messageReceived = true;
        }
        assertTrue(""Message should have been received"", messageReceived);
    }
",0
14038176,2,"    public static String fetchUrl(String urlString) {
        try {
            URL url = new URL(urlString);
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = null;
            StringBuilder builder = new StringBuilder();
            while ((line = reader.readLine()) != null) {
                builder.append(line);
            }
            reader.close();
            return builder.toString();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
        return """";
    }
",0
16339641,2,"    public void init() {
        String inputLine = """";
        String registeredLine = """";
        println(""Insert RSS link:"");
        String urlString = sc.nextLine();
        if (urlString.length() == 0) init();
        println(""Working..."");
        BufferedReader in = null;
        URL url = null;
        try {
            url = new URL(urlString);
            in = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((inputLine = in.readLine()) != null) registeredLine += inputLine;
            in.close();
        } catch (MalformedURLException e2) {
            e2.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        File elenco = new File(""elenco.txt"");
        PrintWriter pout = null;
        try {
            pout = new PrintWriter(elenco);
        } catch (FileNotFoundException e1) {
            e1.printStackTrace();
        }
        Vector<String> vector = new Vector<String>();
        int endIndex = 0;
        int numeroFoto = 0;
        while ((registeredLine = registeredLine.substring(endIndex)).length() > 10) {
            int startIndex = registeredLine.indexOf(""<media:content url='"");
            if (startIndex == -1) break;
            registeredLine = registeredLine.substring(startIndex);
            String address = """";
            startIndex = registeredLine.indexOf(""http://"");
            endIndex = registeredLine.indexOf(""' height"");
            address = registeredLine.substring(startIndex, endIndex);
            println(address);
            pout.println(address);
            vector.add(address);
            numeroFoto++;
        }
        if (pout.checkError()) println(""ERROR"");
        println(""Images number: "" + numeroFoto);
        if (numeroFoto == 0) {
            println(""No photos found, WebAlbum is empty or the RSS link is incorrect."");
            sc.nextLine();
            System.exit(0);
        }
        println(""Start downloading? (y/n)"");
        if (!sc.nextLine().equalsIgnoreCase(""y"")) System.exit(0);
        SimpleDateFormat data = new SimpleDateFormat(""dd-MM-yy_HH.mm"");
        Calendar oggi = Calendar.getInstance();
        String cartella = data.format(oggi.getTime());
        boolean success = new File(cartella).mkdir();
        if (success) println(""Sub-directory created..."");
        println(""downloading...\npress ctrl-C to stop"");
        BufferedInputStream bin = null;
        BufferedOutputStream bout = null;
        URL photoAddr = null;
        int len = 0;
        for (int x = 0; x < vector.size(); x++) {
            println(""file "" + (x + 1) + "" of "" + numeroFoto);
            try {
                photoAddr = new URL(vector.get(x));
                bin = new BufferedInputStream(photoAddr.openStream());
                bout = new BufferedOutputStream(new FileOutputStream(cartella + ""/"" + (x + 1) + "".jpg""));
                while ((len = bin.read()) != -1) bout.write(len);
                bout.flush();
                bout.close();
                bin.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        println(""Done!"");
    }
",0
12082150,2,"    public static Set<Address> getDatosCatastrales(String pURL) {
        Set<Address> result = new HashSet<Address>();
        String iniCuerr = ""<cuerr>"";
        String finCuerr = ""</cuerr>"";
        String iniDesErr = ""<des>"";
        String finDesErr = ""</des>"";
        String iniInm1 = ""<rcdnp>"";
        String finInm1 = ""</rcdnp>"";
        String iniInm2 = ""<bi>"";
        String finInm2 = ""</bi>"";
        String iniPC1 = ""<pc1>"";
        String iniPC2 = ""<pc2>"";
        String finPC1 = ""</pc1>"";
        String finPC2 = ""</pc2>"";
        String iniCar = ""<car>"";
        String finCar = ""</car>"";
        String iniCC1 = ""<cc1>"";
        String finCC1 = ""</cc1>"";
        String iniCC2 = ""<cc2>"";
        String finCC2 = ""</cc2>"";
        String iniLDT = ""<ldt>"";
        String iniBq = ""<bq>"";
        String finBq = ""</bq>"";
        String iniEs = ""<es>"";
        String finEs = ""</es>"";
        String iniPt = ""<pt>"";
        String finPt = ""</pt>"";
        String iniPu = ""<pu>"";
        String finPu = ""</pu>"";
        boolean error = false;
        int ini, fin;
        int postal = 0;
        try {
            URL url = new URL(pURL);
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            while ((str = br.readLine()) != null) {
                if (str.contains(iniCuerr)) {
                    ini = str.indexOf(iniCuerr) + iniCuerr.length();
                    fin = str.indexOf(finCuerr);
                    if (Integer.parseInt(str.substring(ini, fin)) > 0) error = true;
                }
                if (error) {
                    if (str.contains(iniDesErr)) {
                        ini = str.indexOf(iniDesErr) + iniDesErr.length();
                        fin = str.indexOf(finDesErr);
                        throw (new Exception(str.substring(ini, fin)));
                    }
                } else {
                    if (str.contains(iniInm1) || str.contains(iniInm2)) {
                        Address inmueble = new Address();
                        while ((str = br.readLine()) != null && !str.contains(finInm1) && !str.contains(finInm2)) {
                            if (str.contains(iniPC1) && str.contains(finPC1)) {
                                ini = str.indexOf(iniPC1) + iniPC1.length();
                                fin = str.indexOf(finPC1);
                                inmueble.setDescription(str.substring(ini, fin));
                            }
                            if (str.contains(iniPC2) && str.contains(finPC2)) {
                                ini = str.indexOf(iniPC2) + iniPC2.length();
                                fin = str.indexOf(finPC2);
                                inmueble.setDescription(inmueble.getDescription().concat(str.substring(ini, fin)));
                            }
                            if (str.contains(iniLDT) && str.contains(""-"")) {
                                postal = Integer.parseInt(str.substring(str.lastIndexOf(""-"") - 5, str.lastIndexOf(""-"")));
                            }
                            if (str.contains(iniCar) && str.contains(finCar)) {
                                ini = str.indexOf(iniCar) + iniCar.length();
                                fin = str.indexOf(finCar);
                                inmueble.setDescription(inmueble.getDescription().concat(str.substring(ini, fin)));
                            }
                            if (str.contains(iniCC1) && str.contains(finCC1)) {
                                ini = str.indexOf(iniCC1) + iniCC1.length();
                                fin = str.indexOf(finCC1);
                                inmueble.setDescription(inmueble.getDescription().concat(str.substring(ini, fin)));
                            }
                            if (str.contains(iniCC2) && str.contains(finCC2)) {
                                ini = str.indexOf(iniCC2) + iniCC2.length();
                                fin = str.indexOf(finCC2);
                                inmueble.setDescription(inmueble.getDescription().concat(str.substring(ini, fin)));
                            }
                            if (str.contains(iniBq) && str.contains(finBq)) {
                                ini = str.indexOf(iniBq) + iniBq.length();
                                fin = str.indexOf(finBq);
                                inmueble.setBlock(str.substring(ini, fin));
                            }
                            if (str.contains(iniEs) && str.contains(finEs)) {
                                ini = str.indexOf(iniEs) + iniEs.length();
                                fin = str.indexOf(finEs);
                                inmueble.setStairs(str.substring(ini, fin));
                            }
                            if (str.contains(iniPt) && str.contains(finPt)) {
                                ini = str.indexOf(iniPt) + iniPt.length();
                                fin = str.indexOf(finPt);
                                inmueble.setFloor(str.substring(ini, fin));
                            }
                            if (str.contains(iniPu) && str.contains(finPu)) {
                                ini = str.indexOf(iniPu) + iniPu.length();
                                fin = str.indexOf(finPu);
                                inmueble.setDoor(str.substring(ini, fin));
                            }
                        }
                        result.add(inmueble);
                    }
                }
            }
            br.close();
            if (result.size() == 1) {
                Object ad[] = result.toArray();
                Coordinate coord = ConversorCoordenadas.getCoordenadas(((Address) ad[0]).getDescription());
                coord.setPostcode(postal);
                for (Address inm : result) inm.setCoodinate(coord);
            }
        } catch (Exception e) {
            System.err.println(e);
        }
        return result;
    }
",0
19469022,2,"    public List<String> addLine(String username, String URL, int page) {
        List<String> rss = new ArrayList<String>();
        try {
            URL url = new URL(URL + page);
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            System.out.println(reader.readLine());
            while ((line = reader.readLine()) != null) {
                String string = ""<text>"";
                String string1 = ""</text>"";
                if (line.contains(string) && !line.contains(""@"") && !line.contains(""http"")) {
                    String tweet = line.replace(string, """").replace(string1, """").replace(""'"", """").trim();
                    final Tweets tweets = new Tweets(username, tweet, page, false);
                    int save = tweets.save();
                    tweets.setId((long) save);
                    Thread thread = new Thread(new Runnable() {

                        @Override
                        public void run() {
                            Main.addRow(tweets);
                        }
                    });
                    thread.start();
                    System.out.println(tweet);
                }
            }
            reader.close();
        } catch (MalformedURLException e) {
            Log.put(e.toString());
            System.out.println(e.toString());
        } catch (IOException e) {
            Log.put(e.toString());
            System.out.println(e.toString());
        } catch (Exception e) {
            Log.put(e.toString());
            System.out.println(e.toString());
        }
        return rss;
    }
",0
4877333,2,"    private static String getWebPage(String urlString) throws Exception {
        URL url;
        HttpURLConnection conn;
        BufferedReader rd;
        String line;
        StringBuilder result = new StringBuilder();
        try {
            url = new URL(urlString);
            conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod(""GET"");
            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            while ((line = rd.readLine()) != null) {
                result.append(line);
            }
            rd.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return result.toString();
    }
",0
8272803,2,"    public StringBuffer getReturn(String url_address) {
        StringBuffer message = new StringBuffer();
        try {
            URL url = new URL(url_address);
            try {
                HttpURLConnection httpConnection = (HttpURLConnection) url.openConnection();
                httpConnection.connect();
                InputStreamReader insr = new InputStreamReader(httpConnection.getInputStream());
                BufferedReader in = new BufferedReader(insr);
                String temp = in.readLine();
                while (temp != null) {
                    message.append(temp + ""\n"");
                    temp = in.readLine();
                }
                in.close();
            } catch (IOException e) {
                System.out.println(""httpConnecter:Error["" + e + ""]"");
                message.append(""Connect error ["" + url_address + ""]"");
            }
        } catch (MalformedURLException e) {
            message.append(""Connect error ["" + url_address + ""]"");
            System.out.println(""httpConneter:Error["" + e.getMessage() + ""]"");
        } catch (Exception e) {
            message.append(""Connect error ["" + url_address + ""]"");
            System.out.println(""httpConneter:Error["" + e.getMessage() + ""]"");
        }
        return message;
    }
",0
3401153,2,"    private String getHTML(String pageURL, String encoding, String dirPath) throws IOException {
        StringBuilder pageHTML = new StringBuilder();
        HttpURLConnection connection = null;
        try {
            URL url = new URL(pageURL);
            connection = (HttpURLConnection) url.openConnection();
            connection.setRequestProperty(""User-Agent"", ""MSIE 7.0"");
            connection.connect();
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream(), encoding));
            String line = null;
            while ((line = br.readLine()) != null) {
                pageHTML.append(line);
                pageHTML.append(""\r\n"");
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            connection.disconnect();
        }
        if (dirPath != null) {
            File file = new File(dirPath);
            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file));
            bufferedWriter.write(pageHTML.toString());
            bufferedWriter.close();
        }
        return pageHTML.toString();
    }
",0
11188584,2,"    public static void loadPlugins() {
        Logger.trace(""Loading plugins"");
        Enumeration<URL> urls = null;
        try {
            urls = Play.classloader.getResources(""play.plugins"");
        } catch (Exception e) {
        }
        while (urls != null && urls.hasMoreElements()) {
            URL url = urls.nextElement();
            Logger.trace(""Found one plugins descriptor, %s"", url);
            try {
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), ""utf-8""));
                String line = null;
                while ((line = reader.readLine()) != null) {
                    String[] infos = line.split("":"");
                    PlayPlugin plugin = (PlayPlugin) Play.classloader.loadClass(infos[1].trim()).newInstance();
                    Logger.trace(""Loaded plugin %s"", plugin);
                    plugin.index = Integer.parseInt(infos[0]);
                    plugins.add(plugin);
                }
            } catch (Exception ex) {
                Logger.error(ex, ""Cannot load %s"", url);
            }
        }
        Collections.sort(plugins);
        for (PlayPlugin plugin : new ArrayList<PlayPlugin>(plugins)) {
            plugin.onLoad();
        }
    }
",0
7846688,2,"    public void postData(String protocol, String host, String form, String data) throws Exception {
        if ((protocol == null) || (protocol.equals(""""))) {
            protocol = DEFAULT_PROTOCOL;
        }
        if ((host == null) || (host.equals(""""))) {
            host = DEFAULT_HOST;
        }
        if (form == null) {
            form = DEFAULT_FORM;
        }
        if (data == null) {
            throw new IllegalArgumentException(""Invalid data"");
        }
        URL url = new URL(protocol, host, form);
        URLConnection con = url.openConnection();
        con.setDoOutput(true);
        con.setDoInput(true);
        con.setUseCaches(false);
        con.setRequestProperty(""Content-type"", ""application/x-www-form-urlencoded"");
        con.setRequestProperty(""Content-length"", String.valueOf(data.length()));
        PrintStream out = new PrintStream(con.getOutputStream(), true);
        out.print(data);
        out.close();
        BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
        while (in.readLine() != null) {
        }
        in.close();
    }
",0
324677,2,"    public boolean import_pieces(String filename) {
        int pieceId;
        int i;
        int n;
        int[] color;
        boolean byurl = true;
        e2piece temppiece;
        color = new int[4];
        BufferedReader entree;
        try {
            if (byurl == true) {
                URL url = new URL(baseURL, filename);
                InputStream in = url.openStream();
                entree = new BufferedReader(new InputStreamReader(in));
            } else {
                entree = new BufferedReader(new FileReader(filename));
            }
            pieceId = 0;
            while (true) {
                String lineread = entree.readLine();
                if (lineread == null) {
                    break;
                }
                StringTokenizer tok = new StringTokenizer(lineread, "" "");
                n = tok.countTokens();
                if (n == 2) {
                } else {
                    for (i = 0; i < 4; i++) {
                        color[i] = Integer.parseInt(tok.nextToken());
                    }
                    pieceId++;
                    System.out.println(""Read Piece : "" + pieceId + "":"" + color[0] + "" "" + color[1] + "" "" + color[2] + "" "" + color[3]);
                    temppiece = new e2piece(pieceId, color[0] + 1, color[1] + 1, color[2] + 1, color[3] + 1);
                    allpieces.add_piece(temppiece);
                    unplacedpieces.add_piece(temppiece);
                }
            }
            return true;
        } catch (IOException err) {
            return false;
        }
    }
",0
16344667,2,"    public static String getUrl(String urlString) {
        int retries = 0;
        String result = """";
        while (true) {
            try {
                URL url = new URL(urlString);
                BufferedReader rdr = new BufferedReader(new InputStreamReader(url.openStream()));
                String line = rdr.readLine();
                while (line != null) {
                    result += line;
                    line = rdr.readLine();
                }
                return result;
            } catch (IOException ex) {
                if (retries == 5) {
                    logger.debug(""Problem getting url content exhausted"");
                    return result;
                } else {
                    logger.debug(""Problem getting url content retrying..."" + urlString);
                    try {
                        Thread.sleep((int) Math.pow(2.0, retries) * 1000);
                    } catch (InterruptedException e) {
                    }
                    retries++;
                }
            }
        }
    }
",0
8080019,2,"    public static String getInstanceUserdata() throws IOException {
        int retries = 0;
        while (true) {
            try {
                URL url = new URL(""http://169.254.169.254/latest/user-data/"");
                InputStreamReader rdr = new InputStreamReader(url.openStream());
                StringWriter wtr = new StringWriter();
                char[] buf = new char[1024];
                int bytes;
                while ((bytes = rdr.read(buf)) > -1) {
                    if (bytes > 0) {
                        wtr.write(buf, 0, bytes);
                    }
                }
                rdr.close();
                return wtr.toString();
            } catch (IOException ex) {
                if (retries == 5) {
                    logger.debug(""Problem getting user data, retries exhausted..."");
                    return null;
                } else {
                    logger.debug(""Problem getting user data, retrying..."");
                    try {
                        Thread.sleep((int) Math.pow(2.0, retries) * 1000);
                    } catch (InterruptedException e) {
                    }
                    retries++;
                }
            }
        }
    }
",0
6793553,2,"    @SuppressWarnings(""unchecked"")
    public void handle(Map<String, Object> data, String urlPath) {
        try {
            URL url = new URL(urlPath);
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), ""utf-8""));
            String line = null;
            CMGroup currentGroup = null;
            List<CMGroup> groups = (List<CMGroup>) data.get(CMConstants.GROUP);
            List<CMTag> tags = (List<CMTag>) data.get(CMConstants.TAG);
            List<CMTagGroup> tagGroups = (List<CMTagGroup>) data.get(CMConstants.TAG_GROUP);
            while ((line = reader.readLine()) != null) {
                CMGroup group = null;
                try {
                    group = FetchUtil.getCMGroup(line);
                } catch (Exception e) {
                    CMLog.getLogger(this).severe(""getCMGroup error:"" + line);
                }
                if (group != null) {
                    if (currentGroup != null) {
                        groups.add(currentGroup);
                    }
                    currentGroup = group;
                }
                CMTag tag = null;
                try {
                    tag = FetchUtil.getCMTag(line);
                } catch (Exception e) {
                    CMLog.getLogger(this).severe(""getCMTag error:"" + line);
                }
                if (tag != null) {
                    CMTagGroup tagGroup = new CMTagGroup();
                    tagGroup.setGroupName(currentGroup.getName());
                    tagGroup.setTagName(tag.getName());
                    tags.add(tag);
                    tagGroups.add(tagGroup);
                }
            }
            groups.add(currentGroup);
            reader.close();
        } catch (MalformedURLException e) {
            CMLog.getLogger(this).severe(""GTagHandler error:"" + e.getMessage());
            e.printStackTrace();
        } catch (IOException e) {
            CMLog.getLogger(this).severe(""GTagHandler error:"" + e.getMessage());
            e.printStackTrace();
        }
    }
",0
6853666,2,"    public static void sendPostRequest() {
        String data = ""text=Eschirichia coli"";
        try {
            URL url = new URL(""http://taxonfinder.ubio.org/analyze?"");
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter writer = new OutputStreamWriter(conn.getOutputStream());
            writer.write(data);
            writer.flush();
            StringBuffer answer = new StringBuffer();
            BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                answer.append(line);
            }
            writer.close();
            reader.close();
            System.out.println(answer.toString());
        } catch (MalformedURLException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
",0
17147420,2,"    public final String latestVersion() {
        String latestVersion = """";
        try {
            URL url = new URL(Constants.officialSite + "":80/LatestVersion"");
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            while ((str = in.readLine()) != null) {
                latestVersion = str;
            }
            in.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
        return latestVersion;
    }
",0
7320804,2,"    protected String getRequestContent(String urlText, String method) throws Exception {
        URL url = new URL(urlText);
        HttpURLConnection urlcon = (HttpURLConnection) url.openConnection();
        urlcon.setRequestProperty(""Referer"", REFERER_STR);
        urlcon.setRequestMethod(method);
        urlcon.setUseCaches(false);
        urlcon.connect();
        BufferedReader reader = new BufferedReader(new InputStreamReader(urlcon.getInputStream()));
        String line = reader.readLine();
        reader.close();
        urlcon.disconnect();
        return line;
    }
",0
7135601,2,"    public static String upload(File tmpFile, URL url) throws IOException {
        StringBuffer reply = new StringBuffer();
        URLConnection uc = url.openConnection();
        ClientHttpRequest request = new ClientHttpRequest(uc);
        String file = ""file"";
        String filename = tmpFile.getName();
        InputStream fileinput = new FileInputStream(tmpFile);
        request.setParameter(file, filename, fileinput);
        InputStream serverInput = request.post();
        BufferedReader in = new BufferedReader(new InputStreamReader(serverInput));
        String line = in.readLine();
        while (line != null) {
            reply.append(line + ""\n"");
            line = in.readLine();
        }
        in.close();
        return reply.toString();
    }
",0
12082140,2,"    public static Set<Street> getVias(String pURL) {
        Set<Street> result = new HashSet<Street>();
        String iniCuerr = ""<cuerr>"";
        String finCuerr = ""</cuerr>"";
        String iniDesErr = ""<des>"";
        String finDesErr = ""</des>"";
        String iniVia = ""<calle>"";
        String finVia = ""</calle>"";
        String iniCodVia = ""<cv>"";
        String finCodVia = ""</cv>"";
        String iniTipoVia = ""<tv>"";
        String finTipoVia = ""</tv>"";
        String iniNomVia = ""<nv>"";
        String finNomVia = ""</nv>"";
        boolean error = false;
        int ini, fin;
        try {
            URL url = new URL(pURL);
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            Street via;
            while ((str = br.readLine()) != null) {
                if (str.contains(iniCuerr)) {
                    ini = str.indexOf(iniCuerr) + iniCuerr.length();
                    fin = str.indexOf(finCuerr);
                    if (Integer.parseInt(str.substring(ini, fin)) > 0) error = true;
                }
                if (error) {
                    if (str.contains(iniDesErr)) {
                        ini = str.indexOf(iniDesErr) + iniDesErr.length();
                        fin = str.indexOf(finDesErr);
                        throw (new Exception(str.substring(ini, fin)));
                    }
                } else {
                    if (str.contains(iniVia)) {
                        via = new Street();
                        while ((str = br.readLine()) != null && !str.contains(finVia)) {
                            if (str.contains(iniCodVia)) {
                                ini = str.indexOf(iniCodVia) + iniCodVia.length();
                                fin = str.indexOf(finCodVia);
                                via.setCodeStreet(Integer.parseInt(str.substring(ini, fin)));
                            }
                            if (str.contains(iniTipoVia)) {
                                TypeStreet tipo = new TypeStreet();
                                if (!str.contains(finTipoVia)) tipo.setCodetpStreet(""""); else {
                                    ini = str.indexOf(iniTipoVia) + iniTipoVia.length();
                                    fin = str.indexOf(finTipoVia);
                                    tipo.setCodetpStreet(str.substring(ini, fin));
                                }
                                tipo.setDescription(getDescripcionTipoVia(tipo.getCodetpStreet()));
                                via.setTypeStreet(tipo);
                            }
                            if (str.contains(iniNomVia)) {
                                ini = str.indexOf(iniNomVia) + iniNomVia.length();
                                fin = str.indexOf(finNomVia);
                                via.setStreetName(str.substring(ini, fin).trim());
                            }
                        }
                        result.add(via);
                    }
                }
            }
            br.close();
        } catch (Exception e) {
            System.err.println(e);
        }
        return result;
    }
",0
2614788,2,"    public String parse() {
        try {
            URL url = new URL(mUrl);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod(""GET"");
            connection.setDoOutput(true);
            connection.connect();
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String line;
            boolean flag1 = false;
            while ((line = reader.readLine()) != null) {
                line = line.trim();
                if (!flag1 && line.contains(""</center>"")) flag1 = true;
                if (flag1 && line.contains(""<br><center>"")) break;
                if (flag1) {
                    mText.append(line);
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return mText.toString();
    }
",0
6881934,2,"    public static String sendSoapMsg(String SOAPUrl, byte[] b, String SOAPAction) throws IOException {
        log.finest(""HTTP REQUEST SIZE "" + b.length);
        if (SOAPAction.startsWith(""\"""") == false) SOAPAction = ""\"""" + SOAPAction + ""\"""";
        URL url = new URL(SOAPUrl);
        HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();
        httpConn.setRequestProperty(""SOAPAction"", SOAPAction);
        httpConn.setRequestProperty(""Content-Type"", ""text/xml; charset=\""utf-8\"""");
        httpConn.setRequestProperty(""Content-Length"", String.valueOf(b.length));
        httpConn.setRequestProperty(""Cache-Control"", ""no-cache"");
        httpConn.setRequestProperty(""Pragma"", ""no-cache"");
        httpConn.setRequestMethod(""POST"");
        httpConn.setDoOutput(true);
        httpConn.setDoInput(true);
        OutputStream out = httpConn.getOutputStream();
        out.write(b);
        out.close();
        InputStreamReader isr = new InputStreamReader(httpConn.getInputStream());
        BufferedReader in = new BufferedReader(isr);
        StringBuffer response = new StringBuffer(1024);
        String inputLine;
        while ((inputLine = in.readLine()) != null) response.append(inputLine);
        in.close();
        log.finest(""HTTP RESPONSE SIZE: "" + response.length());
        return response.toString();
    }
",0
19321031,2,"    public static ArrayList<String> remoteCall(Map<String, String> dataDict) {
        ArrayList<String> result = new ArrayList<String>();
        String encodedData = """";
        for (String key : dataDict.keySet()) {
            String encodedSegment = """";
            String value = dataDict.get(key);
            if (value == null) continue;
            try {
                encodedSegment = key + ""="" + URLEncoder.encode(value, ""UTF-8"");
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            }
            if (encodedData.length() > 0) {
                encodedData += ""&"";
            }
            encodedData += encodedSegment;
        }
        try {
            URL url = new URL(baseURL + encodedData);
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                result.add(line);
                System.out.println(""GOT: "" + line);
            }
            reader.close();
            result.remove(0);
            if (result.size() != 0) {
                if (!result.get(result.size() - 1).equals(""DONE"")) {
                    result.clear();
                } else {
                    result.remove(result.size() - 1);
                }
            }
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
        return result;
    }
",0
5203784,2,"    private String urlConnectionTranslate(String word) {
        try {
            URL url = new URL(""http://ajax.googleapis.com/ajax/services/"" + ""language/translate?v=1.0&q="" + word + ""&langpair=is%7Cen"");
            URLConnection connection = url.openConnection();
            connection.addRequestProperty(""Referer"", ""http://www.hi.is"");
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuilder builder = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                builder.append(line);
            }
            JSONObject json = new JSONObject(builder.toString());
            return json.getJSONObject(""responseData"").getString(""translatedText"");
        } catch (Exception e) {
            Log.e(TranslatorApplication.tag, e.toString());
        }
        return null;
    }
",0
7898667,2,"    public LogoutHandler(String username, String token) {
        try {
            URL url = new URL(""http://eiffel.itba.edu.ar/hci/service/Security.groovy?method=LogOut&username="" + username + ""&authentication_token="" + token);
            URLConnection urlc = url.openConnection();
            urlc.setDoOutput(false);
            urlc.setAllowUserInteraction(false);
            BufferedReader br = new BufferedReader(new InputStreamReader(urlc.getInputStream()));
            String str;
            StringBuffer sb = new StringBuffer();
            while ((str = br.readLine()) != null) {
                sb.append(str);
                sb.append(""\n"");
            }
            br.close();
            String response = sb.toString();
            if (response == null) {
                return;
            }
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            DocumentBuilder db = dbf.newDocumentBuilder();
            InputSource is = new InputSource();
            is.setCharacterStream(new StringReader(response));
            Document dom = db.parse(is);
            NodeList nl = dom.getElementsByTagName(""response"");
            String status = ((Element) nl.item(0)).getAttributes().item(0).getTextContent();
            if (status.toString().equals(""fail"")) {
                return;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",0
15512556,2,"    private String load(URL url) {
        BufferedReader r = null;
        try {
            r = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer buf = new StringBuffer();
            while (r.ready()) {
                buf.append(r.readLine()).append('\n');
            }
            r.close();
            return buf.toString();
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }
",0
21511914,2,"    public static synchronized String getPageContent(String pageUrl) {
        URL url = null;
        InputStreamReader inputStreamReader = null;
        BufferedReader bufferedReader = null;
        String line = null;
        StringBuilder page = null;
        if (pageUrl == null || pageUrl.trim().length() == 0) {
            return null;
        } else {
            try {
                url = new URL(pageUrl);
                inputStreamReader = new InputStreamReader(url.openStream());
                bufferedReader = new BufferedReader(inputStreamReader);
                page = new StringBuilder();
                while ((line = bufferedReader.readLine()) != null) {
                    page.append(line);
                    page.append(""\n"");
                }
            } catch (IOException e) {
                logger.error(""IOException"", e);
            } catch (Exception e) {
                logger.error(""Exception"", e);
            } finally {
                try {
                    if (bufferedReader != null) {
                        bufferedReader.close();
                    }
                    if (inputStreamReader != null) {
                        inputStreamReader.close();
                    }
                } catch (IOException e) {
                    logger.error(""IOException"", e);
                } catch (Exception e) {
                    logger.error(""Exception"", e);
                }
            }
        }
        if (page == null) {
            return null;
        } else {
            return page.toString();
        }
    }
",0
299251,2,"    public ArrayList<String> getData() {
        ArrayList<String> data = new ArrayList<String>();
        String line = null;
        URL address = null;
        try {
            address = new URL(url);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
        URLConnection urlconn = null;
        if (useProxy) {
            SocketAddress addr = new InetSocketAddress(ip, Integer.parseInt(port));
            java.net.Proxy httpProxy = new java.net.Proxy(java.net.Proxy.Type.HTTP, addr);
            try {
                urlconn = address.openConnection(httpProxy);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            try {
                urlconn = address.openConnection();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        try {
            urlconn.connect();
        } catch (IOException e) {
            return null;
        }
        BufferedReader buffreader = null;
        try {
            buffreader = new BufferedReader(new InputStreamReader(urlconn.getInputStream()));
        } catch (IOException e1) {
            e1.printStackTrace();
        }
        try {
            line = buffreader.readLine();
        } catch (IOException e) {
            e.printStackTrace();
        }
        while (line != null) {
            data.add(line);
            try {
                line = buffreader.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return data;
    }
",0
17268049,2,"    public DProblem loadProblem(String urlString) throws DataStoreException {
        try {
            URL url = new URL(urlString);
            IWPLog.info(this, ""[DProblemManager_HTTP] URL :"" + urlString);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer data = new StringBuffer();
            String line;
            int i = 0;
            while ((line = in.readLine()) != null) {
                data.append(line + ""\n"");
                i++;
            }
            DProblem prob = DProblemXMLParser.load(data.toString());
            if (prob != null) {
                prob.setUsername(""Local"");
                prob.setFilename(urlString);
                prob.setAccessMode(DProblemManager.HTTP);
            }
            return prob;
        } catch (MalformedURLException e) {
            throw new DataStoreException(e);
        } catch (IOException e) {
            IWPLog.info(this, ""[DProblemManager_HTTP.loadProblem] unable to load: "" + urlString + "": "" + e.getMessage());
            e.printStackTrace();
            throw new DataStoreException(e);
        } catch (XMLParserException e) {
            throw new DataStoreException(e);
        }
    }
",0
7119080,2,"    public void testRegister() throws IOException {
        User newUser = new User(false, ""testregUser"", ""regUser"");
        newUser.setEmail(""eagle-r@gmx.de"");
        newUser.setUniversity(""uni"");
        newUser.setFirstName(""first"");
        newUser.setLastName(""last"");
        User regUser = null;
        try {
            regUser = (User) getJdbcTemplate().queryForObject(""select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?"", new Object[] { newUser.getUsername() }, new UserMapper());
        } catch (EmptyResultDataAccessException e) {
        }
        assertNull(""This test user already exists! Abort test"", regUser);
        userServiceRemote.registrate(newUser);
        setComplete();
        endTransaction();
        regUser = (User) getJdbcTemplate().queryForObject(""select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?"", new Object[] { newUser.getUsername() }, new UserMapper());
        assertNotNull(regUser);
        assertNotNull(regUser.getId());
        assertNotNull(regUser.getHash());
        assertFalse(regUser.getHash().isEmpty());
        assertEquals(regUser.getLogin(), newUser.getLogin());
        assertEquals(regUser.getPassword(), newUser.getPassword());
        assertEquals(regUser.getUniversity(), newUser.getUniversity());
        assertEquals(regUser.getEmail(), newUser.getEmail());
        Integer id = newUser.getId();
        getJdbcTemplate().execute(""DELETE FROM USER_AUTHORITIES WHERE USER_ID ="" + id);
        getJdbcTemplate().execute(""DELETE FROM USER WHERE ID = "" + id);
        StringBuilder urlString = new StringBuilder(userService.getForumUrl());
        urlString.append(""phpBB.php?action=remove"").append(""&id="").append(newUser.getForumID()).append(""&mode=remove"");
        logger.debug(""Connecting to URL: "" + urlString.toString());
        URL url = new URL(urlString.toString());
        URLConnection con = url.openConnection();
        BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
        String inputLine;
        while ((inputLine = in.readLine()) != null) logger.debug(""Response: "" + inputLine);
        in.close();
    }
",0
7655020,2,"    public String download(String urlStr) {
        StringBuffer sb = new StringBuffer();
        String line = null;
        BufferedReader buffer = null;
        try {
            url = new URL(urlStr);
            HttpURLConnection urlConn = (HttpURLConnection) url.openConnection();
            buffer = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
            System.out.println(buffer);
            while ((line = buffer.readLine()) != null) {
                sb.append(line);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                buffer.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return sb.toString();
    }
",0
3945057,2,"    private boolean streamDownload(URL url, File file) {
        try {
            InputStream in = url.openConnection().getInputStream();
            BufferedInputStream bis = new BufferedInputStream(in);
            OutputStream out = new FileOutputStream(file);
            BufferedOutputStream bos = new BufferedOutputStream(out);
            int chunkSize = 63 * 1024;
            byte[] ba = new byte[chunkSize];
            while (true) {
                int bytesRead = readBlocking(bis, ba, 0, chunkSize);
                if (bytesRead > 0) {
                    if (bos != null) bos.write(ba, 0, bytesRead);
                } else {
                    bos.close();
                    break;
                }
            }
        } catch (IOException e) {
            System.out.println(""Error writing file "" + file);
            return false;
        }
        System.out.println(""OK writing file "" + file);
        return true;
    }
",0
13600574,2,"    public String getWeather(String cityName, String fileAddr) {
        try {
            URL url = new URL(""http://www.google.com/ig/api?hl=zh_cn&weather="" + cityName);
            InputStream inputstream = url.openStream();
            String s, str;
            BufferedReader in = new BufferedReader(new InputStreamReader(inputstream));
            StringBuffer stringbuffer = new StringBuffer();
            Writer out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileAddr), ""utf-8""));
            while ((s = in.readLine()) != null) {
                stringbuffer.append(s);
            }
            str = new String(stringbuffer);
            out.write(str);
            out.close();
            in.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        File file = new File(fileAddr);
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        String str = null;
        try {
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document doc = builder.parse(file);
            NodeList nodelist1 = (NodeList) doc.getElementsByTagName(""forecast_conditions"");
            NodeList nodelist2 = nodelist1.item(0).getChildNodes();
            str = nodelist2.item(4).getAttributes().item(0).getNodeValue() + "",temperature:"" + nodelist2.item(1).getAttributes().item(0).getNodeValue() + ""℃-"" + nodelist2.item(2).getAttributes().item(0).getNodeValue() + ""℃"";
        } catch (Exception e) {
            e.printStackTrace();
        }
        return str;
    }
",0
1812522,2,"    public void readPage(String search) {
        InputStream is = null;
        try {
            URL url = new URL(""http://www.english-german-dictionary.com/index.php?search="" + search.trim());
            is = url.openStream();
            InputStreamReader isr = new InputStreamReader(is, ""ISO-8859-15"");
            Scanner scan = new Scanner(isr);
            String str = new String();
            String translate = new String();
            String temp;
            while (scan.hasNextLine()) {
                temp = (scan.nextLine());
                if (temp.contains(""<td style='padding-top:4px;' class='ergebnisse_res'>"")) {
                    int anfang = temp.indexOf(""-->"") + 3;
                    temp = temp.substring(anfang);
                    temp = temp.substring(0, temp.indexOf(""<!--""));
                    translate = temp.trim();
                } else if (temp.contains(""<td style='' class='ergebnisse_art'>"") || temp.contains(""<td style='' class='ergebnisse_art_dif'>"") || temp.contains(""<td style='padding-top:4px;' class='ergebnisse_art'>"")) {
                    if (searchEnglish == false && searchGerman == false) {
                        searchEnglish = temp.contains(""<td style='' class='ergebnisse_art'>"");
                        searchGerman = temp.contains(""<td style='' class='ergebnisse_art_dif'>"");
                    }
                    int anfang1 = temp.lastIndexOf(""'>"") + 2;
                    temp = temp.substring(anfang1, temp.lastIndexOf(""</td>""));
                    String to = temp.trim() + "" "";
                    temp = scan.nextLine();
                    int anfang2 = temp.lastIndexOf(""\"">"") + 2;
                    temp = (to != null ? to : """") + temp.substring(anfang2, temp.lastIndexOf(""</a>""));
                    str += translate + "" - "" + temp + ""\n"";
                    germanList.add(translate);
                    englishList.add(temp.trim());
                }
            }
            if (searchEnglish) {
                List<String> temp2 = englishList;
                englishList = germanList;
                germanList = temp2;
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (is != null) try {
                is.close();
            } catch (IOException e) {
            }
        }
    }
",0
8204996,2,"    public List<Template> getTemplatesByKeywordsAndPage(String keywords, int page) {
        String newKeywords = keywords;
        if (keywords == null || keywords.trim().length() == 0) {
            newKeywords = TemplateService.NO_KEYWORDS;
        }
        List<Template> templates = new ArrayList<Template>();
        String restURL = configuration.getBeehiveRESTRootUrl() + ""templates/keywords/"" + newKeywords + ""/page/"" + page;
        HttpGet httpGet = new HttpGet(restURL);
        httpGet.setHeader(""Accept"", ""application/json"");
        this.addAuthentication(httpGet);
        HttpClient httpClient = new DefaultHttpClient();
        try {
            HttpResponse response = httpClient.execute(httpGet);
            if (response.getStatusLine().getStatusCode() != HttpServletResponse.SC_OK) {
                if (response.getStatusLine().getStatusCode() == HttpServletResponse.SC_UNAUTHORIZED) {
                    throw new NotAuthenticatedException(""User "" + userService.getCurrentUser().getUsername() + "" not authenticated! "");
                }
                throw new BeehiveNotAvailableException(""Beehive is not available right now! "");
            }
            InputStreamReader reader = new InputStreamReader(response.getEntity().getContent());
            BufferedReader buffReader = new BufferedReader(reader);
            StringBuilder sb = new StringBuilder();
            String line = """";
            while ((line = buffReader.readLine()) != null) {
                sb.append(line);
                sb.append(""\n"");
            }
            String result = sb.toString();
            TemplateList templateList = buildTemplateListFromJson(result);
            List<TemplateDTO> dtoes = templateList.getTemplates();
            for (TemplateDTO dto : dtoes) {
                templates.add(dto.toTemplate());
            }
        } catch (IOException e) {
            throw new BeehiveNotAvailableException(""Failed to get template list, The beehive is not available right now "", e);
        }
        return templates;
    }
",0
14633134,2,"    public static String getRandomUserAgent() {
        if (USER_AGENT_CACHE == null) {
            Collection<String> userAgentsCache = new ArrayList<String>();
            try {
                URL url = Tools.getResource(UserAgent.class.getClassLoader(), ""user-agents-browser.txt"");
                BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
                String str;
                while ((str = in.readLine()) != null) {
                    userAgentsCache.add(str);
                }
                in.close();
                USER_AGENT_CACHE = userAgentsCache.toArray(new String[userAgentsCache.size()]);
            } catch (Exception e) {
                System.err.println(""Can not read file; using default user-agent; error message: "" + e.getMessage());
                return DEFAULT_USER_AGENT;
            }
        }
        return USER_AGENT_CACHE[new Random().nextInt(USER_AGENT_CACHE.length)];
    }
",0
12138255,2,"    public static void loadPoFile(URL url) {
        states state = states.IDLE;
        String msgCtxt = """";
        String msgId = """";
        String msgStr = """";
        try {
            if (url == null) return;
            InputStream in = url.openStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(in, ""UTF8""));
            String strLine;
            while ((strLine = br.readLine()) != null) {
                if (strLine.startsWith(""msgctxt"")) {
                    if (state != states.MSGCTXT) msgCtxt = """";
                    state = states.MSGCTXT;
                    strLine = strLine.substring(7).trim();
                }
                if (strLine.startsWith(""msgid"")) {
                    if (state != states.MSGID) msgId = """";
                    state = states.MSGID;
                    strLine = strLine.substring(5).trim();
                }
                if (strLine.startsWith(""msgstr"")) {
                    if (state != states.MSGSTR) msgStr = """";
                    state = states.MSGSTR;
                    strLine = strLine.substring(6).trim();
                }
                if (!strLine.startsWith(""\"""")) {
                    state = states.IDLE;
                    msgCtxt = """";
                    msgId = """";
                    msgStr = """";
                } else {
                    if (state == states.MSGCTXT) {
                        msgCtxt += format(strLine);
                    }
                    if (state == states.MSGID) {
                        if (msgId.isEmpty()) {
                            if (!msgCtxt.isEmpty()) {
                                msgId = msgCtxt + ""|"";
                                msgCtxt = """";
                            }
                        }
                        msgId += format(strLine);
                    }
                    if (state == states.MSGSTR) {
                        msgCtxt = """";
                        msgStr += format(strLine);
                        if (!msgId.isEmpty()) messages.setProperty(msgId, msgStr);
                    }
                }
            }
            in.close();
        } catch (IOException e) {
            Logger.logError(e, ""Error loading message.po."");
        }
    }
",0
5813085,2,"    public void testBasic() {
        CameraInfo ci = C328rCameraInfo.getInstance();
        assertNotNull(ci);
        assertNotNull(ci.getCapabilities());
        assertFalse(ci.getCapabilities().isEmpty());
        System.out.println(ci.getUrl());
        URL url = ci.getUrl();
        try {
            URLConnection conn = url.openConnection();
            conn.connect();
            InputStream is = conn.getInputStream();
            InputStreamReader isr = new InputStreamReader(is);
            BufferedReader br = new BufferedReader(isr);
            String line = null;
            while ((line = br.readLine()) != null) {
                System.out.println(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",0
678400,2,"    public void go() {
        DataOutputStream outStream = null;
        try {
            connection = (HttpURLConnection) url.openConnection();
            connection.setDoOutput(true);
            connection.setDoInput(true);
            connection.setRequestMethod(""POST"");
            connection.setRequestProperty(""Content-Length"", new Integer(sendData.length()).toString());
            connection.setRequestProperty(""Content-type"", ""text/html"");
            connection.setRequestProperty(""User-Agent"", ""Pago HTTP cartridge"");
            outStream = new DataOutputStream(connection.getOutputStream());
            outStream.writeBytes(sendData);
            System.out.println(1);
            InputStream is = connection.getInputStream();
            System.out.println(2);
            inReader = new BufferedReader(new InputStreamReader(is));
            String result;
            System.out.println(3);
            if ((result = inReader.readLine()) != null) {
                System.out.println(result);
            }
        } catch (IOException ioe) {
            ioe.printStackTrace();
            System.exit(0);
        } finally {
            try {
                if (outStream != null) outStream.close();
                if (inReader != null) inReader.close();
            } catch (IOException ioe) {
                System.err.println(""Error closing Streams!"");
                ioe.printStackTrace();
            }
            connection.disconnect();
        }
    }
",0
2057786,2,"    public static String sendGetRequest(String urlStr) {
        String result = null;
        try {
            URL url = new URL(urlStr);
            System.out.println(urlStr);
            URLConnection conn = url.openConnection();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuffer sb = new StringBuffer();
            String line = """";
            System.out.println(""aa"" + line);
            while ((line = rd.readLine()) != null) {
                System.out.println(""aa"" + line);
                sb.append(line);
            }
            rd.close();
            result = sb.toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return result;
    }
",0
4898682,2,"    public void run() {
        try {
            String s = (new StringBuilder()).append(""fName="").append(URLEncoder.encode(""???"", ""UTF-8"")).append(""&lName="").append(URLEncoder.encode(""???"", ""UTF-8"")).toString();
            URL url = new URL(""http://snoop.minecraft.net/"");
            HttpURLConnection httpurlconnection = (HttpURLConnection) url.openConnection();
            httpurlconnection.setRequestMethod(""POST"");
            httpurlconnection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            httpurlconnection.setRequestProperty(""Content-Length"", (new StringBuilder()).append("""").append(Integer.toString(s.getBytes().length)).toString());
            httpurlconnection.setRequestProperty(""Content-Language"", ""en-US"");
            httpurlconnection.setUseCaches(false);
            httpurlconnection.setDoInput(true);
            httpurlconnection.setDoOutput(true);
            DataOutputStream dataoutputstream = new DataOutputStream(httpurlconnection.getOutputStream());
            dataoutputstream.writeBytes(s);
            dataoutputstream.flush();
            dataoutputstream.close();
            java.io.InputStream inputstream = httpurlconnection.getInputStream();
            BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(inputstream));
            StringBuffer stringbuffer = new StringBuffer();
            String s1;
            while ((s1 = bufferedreader.readLine()) != null) {
                stringbuffer.append(s1);
                stringbuffer.append('\r');
            }
            bufferedreader.close();
        } catch (Exception exception) {
        }
    }
",0
5907854,2,"    @Override
    public List<String> getNamedEntitites(String sentence) {
        List<String> namedEntities = new ArrayList<String>();
        try {
            URL url = new URL(SERVICE_URL + ""text="" + URLEncoder.encode(sentence, ""UTF-8"") + ""&confidence="" + CONFIDENCE + ""&support="" + SUPPORT);
            URLConnection conn = url.openConnection();
            conn.setRequestProperty(""accept"", ""application/json"");
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuffer sb = new StringBuffer();
            String line;
            while ((line = rd.readLine()) != null) {
                sb.append(line);
            }
            rd.close();
            JSONObject json = new JSONObject(sb.toString());
            if (!json.isNull(""Resources"")) {
                JSONArray array = json.getJSONArray(""Resources"");
                JSONObject entityObject;
                for (int i = 0; i < array.length(); i++) {
                    entityObject = array.getJSONObject(i);
                    System.out.println(""Entity: "" + entityObject.getString(""@surfaceForm""));
                    System.out.println(""DBpedia URI: "" + entityObject.getString(""@URI""));
                    System.out.println(""Types: "" + entityObject.getString(""@types""));
                    namedEntities.add(entityObject.getString(""@surfaceForm""));
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return namedEntities;
    }
",0
18005008,2,"    public IUserProfile getUserProfile(String profileID) throws MM4UUserProfileNotFoundException {
        SimpleUserProfile tempProfile = null;
        String tempProfileString = this.profileURI + profileID + FILE_SUFFIX;
        try {
            URL url = new URL(tempProfileString);
            Debug.println(""Retrieve profile with ID: "" + url);
            tempProfile = new SimpleUserProfile();
            BufferedReader input = new BufferedReader(new InputStreamReader(url.openStream()));
            String tempLine = null;
            tempProfile.add(""id"", profileID);
            while ((tempLine = input.readLine()) != null) {
                Property tempProperty = PropertyList.splitStringIntoKeyAndValue(tempLine);
                if (tempProperty != null) {
                    tempProfile.addIfNotNull(tempProperty.getKey(), tempProperty.getValue());
                }
            }
            input.close();
        } catch (MalformedURLException exception) {
            throw new MM4UUserProfileNotFoundException(this, ""getProfile"", ""Profile '"" + tempProfileString + ""' not found."");
        } catch (IOException exception) {
            throw new MM4UUserProfileNotFoundException(this, ""getProfile"", ""Profile '"" + tempProfileString + ""' not found."");
        }
        return tempProfile;
    }
",0
1508930,2,"    public String httpRequestByPOST(String url, int timeout, List<NameValuePair> params) {
        String response = """";
        try {
            HttpClient httpClient = new DefaultHttpClient();
            HttpPost httpPost = new HttpPost(url);
            httpPost.setEntity(new UrlEncodedFormEntity(params, ""UTF-8""));
            HttpResponse serverResponse = httpClient.execute(httpPost);
            StatusLine statusLine = serverResponse.getStatusLine();
            if (statusLine.getStatusCode() < 400) {
                InputStream inputStream = serverResponse.getEntity().getContent();
                InputStreamReader inputReader = new InputStreamReader(inputStream);
                BufferedReader bufferedReader = new BufferedReader(inputReader);
                StringBuffer buffer = new StringBuffer();
                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    buffer.append(line);
                }
                response = buffer.toString();
                inputStream.close();
            } else {
                this.lastErrorCode = String.valueOf(statusLine.getStatusCode());
                this.lastErrorMessage = statusLine.getReasonPhrase();
                return null;
            }
        } catch (IOException e) {
            this.lastErrorCode = ""-1"";
            this.lastErrorMessage = e.getLocalizedMessage();
            return null;
        }
        return response;
    }
",0
12039036,2,"    public static ArrayList<Credential> importCredentials(String urlString) {
        ArrayList<Credential> results = new ArrayList<Credential>();
        try {
            URL url = new URL(urlString);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer buff = new StringBuffer();
            String line;
            while ((line = in.readLine()) != null) {
                buff.append(line);
                if (line.equals(""-----END PGP SIGNATURE-----"")) {
                    Credential credential = ProfileParser.parseCredential(buff.toString(), true);
                    results.add(credential);
                    buff = new StringBuffer();
                } else {
                    buff.append(NL);
                }
            }
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        } catch (ParsingException e) {
            System.err.println(e);
        }
        return results;
    }
",0
2608416,2,"    public static Model downloadModel(String url) {
        Model model = ModelFactory.createDefaultModel();
        try {
            URLConnection connection = new URL(url).openConnection();
            if (connection instanceof HttpURLConnection) {
                HttpURLConnection httpConnection = (HttpURLConnection) connection;
                httpConnection.setRequestProperty(""Accept"", ""application/rdf+xml, */*;q=.1"");
                httpConnection.setRequestProperty(""Accept-Language"", ""en"");
            }
            InputStream in = connection.getInputStream();
            model.read(in, url);
            in.close();
            return model;
        } catch (MalformedURLException e) {
            logger.debug(""Unable to download model from "" + url, e);
            throw new RuntimeException(e);
        } catch (IOException e) {
            logger.debug(""Unable to download model from "" + url, e);
            throw new RuntimeException(e);
        }
    }
",0
6829524,2,"    public String getHtmlCodeUnCharset(String urlString) {
        StringBuffer result = new StringBuffer();
        BufferedReader in = null;
        try {
            URL url = new URL((urlString));
            URLConnection con = url.openConnection();
            in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String line = null;
            while ((line = in.readLine()) != null) {
                result.append(line + ""\r\n"");
            }
            in.close();
        } catch (MalformedURLException e) {
            System.out.println(""Unable to connect to URL: "" + urlString);
        } catch (IOException e) {
            System.out.println(""IOException when connecting to URL: "" + urlString);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (Exception ex) {
                    System.out.println(""Exception throws at finally close reader when connecting to URL: "" + urlString);
                }
            }
        }
        return result.toString();
    }
",0
72041,2,"    protected static boolean isLatestVersion(double myVersion, String referenceAddress) {
        Scanner scanner = null;
        try {
            URL url = new URL(referenceAddress);
            InputStream iS = url.openStream();
            scanner = new Scanner(iS);
            String firstLine = scanner.nextLine();
            double latestVersion = Double.valueOf(firstLine.trim());
            double thisVersion = OpenSONAR.VERSION;
            return thisVersion >= latestVersion;
        } catch (UnknownHostException e) {
            System.out.println(""Unknown Host!!!"");
            return false;
        } catch (Exception e) {
            System.out.println(""Can't decide latest version"");
            e.printStackTrace();
            return false;
        }
    }
",0
9901451,2,"    protected String readUrl(String urlString) throws IOException {
        URL url = new URL(urlString);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String response = """";
        String inputLine;
        while ((inputLine = in.readLine()) != null) response += inputLine;
        in.close();
        return response;
    }
",0
7902699,2,"    public static List<String> getLevelIndex(URL fetchUrl) {
        List<String> levelNames = new ArrayList<String>();
        BufferedReader bufferedreader;
        try {
            URLConnection urlconnection = fetchUrl.openConnection();
            urlconnection.setConnectTimeout(30000);
            if (urlconnection.getContentEncoding() != null) {
                bufferedreader = new BufferedReader(new InputStreamReader(urlconnection.getInputStream(), urlconnection.getContentEncoding()));
            } else {
                bufferedreader = new BufferedReader(new InputStreamReader(urlconnection.getInputStream(), ""utf-8""));
            }
        } catch (IOException _ex) {
            System.err.println(""HexTD::readFile:: Can't read from "" + fetchUrl);
            return levelNames;
        }
        String sLine1;
        try {
            while ((sLine1 = bufferedreader.readLine()) != null) {
                if (sLine1.trim().length() != 0) {
                    levelNames.add(sLine1);
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(MapLoaderClient.class.getName()).log(Level.SEVERE, null, ex);
        }
        return levelNames;
    }
",0
6310814,2,"    public boolean downloadNextTLE() {
        boolean success = true;
        if (!downloadINI) {
            errorText = ""startTLEDownload() must be ran before downloadNextTLE() can begin"";
            return false;
        }
        if (!this.hasMoreToDownload()) {
            errorText = ""There are no more TLEs to download"";
            return false;
        }
        int i = currentTLEindex;
        try {
            URL url = new URL(rootWeb + fileNames[i]);
            URLConnection c = url.openConnection();
            InputStreamReader isr = new InputStreamReader(c.getInputStream());
            BufferedReader br = new BufferedReader(isr);
            File outFile = new File(localPath + fileNames[i]);
            BufferedWriter writer = new BufferedWriter(new FileWriter(outFile));
            String currentLine = """";
            while ((currentLine = br.readLine()) != null) {
                writer.write(currentLine);
                writer.newLine();
            }
            br.close();
            writer.close();
        } catch (Exception e) {
            System.out.println(""Error Reading/Writing TLE - "" + fileNames[i] + ""\n"" + e.toString());
            success = false;
            errorText = e.toString();
            return false;
        }
        currentTLEindex++;
        return success;
    }
",0
17722894,2,"    public static String loadResource(String resource) {
        URL url = ClassLoader.getSystemResource(""resources/"" + resource);
        StringBuffer buffer = new StringBuffer();
        if (url == null) {
            ErrorMessage.handle(new NullPointerException(""URL for resources/"" + resource + "" not found""));
        } else {
            try {
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String line = null;
                while ((line = reader.readLine()) != null) {
                    buffer.append(line + ""\n"");
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return buffer.toString();
    }
",0
964970,2,"    private Drawable fetchImage(String iconUrl, Context ctx) {
        URL url;
        HttpClient httpClient = new DefaultHttpClient();
        try {
            if (PreferenceManager.getDefaultSharedPreferences(ctx).getBoolean(""use.urlimg.com"", true)) {
                iconUrl = iconUrl.substring(iconUrl.indexOf(""//"") + 2);
                iconUrl = ""http://urlimg.com/width/100/"" + iconUrl;
            }
            Log.d(ImageCache.class.getName(), ""Loading image from: "" + iconUrl);
            HttpGet httpGet = new HttpGet(iconUrl);
            HttpResponse response = httpClient.execute(httpGet);
            InputStream content = response.getEntity().getContent();
            Drawable d = Drawable.createFromStream(content, ""src"");
            content.close();
            httpGet.abort();
            return d;
        } catch (IOException e) {
            Log.e(ImageCache.class.getName(), ""IOException while fetching: "" + iconUrl);
            return TELKA;
        } finally {
        }
    }
",0
1198670,2,"    public static String send(String purl, String xml) throws Exception {
        URL url = new URL(purl);
        HttpURLConnection httpUrlCon = (HttpURLConnection) url.openConnection();
        httpUrlCon.setRequestMethod(""POST"");
        httpUrlCon.setDoOutput(true);
        PrintWriter writer = new PrintWriter(httpUrlCon.getOutputStream());
        writer.println(xml);
        writer.flush();
        writer.close();
        System.out.println(""Sending: "" + xml);
        StringBuffer response = new StringBuffer();
        InputStreamReader is = null;
        try {
            is = new InputStreamReader(httpUrlCon.getInputStream());
        } catch (Exception e) {
            e.printStackTrace();
            is = new InputStreamReader(httpUrlCon.getErrorStream());
        }
        BufferedReader br = new BufferedReader(is);
        String line = null;
        while ((line = br.readLine()) != null) {
            response.append(line);
            response.append(""\n"");
        }
        String r = response.toString();
        return r;
    }
",0
8714262,2,"    public void readBooklist(String filename) {
        Reader input = null;
        try {
            if (filename.startsWith(""http:"")) {
                URL url = new URL(filename);
                URLConnection conn = url.openConnection();
                input = new InputStreamReader(conn.getInputStream());
            } else {
                String fileNameAll = filename;
                try {
                    fileNameAll = new File(filename).getCanonicalPath();
                } catch (IOException e) {
                    fileNameAll = new File(filename).getAbsolutePath();
                }
                input = new FileReader(new File(fileNameAll));
            }
            BufferedReader reader = new BufferedReader(input);
            String line;
            Date today = new Date();
            while ((line = reader.readLine()) != null) {
                if (shuttingDown) break;
                String fields[] = line.split(""\\|"");
                Map<String, String> valuesToAdd = new LinkedHashMap<String, String>();
                valuesToAdd.put(""fund_code_facet"", fields[11]);
                valuesToAdd.put(""date_received_facet"", fields[0]);
                DateFormat format = new SimpleDateFormat(""yyyyMMdd"");
                Date dateReceived = format.parse(fields[0], new ParsePosition(0));
                if (dateReceived.after(today)) continue;
                String docID = ""u"" + fields[9];
                try {
                    Map<String, Object> docMap = getDocumentMap(docID);
                    if (docMap != null) {
                        addNewDataToRecord(docMap, valuesToAdd);
                        documentCache.put(docID, docMap);
                        if (doUpdate && docMap != null && docMap.size() != 0) {
                            update(docMap);
                        }
                    }
                } catch (SolrMarcIndexerException e) {
                    if (e.getLevel() == SolrMarcIndexerException.IGNORE) {
                        logger.error(""Indexing routine says record "" + docID + "" should be ignored"");
                    } else if (e.getLevel() == SolrMarcIndexerException.DELETE) {
                        logger.error(""Indexing routine says record "" + docID + "" should be deleted"");
                    }
                    if (e.getLevel() == SolrMarcIndexerException.EXIT) {
                        logger.error(""Indexing routine says processing should be terminated by record "" + docID);
                        break;
                    }
                }
            }
        } catch (FileNotFoundException e) {
            logger.info(e.getMessage());
            logger.error(e.getCause());
        } catch (IOException e) {
            logger.info(e.getMessage());
            logger.error(e.getCause());
        }
    }
",0
12049052,2,"    private Collection<Class<? extends Plugin>> loadFromResource(ClassLoader classLoader, String resource) throws IOException {
        Collection<Class<? extends Plugin>> pluginClasses = new HashSet<Class<? extends Plugin>>();
        Enumeration providerFiles = classLoader.getResources(resource);
        if (!providerFiles.hasMoreElements()) {
            logger.warning(""Can't find the resource: "" + resource);
            return pluginClasses;
        }
        do {
            URL url = (URL) providerFiles.nextElement();
            InputStream stream = url.openStream();
            BufferedReader reader;
            try {
                reader = new BufferedReader(new InputStreamReader(stream, ""UTF-8""));
            } catch (IOException e) {
                continue;
            }
            String line;
            while ((line = reader.readLine()) != null) {
                int index = line.indexOf('#');
                if (index != -1) {
                    line = line.substring(0, index);
                }
                line = line.trim();
                if (line.length() > 0) {
                    Class pluginClass;
                    try {
                        pluginClass = classLoader.loadClass(line);
                    } catch (ClassNotFoundException e) {
                        logger.log(Level.WARNING, ""Can't use the Pluginclass with the name "" + line + ""."", e);
                        continue;
                    }
                    if (Plugin.class.isAssignableFrom(pluginClass)) {
                        pluginClasses.add((Class<? extends Plugin>) pluginClass);
                    } else {
                        logger.warning(""The Pluginclass with the name "" + line + "" isn't a subclass of Plugin."");
                    }
                }
            }
            reader.close();
            stream.close();
        } while (providerFiles.hasMoreElements());
        return pluginClasses;
    }
",0
15311523,2,"    public String buscaSAIKU() {
        URL url;
        Properties prop = new CargaProperties().Carga();
        BufferedReader in;
        String inputLine;
        String miLinea = null;
        try {
            url = new URL(prop.getProperty(""SAIKU""));
            in = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.contains(""lastSuccessfulBuild/artifact/saiku-bi-platform-plugin/target"")) {
                    miLinea = inputLine;
                    log.debug(miLinea);
                    miLinea = miLinea.substring(miLinea.indexOf(""lastSuccessfulBuild/artifact/saiku-bi-platform-plugin/target""));
                    miLinea = miLinea.substring(0, miLinea.indexOf(""\"">""));
                    miLinea = url + miLinea;
                }
            }
        } catch (Throwable t) {
        }
        log.debug(""Detetectado last build SAIKU: "" + miLinea);
        return miLinea;
    }
",0
78410,2,"                public void run() {
                    try {
                        int id = getID() - 1;
                        String file = id + "".dem"";
                        String data = URLEncoder.encode(""file"", ""UTF-8"") + ""="" + URLEncoder.encode(file, ""UTF-8"");
                        data += ""&"" + URLEncoder.encode(""hash"", ""UTF-8"") + ""="" + URLEncoder.encode(getMD5Digest(""tf2invite"" + file), ""UTF-8"");
                        URL url = new URL(""http://94.23.189.99/ftp.php"");
                        final URLConnection conn = url.openConnection();
                        conn.setDoOutput(true);
                        OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
                        wr.write(data);
                        wr.flush();
                        String line;
                        BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                        while ((line = rd.readLine()) != null) {
                            System.out.println(line);
                            if (line.startsWith(""demo="")) msg(""2The last gather demo has been uploaded successfully: "" + line.split(""="")[1]);
                        }
                        rd.close();
                        wr.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
",0
15453012,2,"    public ArrayList parseFile(File newfile) throws IOException {
        String s;
        String firstName;
        String header;
        String name = null;
        Integer PVLoggerID = new Integer(0);
        String[] tokens;
        int nvalues = 0;
        double num1, num2, num3;
        double xoffset = 1.0;
        double xdelta = 1.0;
        double yoffset = 1.0;
        double ydelta = 1.0;
        double zoffset = 1.0;
        double zdelta = 1.0;
        boolean readfit = false;
        boolean readraw = false;
        boolean zerodata = false;
        boolean baddata = false;
        boolean harpdata = false;
        ArrayList fitparams = new ArrayList();
        ArrayList xraw = new ArrayList();
        ArrayList yraw = new ArrayList();
        ArrayList zraw = new ArrayList();
        ArrayList sraw = new ArrayList();
        ArrayList sxraw = new ArrayList();
        ArrayList syraw = new ArrayList();
        ArrayList szraw = new ArrayList();
        URL url = newfile.toURI().toURL();
        InputStream is = url.openStream();
        InputStreamReader isr = new InputStreamReader(is);
        BufferedReader br = new BufferedReader(isr);
        while ((s = br.readLine()) != null) {
            tokens = s.split(""\\s+"");
            nvalues = tokens.length;
            firstName = (String) tokens[0];
            if (((String) tokens[0]).length() == 0) {
                readraw = false;
                readfit = false;
                continue;
            }
            if ((nvalues == 4) && (!firstName.startsWith(""---""))) {
                if ((Double.parseDouble(tokens[1]) == 0.) && (Double.parseDouble(tokens[2]) == 0.) && (Double.parseDouble(tokens[3]) == 0.)) {
                    zerodata = true;
                } else {
                    zerodata = false;
                }
                if (tokens[1].equals(""NaN"") || tokens[2].equals(""NaN"") || tokens[3].equals(""NaN"")) {
                    baddata = true;
                } else {
                    baddata = false;
                }
            }
            if (firstName.startsWith(""start"")) {
                header = s;
            }
            if (firstName.indexOf(""WS"") > 0) {
                if (name != null) {
                    dumpData(name, fitparams, sraw, sxraw, syraw, szraw, yraw, zraw, xraw);
                }
                name = tokens[0];
                readraw = false;
                readfit = false;
                zerodata = false;
                baddata = false;
                harpdata = false;
                fitparams.clear();
                xraw.clear();
                yraw.clear();
                zraw.clear();
                sraw.clear();
                sxraw.clear();
                syraw.clear();
                szraw.clear();
            }
            if (firstName.startsWith(""Area"")) ;
            if (firstName.startsWith(""Ampl"")) ;
            if (firstName.startsWith(""Mean"")) ;
            if (firstName.startsWith(""Sigma"")) {
                fitparams.add(new Double(Double.parseDouble(tokens[3])));
                fitparams.add(new Double(Double.parseDouble(tokens[1])));
                fitparams.add(new Double(Double.parseDouble(tokens[5])));
            }
            if (firstName.startsWith(""Offset"")) ;
            if (firstName.startsWith(""Slope"")) ;
            if ((firstName.equals(""Position"")) && (((String) tokens[2]).equals(""Raw""))) {
                readraw = true;
                continue;
            }
            if ((firstName.equals(""Position"")) && (((String) tokens[2]).equals(""Fit""))) {
                readfit = true;
                continue;
            }
            if ((firstName.contains(""Harp""))) {
                xraw.clear();
                yraw.clear();
                zraw.clear();
                sraw.clear();
                sxraw.clear();
                syraw.clear();
                szraw.clear();
                harpdata = true;
                readraw = true;
                name = tokens[0];
                continue;
            }
            if (firstName.startsWith(""---"")) continue;
            if (harpdata == true) {
                if (((String) tokens[0]).length() != 0) {
                    if (firstName.startsWith(""PVLogger"")) {
                        try {
                            PVLoggerID = new Integer(Integer.parseInt(tokens[2]));
                        } catch (NumberFormatException e) {
                        }
                    } else {
                        sxraw.add(new Double(Double.parseDouble(tokens[0])));
                        xraw.add(new Double(Double.parseDouble(tokens[1])));
                        syraw.add(new Double(Double.parseDouble(tokens[2])));
                        yraw.add(new Double(Double.parseDouble(tokens[3])));
                        szraw.add(new Double(Double.parseDouble(tokens[4])));
                        zraw.add(new Double(Double.parseDouble(tokens[5])));
                    }
                }
                continue;
            }
            if (readraw && (!zerodata) && (!baddata)) {
                sraw.add(new Double(Double.parseDouble(tokens[0]) / Math.sqrt(2.0)));
                sxraw.add(new Double(Double.parseDouble(tokens[0]) / Math.sqrt(2.0)));
                syraw.add(new Double(Double.parseDouble(tokens[0]) / Math.sqrt(2.0)));
                szraw.add(new Double(Double.parseDouble(tokens[0])));
                yraw.add(new Double(Double.parseDouble(tokens[1])));
                zraw.add(new Double(Double.parseDouble(tokens[2])));
                xraw.add(new Double(Double.parseDouble(tokens[3])));
            }
            if (firstName.startsWith(""PVLogger"")) {
                try {
                    PVLoggerID = new Integer(Integer.parseInt(tokens[2]));
                } catch (NumberFormatException e) {
                }
            }
        }
        dumpData(name, fitparams, sraw, sxraw, syraw, szraw, yraw, zraw, xraw);
        wiredata.add((Integer) PVLoggerID);
        return wiredata;
    }
",0
7767320,2,"    private String executeUpload(String urlStr, String specification, String filename, String sessionHandle) {
        StringBuffer result = new StringBuffer();
        try {
            URL url = new URL(urlStr);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setDoOutput(true);
            connection.setDoInput(true);
            connection.setRequestMethod(""POST"");
            connection.setRequestProperty(""YAWLSessionHandle"", sessionHandle);
            connection.setRequestProperty(""filename"", filename);
            connection.setRequestProperty(""Content-Type"", ""text/xml"");
            PrintWriter out = new PrintWriter(connection.getOutputStream());
            out.print(specification);
            out.flush();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                result.append(inputLine);
            }
            in.close();
            out.close();
            connection.disconnect();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            InterfaceBWebsideController.logContactError(e, _backEndURIStr);
        }
        String msg = result.toString();
        return stripOuterElement(msg);
    }
",0
3766029,2,"    public String uploadZtree(ArrayList c) {
        try {
            String id = generateRandomId();
            Iterator iter = c.iterator();
            URL url = new URL(ZorobotSystem.props.getProperty(""zoro.url"") + ""auplo1.jsp"");
            URLConnection connection = url.openConnection();
            connection.setDoOutput(true);
            PrintWriter out = new PrintWriter(connection.getOutputStream());
            out.print(""id="" + id + ""&"");
            StringBuffer sb = new StringBuffer();
            int gg = 0;
            while (iter.hasNext()) {
                if (gg++ >= 500) break;
                String st = (String) iter.next();
                sb.append(""a="");
                sb.append(URLEncoder.encode(st, ""UTF-8""));
                if (iter.hasNext() && gg < 500) sb.append(""&"");
            }
            out.println(sb.toString());
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            if ((inputLine = in.readLine()) != null) {
                if (!inputLine.equals(""OK!"") && inputLine.length() > 3) {
                    System.out.println(""Not OK: "" + inputLine);
                    return ""xxxxxxxxxx"";
                }
            }
            in.close();
            return id;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
",0
7047049,2,"    public URL grabCover(String artist, String title) {
        if (idf.jCheckBox3.isSelected()) {
            println(""Searching cover for: "" + artist);
            artist = artist.trim();
            URL url = null;
            int searchnumber = 0;
            try {
                URL yahoo = new URL(""http://www.gracenote.com/search/?query="" + artist.toLowerCase().replaceAll("" "", ""+"") + ""&search_type=artist"");
                BufferedReader in = new BufferedReader(new InputStreamReader(yahoo.openStream()));
                println("""" + yahoo);
                String inputLine;
                String line = """";
                while ((inputLine = in.readLine()) != null) line += inputLine;
                boolean notfound = true;
                String cut = line;
                while (notfound) {
                    String search = ""<div class=\""album-name large\""><strong>Album:</strong> <a href=\"""";
                    if (line.indexOf(search) <= 0) {
                        println(""Artist was not found!"");
                        in.close();
                        return null;
                    }
                    cut = cut.substring(cut.indexOf(search) + search.length());
                    String test = cut.substring(0, cut.indexOf(""\""""));
                    URL secondurl = new URL(""http://www.gracenote.com"" + test);
                    println("""" + secondurl);
                    BufferedReader secin = new BufferedReader(new InputStreamReader(secondurl.openStream()));
                    String secinputLine;
                    String secline = """";
                    while ((secinputLine = secin.readLine()) != null) secline += secinputLine;
                    if (!(secline.toUpperCase().indexOf(title.toUpperCase()) < 0 && idf.jCheckBox2.isSelected())) {
                        String secsearch = ""<div class=\""album-image\""><img src=\"""";
                        String seccut = secline.substring(secline.indexOf(secsearch) + secsearch.length());
                        seccut = seccut.substring(0, seccut.indexOf(""\""""));
                        url = new URL(""http://www.gracenote.com"" + seccut);
                        if (url.toString().indexOf(""covers/default"") <= 0 && url.toString().indexOf(""covers/"") > 0) {
                            notfound = false;
                        }
                    }
                    secin.close();
                }
                in.close();
                println(url.toString());
            } catch (Exception e) {
                println(""error "" + e + ""\n"");
                e.printStackTrace();
            }
            return url;
        } else {
            return null;
        }
    }
",0
16129965,2,"    private List<String> readUrl(URL url) throws IOException {
        List<String> lines = new ArrayList<String>();
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String str;
        while ((str = in.readLine()) != null) {
            lines.add(str);
        }
        in.close();
        return lines;
    }
",0
7118204,2,"    private static String doGetForSessionKey(String authCode) throws Exception {
        String sessionKey = """";
        HttpClient hc = new DefaultHttpClient();
        HttpGet hg = new HttpGet(Common.TEST_SESSION_HOST + Common.TEST_SESSION_PARAM + authCode);
        HttpResponse hr = hc.execute(hg);
        BufferedReader br = new BufferedReader(new InputStreamReader(hr.getEntity().getContent()));
        StringBuilder sb = new StringBuilder();
        String line;
        while ((line = br.readLine()) != null) {
            sb.append(line);
        }
        String result = sb.toString();
        Log.i(""sessionKeyMessages"", result);
        Map<String, String> map = Util.handleURLParameters(result);
        sessionKey = map.get(Common.TOP_SESSION);
        String topParameters = map.get(Common.TOP_PARAMETERS);
        String decTopParameters = Util.decodeBase64(topParameters);
        Log.i(""base64"", decTopParameters);
        map = Util.handleURLParameters(decTopParameters);
        Log.i(""nick"", map.get(Common.VISITOR_NICK));
        CachePool.put(Common.VISITOR_NICK, map.get(Common.VISITOR_NICK));
        return sessionKey;
    }
",0
9103010,2,"    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        if ((this.jTree2.getSelectionPath() == null) || !(this.jTree2.getSelectionPath().getLastPathComponent() instanceof StyleTreeNode)) {
            Msg.showMsg(""Devi selezionare lo stile sotto il quale caricare la ricetta!"", this);
            return;
        }
        if ((this.txtUser.getText() == null) || (this.txtUser.getText().length() == 0)) {
            Msg.showMsg(""Il nome utente è obbligatorio!"", this);
            return;
        }
        if ((this.txtPwd.getPassword() == null) || (this.txtPwd.getPassword().length == 0)) {
            Msg.showMsg(""La password è obbligatoria!"", this);
            return;
        }
        this.nomeRicetta = this.txtNome.getText();
        if ((this.nomeRicetta == null) || (this.nomeRicetta.length() == 0)) {
            Msg.showMsg(""Il nome della ricetta è obbligatorio!"", this);
            return;
        }
        StyleTreeNode node = null;
        if (this.jTree2.getSelectionPath().getLastPathComponent() instanceof StyleTreeNode) {
            node = (StyleTreeNode) this.jTree2.getSelectionPath().getLastPathComponent();
        }
        try {
            String data = URLEncoder.encode(""nick"", ""UTF-8"") + ""="" + URLEncoder.encode(this.txtUser.getText(), ""UTF-8"");
            data += ""&"" + URLEncoder.encode(""pwd"", ""UTF-8"") + ""="" + URLEncoder.encode(new String(this.txtPwd.getPassword()), ""UTF-8"");
            data += ""&"" + URLEncoder.encode(""id_stile"", ""UTF-8"") + ""="" + URLEncoder.encode(node.getIdStile(), ""UTF-8"");
            data += ""&"" + URLEncoder.encode(""nome_ricetta"", ""UTF-8"") + ""="" + URLEncoder.encode(this.nomeRicetta, ""UTF-8"");
            data += ""&"" + URLEncoder.encode(""xml_ricetta"", ""UTF-8"") + ""="" + URLEncoder.encode(this.xml, ""UTF-8"");
            URL url = new URL(""http://"" + Main.config.getRemoteServer() + ""/upload_ricetta.asp?"" + data);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            conn.setDoInput(true);
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            String str = """";
            while ((line = rd.readLine()) != null) {
                str += line;
            }
            rd.close();
            Msg.showMsg(str, this);
            doDefaultCloseAction();
        } catch (Exception e) {
            Utils.showException(e, ""Errore in upload"", this);
        }
        reloadTree();
    }
",0
14291851,2,"    public Function findFunction(String functionName) {
        String code = """";
        UserFunction function = (UserFunction) getCachedFunction(functionName);
        if (function != null) return function;
        ErrorLogger.debugLine(""MFileWebLoader: loading >"" + functionName + "".m<"");
        try {
            URL url = new URL(codeBase, directory + ""/"" + functionName + "".m"");
            InputStream in = url.openStream();
            BufferedReader inReader = new BufferedReader(new InputStreamReader(in));
            String line;
            while ((line = inReader.readLine()) != null) {
                code += line + ""\n"";
            }
            inReader.close();
        } catch (Exception e) {
            Errors.throwMathLibException(""MFileWebLoader: m-file exception via web"");
        }
        ErrorLogger.debugLine(""MFileWebLoader: code: begin \n"" + code + ""\ncode end"");
        FunctionParser funcParser = new FunctionParser();
        function = funcParser.parseFunction(code);
        function.setName(functionName);
        cacheFunction(function);
        ErrorLogger.debugLine(""MFileWebLoader: finished webloading >"" + functionName + "".m<"");
        return function;
    }
",0
17569036,2,"    public void search() throws Exception {
        URL searchurl = new URL("""" + ""http://www.ncbi.nlm.nih.gov/blast/Blast.cgi"" + ""?CMD=Put"" + ""&DATABASE="" + this.database + ""&PROGRAM="" + this.program + ""&QUERY="" + this.sequence.seqString());
        BufferedReader reader = new BufferedReader(new InputStreamReader(searchurl.openStream(), ""UTF-8""));
        String line = """";
        while ((line = reader.readLine()) != null) {
            if (line.contains(""Request ID"")) this.rid += line.substring(70, 81);
        }
        reader.close();
    }
",0
11698013,2,"    private void listAndInstantiateServiceProviders() {
        final Enumeration<URL> resources = ClassLoaderHelper.getResources(SERVICES_FILE, ServiceManager.class);
        String name;
        try {
            while (resources.hasMoreElements()) {
                URL url = resources.nextElement();
                InputStream stream = url.openStream();
                try {
                    BufferedReader reader = new BufferedReader(new InputStreamReader(stream), 100);
                    name = reader.readLine();
                    while (name != null) {
                        name = name.trim();
                        if (!name.startsWith(""#"")) {
                            final ServiceProvider<?> serviceProvider = ClassLoaderHelper.instanceFromName(ServiceProvider.class, name, ServiceManager.class, ""service provider"");
                            @SuppressWarnings(""unchecked"") final Class<ServiceProvider<?>> serviceProviderClass = (Class<ServiceProvider<?>>) serviceProvider.getClass();
                            managedProviders.put(serviceProviderClass, new ServiceProviderWrapper(serviceProvider));
                        }
                        name = reader.readLine();
                    }
                } finally {
                    stream.close();
                }
            }
        } catch (IOException e) {
            throw new SearchException(""Unable to read "" + SERVICES_FILE, e);
        }
    }
",0
10642765,2,"    protected Reader getText() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
        String readLine;
        do {
            readLine = br.readLine();
        } while (readLine != null && readLine.indexOf(""</table><br clear=all>"") < 0);
        return br;
    }
",0
1179431,2,"    private String fetchHTML(String s) {
        String str;
        StringBuffer sb = new StringBuffer();
        try {
            URL url = new URL(s);
            InputStream is = url.openStream();
            InputStreamReader isr = new InputStreamReader(is);
            BufferedReader br = new BufferedReader(isr);
            while ((str = br.readLine()) != null) {
                sb.append(str);
            }
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
        return sb.toString();
    }
",0
5795551,2,"    public static void main(String[] args) throws Exception {
        System.setProperty(""debug"", ""debug"");
        OAuthConsumer consumer = new DefaultOAuthConsumer(""YmRF4HDvikvwDxYafsaK"", ""r)q7L!4X$j$nTS0lXAjC=al9Xf*cLOdyFJsy%2OE"");
        consumer.setTokenWithSecret(""5722da60fee79ef9efc2d383f871d550"", ""39142f31ad8a7e6ff7b87f36cc9e8f10"");
        URL url = new URL(""http://api.t.sohu.com/statuses/update.json"");
        HttpURLConnection request = (HttpURLConnection) url.openConnection();
        request.setDoOutput(true);
        request.setRequestMethod(""POST"");
        HttpParameters para = new HttpParameters();
        para.put(""status"", URLEncoder.encode(""中 文"", ""utf-8"").replaceAll(""\\+"", ""%20""));
        consumer.setAdditionalParameters(para);
        consumer.sign(request);
        OutputStream ot = request.getOutputStream();
        ot.write((""status="" + URLEncoder.encode(""1中 文"", ""utf-8"")).replaceAll(""\\+"", ""%20"").getBytes());
        ot.flush();
        ot.close();
        System.out.println(""Sending request..."");
        request.connect();
        System.out.println(""Response: "" + request.getResponseCode() + "" "" + request.getResponseMessage());
        BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));
        String b = null;
        while ((b = reader.readLine()) != null) {
            System.out.println(b);
        }
    }
",0
19276021,2,"    public DataSet newparse() throws SnifflibDatatypeException {
        NumberFormat numformat = NumberFormat.getInstance();
        if (this.headers.size() != this.types.size()) {
            throw new SnifflibDatatypeException(""Different number of headers ("" + this.headers.size() + "") and types("" + this.types.size() + "")."");
        }
        DataSet out = null;
        if (!this.dryrun) {
            out = new DataSet();
        }
        BufferedReader r = null;
        StreamTokenizer tokenizer = null;
        try {
            if (this.isURL) {
                if (this.url2goto == null) {
                    return (null);
                }
                DataInputStream in = null;
                try {
                    in = new DataInputStream(this.url2goto.openStream());
                    System.out.println(""READY TO READ FROM URL:"" + url2goto);
                    r = new BufferedReader(new InputStreamReader(in));
                } catch (Exception err) {
                    throw new RuntimeException(""Problem reading from URL "" + this.url2goto + ""."", err);
                }
            } else {
                if (this.file == null) {
                    throw new RuntimeException(""Data file to be parsed can not be null."");
                }
                if (!this.file.exists()) {
                    throw new RuntimeException(""The file "" + this.file + "" does not exist."");
                }
                r = new BufferedReader(new FileReader(this.file));
            }
            if (this.ignorePreHeaderLines > 0) {
                String strLine;
                int k = 0;
                while ((k < this.ignorePreHeaderLines) && ((strLine = r.readLine()) != null)) {
                    k++;
                }
            }
            tokenizer = new StreamTokenizer(r);
            tokenizer.resetSyntax();
            tokenizer.eolIsSignificant(true);
            boolean parseNumbers = false;
            for (int k = 0; k < this.types.size(); k++) {
                Class type = (Class) this.types.get(k);
                if (Number.class.isAssignableFrom(type)) {
                    parseNumbers = true;
                    break;
                }
            }
            if (parseNumbers) {
                tokenizer.parseNumbers();
            }
            tokenizer.eolIsSignificant(true);
            if (this.delimiter.equals(""\\t"")) {
                tokenizer.whitespaceChars('\t', '\t');
                tokenizer.quoteChar('""');
                tokenizer.whitespaceChars(' ', ' ');
            } else if (this.delimiter.equals("","")) {
                tokenizer.quoteChar('""');
                tokenizer.whitespaceChars(',', ',');
                tokenizer.whitespaceChars(' ', ' ');
            } else {
                if (this.delimiter.length() > 1) {
                    throw new RuntimeException(""Delimiter must be a single character.  Multiple character delimiters are not allowed."");
                }
                if (this.delimiter.length() > 0) {
                    tokenizer.whitespaceChars(this.delimiter.charAt(0), this.delimiter.charAt(0));
                } else {
                    tokenizer.wordChars(Character.MIN_VALUE, Character.MAX_VALUE);
                    tokenizer.eolIsSignificant(true);
                    tokenizer.ordinaryChar('\n');
                }
            }
            boolean readingHeaders = true;
            boolean readingInitialValues = false;
            boolean readingData = false;
            boolean readingScientificNotation = false;
            if (this.headers.size() > 0) {
                readingHeaders = false;
                readingInitialValues = true;
            }
            if (this.types.size() > 0) {
                readingInitialValues = false;
                Class targetclass;
                for (int j = 0; j < this.types.size(); j++) {
                    targetclass = (Class) this.types.get(j);
                    try {
                        this.constructors.add(targetclass.getConstructor(String.class));
                    } catch (java.lang.NoSuchMethodException err) {
                        throw new SnifflibDatatypeException(""Could not find appropriate constructor for "" + targetclass + "". "" + err.getMessage());
                    }
                }
                readingData = true;
            }
            int currentColumn = 0;
            int currentRow = 0;
            this.rowcount = 0;
            boolean advanceField = true;
            while (true) {
                tokenizer.nextToken();
                switch(tokenizer.ttype) {
                    case StreamTokenizer.TT_WORD:
                        {
                            advanceField = true;
                            if (readingScientificNotation) {
                                throw new RuntimeException(""Problem reading scientific notation at row "" + currentRow + "" column "" + currentColumn + ""."");
                            }
                            if (readingHeaders) {
                                this.headers.add(tokenizer.sval);
                            } else {
                                if (readingInitialValues) {
                                    this.types.add(String.class);
                                }
                                if (!this.dryrun) {
                                    if (out.getColumnCount() <= currentColumn) {
                                        out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));
                                    }
                                }
                                try {
                                    Constructor construct;
                                    if (currentColumn < this.constructors.size()) {
                                        construct = (Constructor) this.constructors.get(currentColumn);
                                    } else {
                                        Class targetclass = (Class) this.types.get(currentColumn);
                                        construct = targetclass.getConstructor(String.class);
                                        this.constructors.add(construct);
                                    }
                                    try {
                                        try {
                                            try {
                                                if (!this.dryrun) {
                                                    out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn);
                                                } else if (this.findingTargetValue) {
                                                    Object vvv = construct.newInstance((String) tokenizer.sval);
                                                    this.valueQueue.push(vvv);
                                                    if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {
                                                        this.targetValue = vvv;
                                                        r.close();
                                                        return (null);
                                                    }
                                                }
                                            } catch (java.lang.reflect.InvocationTargetException err) {
                                                throw new SnifflibDatatypeException(""Problem constructing 1"" + err.getMessage());
                                            }
                                        } catch (java.lang.IllegalAccessException err) {
                                            throw new SnifflibDatatypeException(""Problem constructing 2"" + err.getMessage());
                                        }
                                    } catch (java.lang.InstantiationException err) {
                                        throw new SnifflibDatatypeException(""Problem constructing 3"" + err.getMessage());
                                    }
                                } catch (java.lang.NoSuchMethodException err) {
                                    throw new SnifflibDatatypeException(""Problem constructing 4"" + err.getMessage());
                                }
                            }
                            break;
                        }
                    case StreamTokenizer.TT_NUMBER:
                        {
                            advanceField = true;
                            if (readingHeaders) {
                                throw new SnifflibDatatypeException(""Expecting string header at row="" + currentRow + "", column="" + currentColumn + ""."");
                            } else {
                                if (readingInitialValues) {
                                    this.types.add(Double.class);
                                }
                                if (!this.dryrun) {
                                    if (out.getColumnCount() <= currentColumn) {
                                        out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));
                                    }
                                }
                                try {
                                    Constructor construct;
                                    if (currentColumn < this.constructors.size()) {
                                        construct = (Constructor) this.constructors.get(currentColumn);
                                    } else {
                                        Class targetclass = (Class) this.types.get(currentColumn);
                                        construct = targetclass.getConstructor(double.class);
                                        this.constructors.add(construct);
                                    }
                                    if (readingScientificNotation) {
                                        Double val = this.scientificNumber;
                                        if (!this.dryrun) {
                                            try {
                                                out.setValueAt(new Double(val.doubleValue() * tokenizer.nval), currentRow, currentColumn);
                                            } catch (Exception err) {
                                                throw new SnifflibDatatypeException(""Problem constructing "" + construct.getDeclaringClass() + ""at row "" + currentRow + "" column "" + currentColumn + ""."", err);
                                            }
                                        } else if (this.findingTargetValue) {
                                            Double NVAL = new Double(tokenizer.nval);
                                            Object vvv = null;
                                            try {
                                                vvv = Double.parseDouble(val + ""E"" + NVAL.intValue());
                                            } catch (Exception err) {
                                                throw new RuntimeException(""Problem parsing scientific notation at row="" + currentRow + "" col="" + currentColumn + ""."", err);
                                            }
                                            tokenizer.nextToken();
                                            if (tokenizer.ttype != 'e') {
                                                this.valueQueue.push(vvv);
                                                if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {
                                                    this.targetValue = vvv;
                                                    r.close();
                                                    return (null);
                                                }
                                                currentColumn++;
                                            } else {
                                                tokenizer.pushBack();
                                            }
                                        }
                                        readingScientificNotation = false;
                                    } else {
                                        try {
                                            this.scientificNumber = new Double(tokenizer.nval);
                                            if (!this.dryrun) {
                                                out.setValueAt(this.scientificNumber, currentRow, currentColumn);
                                            } else if (this.findingTargetValue) {
                                                this.valueQueue.push(this.scientificNumber);
                                                if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {
                                                    this.targetValue = this.scientificNumber;
                                                    r.close();
                                                    return (null);
                                                }
                                            }
                                        } catch (Exception err) {
                                            throw new SnifflibDatatypeException(""Problem constructing "" + construct.getDeclaringClass() + ""at row "" + currentRow + "" column "" + currentColumn + ""."", err);
                                        }
                                    }
                                } catch (java.lang.NoSuchMethodException err) {
                                    throw new SnifflibDatatypeException(""Problem constructing"" + err.getMessage());
                                }
                            }
                            break;
                        }
                    case StreamTokenizer.TT_EOL:
                        {
                            if (readingHeaders) {
                                readingHeaders = false;
                                readingInitialValues = true;
                            } else {
                                if (readingInitialValues) {
                                    readingInitialValues = false;
                                    readingData = true;
                                }
                            }
                            if (readingData) {
                                if (valueQueue.getUpperIndex() < currentRow) {
                                    valueQueue.push("""");
                                }
                                currentRow++;
                            }
                            break;
                        }
                    case StreamTokenizer.TT_EOF:
                        {
                            if (readingHeaders) {
                                throw new SnifflibDatatypeException(""End of file reached while reading headers."");
                            }
                            if (readingInitialValues) {
                                throw new SnifflibDatatypeException(""End of file reached while reading initial values."");
                            }
                            if (readingData) {
                                readingData = false;
                            }
                            break;
                        }
                    default:
                        {
                            if (tokenizer.ttype == '""') {
                                advanceField = true;
                                if (readingHeaders) {
                                    this.headers.add(tokenizer.sval);
                                } else {
                                    if (readingInitialValues) {
                                        this.types.add(String.class);
                                    }
                                    if (!this.dryrun) {
                                        if (out.getColumnCount() <= currentColumn) {
                                            out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));
                                        }
                                    }
                                    try {
                                        Constructor construct;
                                        if (currentColumn < this.constructors.size()) {
                                            construct = (Constructor) this.constructors.get(currentColumn);
                                        } else {
                                            Class targetclass = (Class) this.types.get(currentColumn);
                                            construct = targetclass.getConstructor(String.class);
                                            this.constructors.add(construct);
                                        }
                                        try {
                                            try {
                                                try {
                                                    if (!this.dryrun) {
                                                        out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn);
                                                    } else if (this.findingTargetValue) {
                                                        Object vvv = construct.newInstance((String) tokenizer.sval);
                                                        this.valueQueue.push(vvv);
                                                        if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {
                                                            this.targetValue = vvv;
                                                            r.close();
                                                            return (null);
                                                        }
                                                    }
                                                } catch (java.lang.reflect.InvocationTargetException err) {
                                                    throw new SnifflibDatatypeException(""Problem constructing a "" + construct, err);
                                                }
                                            } catch (java.lang.IllegalAccessException err) {
                                                throw new SnifflibDatatypeException(""Problem constructing 2 "", err);
                                            }
                                        } catch (java.lang.InstantiationException err) {
                                            throw new SnifflibDatatypeException(""Problem constructing 3 "", err);
                                        }
                                    } catch (java.lang.NoSuchMethodException err) {
                                        throw new SnifflibDatatypeException(""Problem constructing 4"", err);
                                    }
                                }
                            } else if (tokenizer.ttype == 'e') {
                                Class targetclass = (Class) this.types.get(currentColumn);
                                if (Number.class.isAssignableFrom(targetclass)) {
                                    currentColumn--;
                                    readingScientificNotation = true;
                                    advanceField = false;
                                }
                            } else {
                                advanceField = false;
                            }
                            break;
                        }
                }
                if (tokenizer.ttype == StreamTokenizer.TT_EOF) {
                    advanceField = false;
                    break;
                }
                if (advanceField) {
                    currentColumn++;
                    if (!readingHeaders) {
                        if (currentColumn >= this.headers.size()) {
                            currentColumn = 0;
                        }
                    }
                }
            }
            if (!readingHeaders) {
                this.rowcount = currentRow;
            } else {
                this.rowcount = 0;
                readingHeaders = false;
                if (this.ignorePostHeaderLines > 0) {
                    String strLine;
                    int k = 0;
                    while ((k < this.ignorePostHeaderLines) && ((strLine = r.readLine()) != null)) {
                        k++;
                    }
                }
            }
            r.close();
        } catch (java.io.IOException err) {
            throw new SnifflibDatatypeException(err.getMessage());
        }
        if (!this.dryrun) {
            for (int j = 0; j < this.headers.size(); j++) {
                out.setColumnName(j, (String) this.headers.get(j));
            }
        }
        return (out);
    }
",0
3287282,2,"    public void googleImageSearch(String start) {
        try {
            String u = ""http://images.google.com/images?q="" + custom + start;
            if (u.contains("" "")) {
                u = u.replace("" "", ""+"");
            }
            URL url = new URL(u);
            HttpURLConnection httpcon = (HttpURLConnection) url.openConnection();
            httpcon.addRequestProperty(""User-Agent"", ""Mozilla/4.76"");
            BufferedReader readIn = new BufferedReader(new InputStreamReader(httpcon.getInputStream()));
            googleImages.clear();
            String text = """";
            String lin = """";
            while ((lin = readIn.readLine()) != null) {
                text += lin;
            }
            readIn.close();
            if (text.contains(""\n"")) {
                text = text.replace(""\n"", """");
            }
            String[] array = text.split(""\\Qhref=\""/imgres?imgurl=\\E"");
            for (String s : array) {
                if (s.startsWith(""http://"") || s.startsWith(""https://"") && s.contains(""&amp;"")) {
                    String s1 = s.substring(0, s.indexOf(""&amp;""));
                    googleImages.add(s1);
                }
            }
        } catch (Exception ex4) {
            MusicBoxView.showErrorDialog(ex4);
        }
        jButton4.setEnabled(true);
        jButton2.setEnabled(true);
        getContentPane().remove(jLabel1);
        ImageIcon icon;
        try {
            icon = new ImageIcon(new URL(googleImages.elementAt(googleImageLocation)));
            int h = icon.getIconHeight();
            int w = icon.getIconWidth();
            jLabel1.setSize(w, h);
            jLabel1.setIcon(icon);
            add(jLabel1, BorderLayout.CENTER);
        } catch (MalformedURLException ex) {
            MusicBoxView.showErrorDialog(ex);
            jLabel1.setIcon(MusicBoxView.noImage);
        }
        add(jPanel1, BorderLayout.PAGE_END);
        pack();
    }
",0
5339736,2,"    public static String translate(String s) {
        try {
            String result = null;
            URL url = new URL(""http://translate.google.com/translate_t"");
            URLConnection connection = url.openConnection();
            connection.setRequestProperty(""User-Agent"", ""Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)"");
            connection.setDoOutput(true);
            PrintWriter out = new PrintWriter(connection.getOutputStream());
            out.print(""text="" + URLEncoder.encode(s, ""UTF-8"") + ""&langpair="");
            if (s.matches(""[\\u0000-\\u00ff]+"")) {
                out.print(""en|ja"");
            } else {
                out.print(""ja|en"");
            }
            out.print(""&hl=en&ie=UTF-8&oe=UTF-8"");
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream(), ""UTF-8""));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                int textPos = inputLine.indexOf(""id=result_box"");
                if (textPos >= 0) {
                    int ltrPos = inputLine.indexOf(""dir=ltr"", textPos + 9);
                    if (ltrPos >= 0) {
                        int closePos = inputLine.indexOf(""<"", ltrPos + 8);
                        if (closePos >= 0) {
                            result = inputLine.substring(ltrPos + 8, closePos);
                        }
                    }
                }
            }
            in.close();
            return result;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
",0
9036637,2,"    public static boolean reportException(Throwable ex, HashMap<String, String> suppl) {
        if (Activator.getDefault().getPreferenceStore().getBoolean(PreferenceConstants.P_CRASH_REPORTING)) {
            logger.debug(""Report exception to devs..."");
            String data = ""reportType=exception&"" + ""message="" + ex.getMessage();
            data += ""&build="" + Platform.getBundle(""de.uni_mannheim.swt.codeconjurer"").getHeaders().get(""Bundle-Version"");
            int ln = 0;
            for (StackTraceElement el : ex.getStackTrace()) {
                data += ""&st_line_"" + ++ln + ""="" + el.getClassName() + ""#"" + el.getMethodName() + ""<"" + el.getLineNumber() + "">"";
            }
            data += ""&lines="" + ln;
            data += ""&Suppl-Description="" + ex.toString();
            data += ""&Suppl-Server="" + Activator.getDefault().getPreferenceStore().getString(PreferenceConstants.P_SERVER);
            data += ""&Suppl-User="" + Activator.getDefault().getPreferenceStore().getString(PreferenceConstants.P_USERNAME);
            if (suppl != null) {
                for (String key : suppl.keySet()) {
                    data += ""&Suppl-"" + key + ""="" + suppl.get(key);
                }
            }
            try {
                URL url = new URL(""http://www.merobase.com:7777/org.code_conjurer.udc/CrashReport"");
                URLConnection conn = url.openConnection();
                conn.setDoOutput(true);
                OutputStreamWriter writer = new OutputStreamWriter(conn.getOutputStream());
                writer.write(data);
                writer.flush();
                StringBuffer answer = new StringBuffer();
                BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                String line;
                while ((line = reader.readLine()) != null) {
                    answer.append(line + ""\r\n"");
                }
                writer.close();
                reader.close();
                logger.debug(answer.toString());
            } catch (Exception e) {
                logger.debug(""Could not report exception"");
                return false;
            }
            return true;
        } else {
            logger.debug(""Reporting not wished!"");
            return false;
        }
    }
",0
5597187,2,"    @Override
    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {
        HttpServletRequest request = (HttpServletRequest) req;
        HttpServletResponse response = (HttpServletResponse) res;
        ImagesService imgService = ImagesServiceFactory.getImagesService();
        InputStream stream = request.getInputStream();
        ArrayList<Byte> bytes = new ArrayList<Byte>();
        int b = 0;
        while ((b = stream.read()) != -1) {
            bytes.add((byte) b);
        }
        byte img[] = new byte[bytes.size()];
        for (int i = 0; i < bytes.size(); i++) {
            img[i] = bytes.get(i);
        }
        BlobstoreService blobstoreService = BlobstoreServiceFactory.getBlobstoreService();
        String urlBlobstore = blobstoreService.createUploadUrl(""/blobstore-servlet?action=upload"");
        URL url = new URL(""http://localhost:8888"" + urlBlobstore);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setDoInput(true);
        connection.setDoOutput(true);
        connection.setRequestMethod(""POST"");
        connection.setRequestProperty(""Content-Type"", ""multipart/form-data;boundary=29772313"");
        OutputStream out = connection.getOutputStream();
        out.write(img);
        out.flush();
        out.close();
        System.out.println(connection.getResponseCode());
        System.out.println(connection.getResponseMessage());
        BufferedReader rd = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        String responseText = """";
        String line;
        while ((line = rd.readLine()) != null) {
            responseText += line;
        }
        out.close();
        rd.close();
        response.sendRedirect(""/blobstore-servlet?action=getPhoto&"" + responseText);
    }
",0
18326088,2,"    public void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        resp.setContentType(""text/html"");
        String year = req.getParameter(""year"").toString();
        String round = req.getParameter(""round"").toString();
        resp.getWriter().println(""<html><body>"");
        resp.getWriter().println(""Searching for : "" + year + "", "" + round + ""<br/>"");
        StringBuffer sb = new StringBuffer(""http://www.dfb.de/bliga/bundes/archiv/"");
        sb.append(year).append(""/xml/blm_e_"").append(round).append(""_"").append(year.substring(2, 4)).append("".xml"");
        resp.getWriter().println(sb.toString() + ""<br/><br/>"");
        try {
            URL url = new URL(sb.toString());
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer xml = new StringBuffer();
            String line;
            while ((line = reader.readLine()) != null) {
                xml.append(line);
            }
            Document document = DocumentHelper.parseText(xml.toString());
            List termine = document.selectNodes(""//ergx/termin"");
            int index = 1;
            for (Object termin : termine) {
                Element terminNode = (Element) termin;
                resp.getWriter().println(""Termin "" + index + "" : "" + terminNode.element(""datum"").getText() + ""<br/>"");
                resp.getWriter().println(""Heim:"" + terminNode.element(""teama"").getText() + ""<br/>"");
                resp.getWriter().println(""Gast:"" + terminNode.element(""teamb"").getText() + ""<br/>"");
                resp.getWriter().println(""Ergebnis:"" + terminNode.element(""punkte_a"").getText() + "":"" + terminNode.element(""punkte_b"").getText() + ""<br/>"");
                resp.getWriter().println(""<br/>"");
                index++;
            }
            resp.getWriter().println();
            resp.getWriter().println(""</body></html>"");
            reader.close();
        } catch (MalformedURLException ex) {
            throw new RuntimeException(ex);
        } catch (IOException ex) {
            throw new RuntimeException(ex);
        } catch (DocumentException ex) {
            throw new RuntimeException(ex);
        }
    }
",0
3175529,2,"    private static String connect(String apiURL, boolean secure) throws IOException {
        String baseUrl;
        if (secure) baseUrl = ""https://todoist.com/API/""; else baseUrl = ""http://todoist.com/API/"";
        URL url = new URL(baseUrl + apiURL);
        URLConnection c = url.openConnection();
        BufferedReader in = new BufferedReader(new InputStreamReader(c.getInputStream()));
        StringBuilder toReturn = new StringBuilder("""");
        String toAppend;
        while ((toAppend = in.readLine()) != null) toReturn.append(toAppend);
        return toReturn.toString();
    }
",0
7730595,2,"    public void appendFetch(IProgress progress, PrintWriter pw, String list, int from, int to) throws IOException {
        progress.start();
        try {
            File storage = new File(cacheDirectory.getValue(), ""mboxes"");
            storage.mkdirs();
            File mbox = new File(storage, list + ""-"" + from + ""-"" + to + "".mbox"");
            if (mbox.exists()) {
                BufferedReader in = new BufferedReader(new InputStreamReader(new ProgressInputStream(new FileInputStream(mbox), progress, 10000)));
                String line;
                while ((line = in.readLine()) != null) {
                    pw.write(line);
                    pw.write('\n');
                }
                in.close();
                return;
            }
            progress.setScale(100);
            IProgress subProgress1 = progress.getSub(75);
            URL url = getGmaneURL(list, from, to);
            BufferedReader in = new BufferedReader(new InputStreamReader(new ProgressInputStream(url.openStream(), subProgress1, 10000)));
            PrintWriter writeToMbox = new PrintWriter(mbox);
            int lines = 0;
            String line;
            while ((line = in.readLine()) != null) {
                lines++;
                if (line.matches(""^From .*$"") && !line.matches(""^From .*? .*[0-9][0-9]:[0-9][0-9]:[0-9][0-9].*$"")) {
                    line = "">"" + line;
                }
                writeToMbox.write(line);
                writeToMbox.write('\n');
            }
            in.close();
            writeToMbox.close();
            appendFetch(progress.getSub(25), pw, list, from, to);
        } finally {
            progress.done();
        }
    }
",0
6320837,2,"    public String getDocumentAt(String urlString) {
        StringBuffer document = new StringBuffer();
        try {
            URL url = new URL(urlString);
            URLConnection conn = url.openConnection();
            BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line = null;
            while ((line = reader.readLine()) != null) document.append(line + ""\n"");
            reader.close();
        } catch (MalformedURLException e) {
            System.out.println(""Unable to connect to URL: "" + urlString);
        } catch (IOException e) {
            System.out.println(""IOException when connecting to URL: "" + urlString);
        }
        return document.toString();
    }
",0
5456371,2,"    public MapInfo loadLocalMapData(String fileName) {
        MapInfo info = mapCacheLocal.get(fileName);
        if (info != null && info.getContent() == null) {
            try {
                BufferedReader bufferedreader;
                URL fetchUrl = new URL(localMapContextUrl, fileName);
                URLConnection urlconnection = fetchUrl.openConnection();
                if (urlconnection.getContentEncoding() != null) {
                    bufferedreader = new BufferedReader(new InputStreamReader(urlconnection.getInputStream(), urlconnection.getContentEncoding()));
                } else {
                    bufferedreader = new BufferedReader(new InputStreamReader(urlconnection.getInputStream(), ""utf-8""));
                }
                String line;
                StringBuilder mapContent = new StringBuilder();
                while ((line = bufferedreader.readLine()) != null) {
                    mapContent.append(line);
                    mapContent.append(""\n"");
                }
                info.setContent(mapContent.toString());
                GameMapImplementation gameMap = GameMapImplementation.createFromMapInfo(info);
            } catch (IOException _ex) {
                System.err.println(""HexTD::readFile:: Can't read from "" + fileName);
            }
        } else {
            System.err.println(""HexTD::readFile:: file not in cache: "" + fileName);
        }
        return info;
    }
",0
8988204,2,"    @Override
    public void onLoadingEnded() {
        if (m_frame != null) {
            try {
                String urltext = getDocument().getDocumentURI();
                URL url = new URL(urltext);
                InputStreamReader isr = new InputStreamReader(url.openStream());
                BufferedReader in = new BufferedReader(isr);
                String inputLine;
                urltext = null;
                url = null;
                m_content.clear();
                while ((inputLine = in.readLine()) != null) {
                    m_content.add(inputLine);
                }
                in.close();
                isr = null;
                in = null;
                inputLine = null;
                Action action = parseHtml();
                if (action.value() == Action.ACTION_BROWSER_LOADING_DONE && action.toString().equals(Action.COMMAND_CARD_PREVIEW)) {
                    FileUtils.copyURLToFile(new URL(getCardImageURL(m_card.MID)), new File(m_card.getImagePath()));
                    fireActionEvent(MainWindow.class, action.value(), action.toString());
                }
                action = null;
            } catch (Exception ex) {
                Dialog.ErrorBox(m_frame, ex.getStackTrace());
            }
        }
        m_loading = false;
    }
",0
5770148,2,"    public static void pingSearchEngine(String engineURL) throws MalformedURLException, UnsupportedEncodingException {
        if ((ConfigurationManager.getProperty(""http.proxy.host"") != null) && (ConfigurationManager.getProperty(""http.proxy.port"") != null)) {
            System.setProperty(""proxySet"", ""true"");
            System.setProperty(""proxyHost"", ConfigurationManager.getProperty(""http.proxy.host""));
            System.getProperty(""proxyPort"", ConfigurationManager.getProperty(""http.proxy.port""));
        }
        String sitemapURL = ConfigurationManager.getProperty(""dspace.url"") + ""/sitemap"";
        URL url = new URL(engineURL + URLEncoder.encode(sitemapURL, ""UTF-8""));
        try {
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            StringBuffer resp = new StringBuffer();
            while ((inputLine = in.readLine()) != null) {
                resp.append(inputLine).append(""\n"");
            }
            in.close();
            if (connection.getResponseCode() == 200) {
                log.info(""Pinged "" + url.toString() + "" successfully"");
            } else {
                log.warn(""Error response pinging "" + url.toString() + "":\n"" + resp);
            }
        } catch (IOException e) {
            log.warn(""Error pinging "" + url.toString(), e);
        }
    }
",0
17019839,2,"    public Set<Plugin<?>> loadPluginMetaData() throws PluginRegistryException {
        try {
            final Enumeration<URL> urls = JavaSystemHelper.getResources(pluginMetaInfPath);
            pluginsSet.clear();
            if (urls != null) {
                while (urls.hasMoreElements()) {
                    final URL url = urls.nextElement();
                    echoMessages.add(PluginMessageBundle.getMessage(""plugin.info.visitor.resource.found"", ""interfaces"", url.getPath()));
                    InputStream resourceInput = null;
                    Reader reader = null;
                    BufferedReader buffReader = null;
                    String line;
                    try {
                        resourceInput = url.openStream();
                        reader = new InputStreamReader(resourceInput);
                        buffReader = new BufferedReader(reader);
                        line = buffReader.readLine();
                        while (line != null) {
                            try {
                                if (!StringHelper.isEmpty(line)) {
                                    echoMessages.add(PluginMessageBundle.getMessage(""plugin.info.visitor.resource.processing"", ""interface"", line));
                                    pluginsSet.add(inspectPlugin(Class.forName(line.trim())));
                                }
                                line = buffReader.readLine();
                            } catch (final ClassNotFoundException cnfe) {
                                throw new PluginRegistryException(""plugin.error.load.classnotfound"", cnfe, pluginMetaInfPath, line);
                            }
                        }
                    } catch (final IOException ioe) {
                        throw new PluginRegistryException(""plugin.error.load.ioe"", ioe, url.getFile() + ""\n"" + url.toString(), ioe.getMessage());
                    } finally {
                        if (buffReader != null) {
                            buffReader.close();
                        }
                        if (reader != null) {
                            reader.close();
                        }
                        if (resourceInput != null) {
                            resourceInput.close();
                        }
                    }
                }
            }
            return Collections.unmodifiableSet(pluginsSet);
        } catch (final IOException ioe) {
            throw new PluginRegistryException(""plugin.error.load.ioe"", ioe, pluginMetaInfPath, ioe.getMessage());
        }
    }
",0
8665322,2,"    public Vector<String> getVoiceServersNames() {
        Vector<String> result = new Vector<String>();
        boolean serverline = false;
        String line;
        String[] splitline;
        try {
            URL url = new URL(voiceaddress);
            URLConnection connection = url.openConnection();
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            while ((line = reader.readLine()) != null) {
                if (serverline) {
                    splitline = line.split("":"");
                    result.add(splitline[0]);
                }
                if (line.startsWith(""!VOICE SERVERS"")) {
                    serverline = true;
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return result;
    }
",0
6993344,2,"    @Override
    public void parse() throws DocumentException, IOException {
        URL url = new URL(this.XMLAddress);
        URLConnection con = url.openConnection();
        BufferedReader bStream = new BufferedReader(new InputStreamReader(con.getInputStream()));
        String str;
        bStream.readLine();
        while ((str = bStream.readLine()) != null) {
            String[] tokens = str.split(""(\\s+)"");
            String charCode = tokens[0].replaceAll(""([0-9+])"", """");
            Float value = Float.parseFloat(tokens[2].trim().replace("","", "".""));
            ResultUnit unit = new ResultUnit(charCode, value, DEFAULT_MULTIPLIER);
            this.set.add(unit);
        }
    }
",0
3662475,2,"    public static String getHtml(DefaultHttpClient httpclient, String url, String encode) throws IOException {
        InputStream input = null;
        HttpGet get = new HttpGet(url);
        HttpResponse res = httpclient.execute(get);
        StatusLine status = res.getStatusLine();
        if (status.getStatusCode() != STATUSCODE_200) {
            throw new RuntimeException(""50001"");
        }
        if (res.getEntity() == null) {
            return """";
        }
        input = res.getEntity().getContent();
        InputStreamReader reader = new InputStreamReader(input, encode);
        BufferedReader bufReader = new BufferedReader(reader);
        String tmp = null, html = """";
        while ((tmp = bufReader.readLine()) != null) {
            html += tmp;
        }
        if (input != null) {
            input.close();
        }
        return html;
    }
",0
23205,2,"    public static BufferedReader getUserSolveStream(String name) throws IOException {
        BufferedReader in;
        try {
            URL url = new URL(""http://www.spoj.pl/status/"" + name.toLowerCase() + ""/signedlist/"");
            in = new BufferedReader(new InputStreamReader(url.openStream()));
        } catch (MalformedURLException e) {
            in = null;
            throw e;
        }
        return in;
    }
",0
7529744,2,"    public Document retrieveDefinition(String uri) throws IOException, UnvalidResponseException {
        if (!isADbPediaURI(uri)) throw new IllegalArgumentException(""Not a DbPedia Resource URI"");
        String rawDataUri = fromResourceToRawDataUri(uri);
        URL url = new URL(rawDataUri);
        URLConnection conn = url.openConnection();
        logger.debug("".conn open"");
        conn.setDoOutput(true);
        BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        logger.debug("".resp obtained"");
        StringBuffer responseBuffer = new StringBuffer();
        String line;
        while ((line = rd.readLine()) != null) {
            responseBuffer.append(line);
            responseBuffer.append(NEWLINE);
        }
        rd.close();
        logger.debug("".done"");
        try {
            return documentParser.parse(responseBuffer.toString());
        } catch (SAXException e) {
            throw new UnvalidResponseException(""Incorrect XML document"", e);
        }
    }
",0
4249821,2,"    private String loadStatusResult() {
        try {
            URL url = new URL(getServerUrl());
            InputStream input = url.openStream();
            InputStreamReader is = new InputStreamReader(input, ""utf-8"");
            BufferedReader reader = new BufferedReader(is);
            StringBuffer buffer = new StringBuffer();
            String line = """";
            while ((line = reader.readLine()) != null) {
                buffer.append(line);
            }
            return buffer.toString();
        } catch (MalformedURLException e1) {
            e1.printStackTrace();
            return null;
        } catch (IOException e2) {
            e2.printStackTrace();
            return null;
        }
    }
",0
8883151,2,"    protected String getTextResponse(String address, boolean ignoreResponseCode) throws Exception {
        URL url = new URL(address);
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setUseCaches(false);
        BufferedReader in = null;
        try {
            con.connect();
            if (!ignoreResponseCode) {
                assertEquals(HttpURLConnection.HTTP_OK, con.getResponseCode());
            }
            in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            StringBuilder builder = new StringBuilder();
            String inputLine = null;
            while ((inputLine = in.readLine()) != null) {
                builder.append(inputLine);
            }
            return builder.toString();
        } finally {
            if (in != null) {
                in.close();
            }
            con.disconnect();
        }
    }
",0
12255573,2,"                        public Constructor run() throws Exception {
                            String path = ""META-INF/services/"" + BeanletApplicationContext.class.getName();
                            ClassLoader loader = Thread.currentThread().getContextClassLoader();
                            final Enumeration<URL> urls;
                            if (loader == null) {
                                urls = BeanletApplicationContext.class.getClassLoader().getResources(path);
                            } else {
                                urls = loader.getResources(path);
                            }
                            while (urls.hasMoreElements()) {
                                URL url = urls.nextElement();
                                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                                try {
                                    String className = null;
                                    while ((className = reader.readLine()) != null) {
                                        final String name = className.trim();
                                        if (!name.startsWith(""#"") && !name.startsWith("";"") && !name.startsWith(""//"")) {
                                            final Class<?> cls;
                                            if (loader == null) {
                                                cls = Class.forName(name);
                                            } else {
                                                cls = Class.forName(name, true, loader);
                                            }
                                            int m = cls.getModifiers();
                                            if (BeanletApplicationContext.class.isAssignableFrom(cls) && !Modifier.isAbstract(m) && !Modifier.isInterface(m)) {
                                                Constructor constructor = cls.getDeclaredConstructor();
                                                if (!Modifier.isPublic(constructor.getModifiers())) {
                                                    constructor.setAccessible(true);
                                                }
                                                return constructor;
                                            } else {
                                                throw new ClassCastException(cls.getName());
                                            }
                                        }
                                    }
                                } finally {
                                    reader.close();
                                }
                            }
                            throw new BeanletApplicationException(""No "" + ""BeanletApplicationContext implementation "" + ""found."");
                        }
",0
7275980,2,"    public static void main(String[] args) throws IOException {
        PostParameter a1 = new PostParameter(""v"", Utils.encode(""1.0""));
        PostParameter a2 = new PostParameter(""api_key"", Utils.encode(RenRenConstant.apiKey));
        PostParameter a3 = new PostParameter(""method"", Utils.encode(""notifications.send""));
        PostParameter a4 = new PostParameter(""call_id"", System.nanoTime());
        PostParameter a5 = new PostParameter(""session_key"", Utils.encode(""5.22af9ee9ad842c7eb52004ece6e96b10.86400.1298646000-350727914""));
        PostParameter a6 = new PostParameter(""to_ids"", Utils.encode(""350727914""));
        PostParameter a7 = new PostParameter(""notification"", ""又到了要睡觉的时间了。"");
        PostParameter a8 = new PostParameter(""format"", Utils.encode(""JSON""));
        RenRenPostParameters ps = new RenRenPostParameters(Utils.encode(RenRenConstant.secret));
        ps.addParameter(a1);
        ps.addParameter(a2);
        ps.addParameter(a3);
        ps.addParameter(a4);
        ps.addParameter(a5);
        ps.addParameter(a6);
        ps.addParameter(a7);
        ps.addParameter(a8);
        System.out.println(RenRenConstant.apiUrl + ""?"" + ps.generateUrl());
        URL url = new URL(RenRenConstant.apiUrl + ""?"" + ps.generateUrl());
        HttpURLConnection request = (HttpURLConnection) url.openConnection();
        request.setDoOutput(true);
        request.setRequestMethod(""POST"");
        System.out.println(""Sending request..."");
        request.connect();
        System.out.println(""Response: "" + request.getResponseCode() + "" "" + request.getResponseMessage());
        BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));
        String b = null;
        while ((b = reader.readLine()) != null) {
            System.out.println(b);
        }
    }
",0
8018390,2,"    protected String getCache() throws IOException {
        if (cache == null) {
            URL url = ((URI) hasContent()).toURL();
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) ;
            in.close();
            cache = inputLine;
        }
        return cache;
    }
",0
6861489,2,"    public String download(String urlString) {
        StringBuilder builder = new StringBuilder();
        BufferedReader reader = null;
        try {
            URL url = new URL(urlString);
            HttpURLConnection urlConn = (HttpURLConnection) url.openConnection();
            reader = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
            String line = null;
            while ((line = reader.readLine()) != null) {
                builder.append(line);
            }
        } catch (MalformedURLException e) {
            Log.e(""exception"", e.getMessage());
        } catch (IOException e) {
            Log.e(""exception"", e.getMessage());
        } finally {
            try {
                reader.close();
            } catch (IOException e) {
                Log.e(""exception"", e.getMessage());
            }
        }
        return builder.toString();
    }
",0
10168255,2,"    private void extractByParsingHtml(String refererURL, String requestURL) throws MalformedURLException, IOException {
        URL url = new URL(refererURL);
        InputStream is = url.openStream();
        mRefererURL = refererURL;
        if (requestURL.startsWith(""http://www."")) {
            mRequestURLWWW = requestURL;
            mRequestURL = ""http://"" + mRequestURLWWW.substring(11);
        } else {
            mRequestURL = requestURL;
            mRequestURLWWW = ""http://www."" + mRequestURL.substring(7);
        }
        Parser parser = (new HTMLEditorKit() {

            public Parser getParser() {
                return super.getParser();
            }
        }).getParser();
        StringBuffer sb = new StringBuffer();
        InputStreamReader isr = new InputStreamReader(is);
        BufferedReader br = new BufferedReader(isr);
        try {
            String line = null;
            while ((line = br.readLine()) != null) {
                sb.append(line);
            }
        } finally {
            br.close();
        }
        StringReader sr = new StringReader(sb.toString());
        parser.parse(sr, new LinkbackCallback(), true);
        if (mStart != 0 && mEnd != 0 && mEnd > mStart) {
            mExcerpt = sb.toString().substring(mStart, mEnd);
            mExcerpt = Utilities.removeHTML(mExcerpt);
            if (mExcerpt.length() > mMaxExcerpt) {
                mExcerpt = mExcerpt.substring(0, mMaxExcerpt) + ""..."";
            }
        }
        if (mTitle.startsWith("">"") && mTitle.length() > 1) {
            mTitle = mTitle.substring(1);
        }
    }
",0
9353181,2,"    JSONResponse execute() throws ServerException, RtmApiException, IOException {
        HttpClient httpclient = new DefaultHttpClient();
        URI uri;
        try {
            uri = new URI(this.request.getUrl());
            HttpPost httppost = new HttpPost(uri);
            HttpResponse response = httpclient.execute(httppost);
            InputStream is = response.getEntity().getContent();
            try {
                StringBuilder sb = new StringBuilder();
                BufferedReader r = new BufferedReader(new InputStreamReader(new DoneHandlerInputStream(is)));
                for (String line = r.readLine(); line != null; line = r.readLine()) {
                    sb.append(line);
                }
                return new JSONResponse(sb.toString());
            } finally {
                is.close();
            }
        } catch (URISyntaxException e) {
            throw new RtmApiException(e.getMessage());
        } catch (ClientProtocolException e) {
            throw new RtmApiException(e.getMessage());
        }
    }
",0
6558022,2,"    public static String CheckUrl(String urlvalue) {
        String inputLine = """";
        try {
            URL url = new URL(urlvalue);
            HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            inputLine = in.readLine().toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return inputLine;
    }
",0
13997019,2,"    public String read(String url) throws IOException {
        URL myurl = new URL(url);
        BufferedReader in = new BufferedReader(new InputStreamReader(myurl.openStream()));
        StringBuffer sb = new StringBuffer();
        String inputLine;
        while ((inputLine = in.readLine()) != null) sb.append(inputLine);
        in.close();
        return sb.toString();
    }
",0
12082135,2,"    public static Set<Province> getProvincias(String pURL) {
        Set<Province> result = new HashSet<Province>();
        String iniProv = ""<prov>"";
        String finProv = ""</prov>"";
        String iniNomProv = ""<np>"";
        String finNomProv = ""</np>"";
        String iniCodigo = ""<cpine>"";
        String finCodigo = ""</cpine>"";
        int ini, fin;
        try {
            URL url = new URL(pURL);
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            Province provincia;
            while ((str = br.readLine()) != null) {
                if (str.contains(iniProv)) {
                    provincia = new Province();
                    while ((str = br.readLine()) != null && !str.contains(finProv)) {
                        if (str.contains(iniNomProv)) {
                            ini = str.indexOf(iniNomProv) + iniNomProv.length();
                            fin = str.indexOf(finNomProv);
                            provincia.setDescription(str.substring(ini, fin));
                        }
                        if (str.contains(iniCodigo)) {
                            ini = str.indexOf(iniCodigo) + iniCodigo.length();
                            fin = str.indexOf(finCodigo);
                            provincia.setCodeProvince(Integer.parseInt(str.substring(ini, fin)));
                        }
                    }
                    result.add(provincia);
                }
            }
            br.close();
        } catch (Exception e) {
            System.err.println(e);
        }
        return result;
    }
",0
14187481,2,"    protected void yesAction() {
        try {
            String result = getSurveyURL() + ""&buildtime="" + Version.getBuildTimeString();
            LOG.log(result);
            if (!maySubmitSurvey()) {
                return;
            }
            BufferedReader br = null;
            try {
                URL url = new URL(result);
                InputStream urls = url.openStream();
                InputStreamReader is = new InputStreamReader(urls);
                br = new BufferedReader(is);
                String line;
                StringBuilder sb = new StringBuilder();
                while ((line = br.readLine()) != null) {
                    sb.append(line);
                    sb.append(System.getProperty(""line.separator""));
                }
                LOG.log(sb.toString());
            } catch (IOException e) {
                LOG.log(""Could not open URL using Java"", e);
                try {
                    PlatformFactory.ONLY.openURL(new URL(result));
                    DrJava.getConfig().setSetting(OptionConstants.LAST_DRJAVA_SURVEY_RESULT, result);
                } catch (IOException e2) {
                    LOG.log(""Could not open URL using web browser"", e2);
                }
            } finally {
                try {
                    if (br != null) br.close();
                } catch (IOException e) {
                }
            }
        } finally {
            noAction();
        }
    }
",0
20602651,2,"    protected void readURL(URL url) {
        InputStream istream = null;
        InputStreamReader isr = null;
        BufferedReader in = null;
        try {
            istream = url.openStream();
            isr = new InputStreamReader(istream);
            in = new BufferedReader(isr);
            String line = in.readLine();
            while (null != line) {
                System.out.println(line);
                line = in.readLine();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            IOUtilities.close(in);
            IOUtilities.close(isr);
            IOUtilities.close(istream);
        }
    }
",0
14090536,2,"    private String[] read(String path) throws Exception {
        final String[] names = { ""index.txt"", """", ""index.html"", ""index.htm"" };
        String[] list = null;
        for (int i = 0; i < names.length; i++) {
            URL url = new URL(path + names[i]);
            try {
                BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
                StringBuffer sb = new StringBuffer();
                String s = null;
                while ((s = in.readLine()) != null) {
                    s = s.trim();
                    if (s.length() > 0) {
                        sb.append(s + ""\n"");
                    }
                }
                in.close();
                if (sb.indexOf(""<"") != -1 && sb.indexOf("">"") != -1) {
                    List links = LinkExtractor.scan(url, sb.toString());
                    HashSet set = new HashSet();
                    int prefixLen = path.length();
                    for (Iterator it = links.iterator(); it.hasNext(); ) {
                        String link = it.next().toString();
                        if (!link.startsWith(path)) {
                            continue;
                        }
                        link = link.substring(prefixLen);
                        int idx = link.indexOf(""/"");
                        int idxq = link.indexOf(""?"");
                        if (idx > 0 && (idxq == -1 || idx < idxq)) {
                            set.add(link.substring(0, idx + 1));
                        } else {
                            set.add(link);
                        }
                    }
                    list = (String[]) set.toArray(new String[0]);
                } else {
                    list = sb.toString().split(""\n"");
                }
                return list;
            } catch (FileNotFoundException e) {
                e.printStackTrace();
                continue;
            }
        }
        return new String[0];
    }
",0
12863275,2,"    @Override
    protected Integer doInBackground() throws Exception {
        int numOfRows = 0;
        combinationMap = new HashMap<AnsweredQuestion, Integer>();
        combinationMapReverse = new HashMap<Integer, AnsweredQuestion>();
        LinkedHashSet<AnsweredQuestion> answeredQuestionSet = new LinkedHashSet<AnsweredQuestion>();
        LinkedHashSet<Integer> studentSet = new LinkedHashSet<Integer>();
        final String delimiter = "";"";
        final String typeToProcess = ""F"";
        String line;
        String[] chunks = new String[9];
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), ""ISO-8859-2""));
            in.readLine();
            while ((line = in.readLine()) != null) {
                chunks = line.split(delimiter);
                numOfRows++;
                if (chunks[2].equals(typeToProcess)) {
                    answeredQuestionSet.add(new AnsweredQuestion(chunks[4], chunks[5]));
                    studentSet.add(new Integer(chunks[0]));
                }
            }
            in.close();
            int i = 0;
            Integer I;
            for (AnsweredQuestion pair : answeredQuestionSet) {
                I = new Integer(i++);
                combinationMap.put(pair, I);
                combinationMapReverse.put(I, pair);
            }
            matrix = new SparseObjectMatrix2D(answeredQuestionSet.size(), studentSet.size());
            int lastStudentNumber = -1;
            AnsweredQuestion pair;
            in = new BufferedReader(new InputStreamReader(url.openStream(), ""ISO-8859-2""));
            in.readLine();
            while ((line = in.readLine()) != null) {
                chunks = line.split(delimiter);
                pair = null;
                if (chunks[2].equals(typeToProcess)) {
                    if (Integer.parseInt(chunks[0]) != lastStudentNumber) {
                        lastStudentNumber++;
                    }
                    pair = new AnsweredQuestion(chunks[4], chunks[5]);
                    if (combinationMap.containsKey(pair)) {
                        matrix.setQuick(combinationMap.get(pair), lastStudentNumber, Boolean.TRUE);
                    }
                }
            }
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        supportVector = new int[combinationMap.size()];
        ObjectMatrix1D row = null;
        for (int i = 0; i < combinationMap.size(); i++) {
            row = matrix.viewRow(i);
            int sum = 0;
            for (int k = 0; k < row.size(); k++) {
                if (row.getQuick(k) != null && row.getQuick(k).equals(Boolean.TRUE)) {
                    sum++;
                }
            }
            supportVector[i] = sum;
        }
        applet.combinationMap = this.combinationMap;
        applet.combinationMapReverse = this.combinationMapReverse;
        applet.matrix = this.matrix;
        applet.supportVector = supportVector;
        System.out.println(""data loaded."");
        return null;
    }
",0
6829523,2,"    public String getHtmlCode(String urlString) {
        StringBuffer result = new StringBuffer();
        BufferedReader in = null;
        try {
            URL url = new URL((urlString));
            URLConnection con = url.openConnection();
            in = new BufferedReader(new InputStreamReader(con.getInputStream(), ""ISO-8859-1""));
            String line = null;
            while ((line = in.readLine()) != null) {
                result.append(line + ""\r\n"");
            }
            in.close();
        } catch (MalformedURLException e) {
            System.out.println(""Unable to connect to URL: "" + urlString);
        } catch (IOException e) {
            System.out.println(""IOException when connecting to URL: "" + urlString);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (Exception ex) {
                    System.out.println(""Exception throws at finally close reader when connecting to URL: "" + urlString);
                }
            }
        }
        return result.toString();
    }
",0
7468318,2,"    private List<Intrebare> citesteIntrebari() throws IOException {
        ArrayList<Intrebare> intrebari = new ArrayList<Intrebare>();
        try {
            URL url = new URL(getCodeBase(), ""../intrebari.txt"");
            BufferedReader reader = new BufferedReader(new InputStreamReader((url.openStream())));
            String intrebare;
            while ((intrebare = reader.readLine()) != null) {
                Collection<String> raspunsuri = new ArrayList<String>();
                Collection<String> predicate = new ArrayList<String>();
                String raspuns = """";
                while (!"""".equals(raspuns = reader.readLine())) {
                    raspunsuri.add(raspuns);
                    predicate.add(reader.readLine());
                }
                Intrebare i = new Intrebare(intrebare, raspunsuri.toArray(new String[raspunsuri.size()]), predicate.toArray(new String[predicate.size()]));
                intrebari.add(i);
            }
        } catch (ArgumentExcetpion e) {
            e.printStackTrace();
        }
        return intrebari;
    }
",0
1142777,2,"    public LinkedList<NameValuePair> getQuestion() {
        InputStream is = null;
        String result = """";
        LinkedList<NameValuePair> question = new LinkedList<NameValuePair>();
        try {
            HttpClient httpclient = new DefaultHttpClient();
            HttpPost httppost = new HttpPost(domain);
            httppost.setEntity(new UrlEncodedFormEntity(library));
            HttpResponse response = httpclient.execute(httppost);
            HttpEntity entity = response.getEntity();
            is = entity.getContent();
        } catch (Exception e) {
            Log.e(""log_tag"", ""Error in http connection "" + e.toString());
        }
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(is, ""iso-8859-1""), 8);
            StringBuilder sb = new StringBuilder();
            String line = null;
            while ((line = reader.readLine()) != null) {
                sb.append(line);
            }
            is.close();
            result = sb.toString();
            if (result.equals(""null,"")) {
                return null;
            }
        } catch (Exception e) {
            Log.e(""log_tag"", ""Error converting result "" + e.toString());
        }
        try {
            JSONObject json = new JSONObject(result);
            JSONArray data = json.getJSONArray(""data"");
            JSONObject quest = data.getJSONObject(0);
            question.add(new BasicNameValuePair(""q"", quest.getString(""q"")));
            question.add(new BasicNameValuePair(""a"", quest.getString(""a"")));
            question.add(new BasicNameValuePair(""b"", quest.getString(""b"")));
            question.add(new BasicNameValuePair(""c"", quest.getString(""c"")));
            question.add(new BasicNameValuePair(""d"", quest.getString(""d"")));
            question.add(new BasicNameValuePair(""correct"", quest.getString(""correct"")));
            return question;
        } catch (JSONException e) {
            Log.e(""log_tag"", ""Error parsing data "" + e.toString());
        }
        return null;
    }
",0
7542014,2,"    public static String[] parsePLS(String strURL, Context c) {
        URL url;
        URLConnection urlConn = null;
        String TAG = ""parsePLS"";
        Vector<String> radio = new Vector<String>();
        final String filetoken = ""file"";
        final String SPLITTER = ""="";
        try {
            url = new URL(strURL);
            urlConn = url.openConnection();
            Log.d(TAG, ""Got data"");
        } catch (IOException ioe) {
            Log.e(TAG, ""Could not connect to "" + strURL);
        }
        try {
            DataInputStream in = new DataInputStream(urlConn.getInputStream());
            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            String strLine;
            while ((strLine = br.readLine()) != null) {
                String temp = strLine.toLowerCase();
                Log.d(TAG, strLine);
                if (temp.startsWith(filetoken)) {
                    String[] s = Pattern.compile(SPLITTER).split(temp);
                    radio.add(s[1]);
                    Log.d(TAG, ""Found audio "" + s[1]);
                }
            }
            br.close();
            in.close();
        } catch (Exception e) {
            Log.e(TAG, ""Trouble reading file: "" + e.getMessage());
        }
        String[] t = new String[0];
        String[] r = null;
        if (radio.size() != 0) {
            r = (String[]) radio.toArray(t);
            Log.d(TAG, ""Found total: "" + String.valueOf(r.length));
        }
        return r;
    }
",0
7406942,2,"    private void getXMLData() {
        String result = null;
        URL url = null;
        URLConnection conn = null;
        BufferedReader rd = null;
        StringBuffer sb = new StringBuffer();
        String line;
        try {
            url = new URL(this.url);
            conn = url.openConnection();
            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            while ((line = rd.readLine()) != null) {
                sb.append(line + ""\n"");
            }
            rd.close();
            result = sb.toString();
        } catch (MalformedURLException e) {
            log.error(""URL was malformed: {}"", url, e);
        } catch (IOException e) {
            log.error(""IOException thrown: {}"", url, e);
        }
        this.xmlString = result;
    }
",0
7802218,2,"    private static List retrieveQuotes(Report report, Symbol symbol, String suffix, TradingDate startDate, TradingDate endDate) throws ImportExportException {
        List quotes = new ArrayList();
        String URLString = constructURL(symbol, suffix, startDate, endDate);
        EODQuoteFilter filter = new YahooEODQuoteFilter(symbol);
        PreferencesManager.ProxyPreferences proxyPreferences = PreferencesManager.getProxySettings();
        try {
            URL url = new URL(URLString);
            InputStreamReader input = new InputStreamReader(url.openStream());
            BufferedReader bufferedInput = new BufferedReader(input);
            String line = bufferedInput.readLine();
            while (line != null) {
                line = bufferedInput.readLine();
                if (line != null) {
                    try {
                        EODQuote quote = filter.toEODQuote(line);
                        quotes.add(quote);
                        verify(report, quote);
                    } catch (QuoteFormatException e) {
                        report.addError(Locale.getString(""YAHOO_DISPLAY_URL"") + "":"" + symbol + "":"" + Locale.getString(""ERROR"") + "": "" + e.getMessage());
                    }
                }
            }
            bufferedInput.close();
        } catch (BindException e) {
            throw new ImportExportException(Locale.getString(""UNABLE_TO_CONNECT_ERROR"", e.getMessage()));
        } catch (ConnectException e) {
            throw new ImportExportException(Locale.getString(""UNABLE_TO_CONNECT_ERROR"", e.getMessage()));
        } catch (UnknownHostException e) {
            throw new ImportExportException(Locale.getString(""UNKNOWN_HOST_ERROR"", e.getMessage()));
        } catch (NoRouteToHostException e) {
            throw new ImportExportException(Locale.getString(""DESTINATION_UNREACHABLE_ERROR"", e.getMessage()));
        } catch (MalformedURLException e) {
            throw new ImportExportException(Locale.getString(""INVALID_PROXY_ERROR"", proxyPreferences.host, proxyPreferences.port));
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
            throw new ImportExportException(Locale.getString(""ERROR_DOWNLOADING_QUOTES""));
        }
        return quotes;
    }
",0
8181418,2,"    public static final byte[] getBytesFromUrl(final String urlString) throws BT747Exception {
        byte[] result = null;
        try {
            final URL url = new URL(urlString);
            final URLConnection urlc = url.openConnection();
            urlc.setConnectTimeout(timeout);
            urlc.setReadTimeout(timeout);
            final InputStream ins = urlc.getInputStream();
            final ByteArrayOutputStream bout = new ByteArrayOutputStream(120 * 1024);
            final byte[] buf = new byte[1024];
            while (true) {
                final int n = ins.read(buf);
                if (n == -1) {
                    break;
                }
                bout.write(buf, 0, n);
            }
            result = bout.toByteArray();
            bout.close();
        } catch (final Exception e) {
            throw new BT747Exception(I18N.i18n(""Problem downloading AGPS data.""), e);
        }
        return result;
    }
",0
2940068,2,"    public void run() {
        checkupdates.BetaST.setText("""");
        checkupdates.stableST.setText("""");
        
        String[] s = new String[7];
       int i=0;
        try {
            
            URL url = new URL(""http://memorize-words.sourceforge.net/latest.txt"");
            
            BufferedReader in = new BufferedReader(new
                    InputStreamReader(url.openStream()));
            String str;
           
            while (((str = in.readLine()) != null)&&(i<7)) {
                
                s[i]=str;
                i++;
            }
            in.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
       if (i<5) 
       { checkupdates.CheckBT.setEnabled(true);
           return;
       }
       //S[0]=latest Beta version
       //S[1]=latest Stable version
       //s[2]=Beta version download path
       //s[3]=Stable version download path
       //s[4]= Beta name
       //s[5]=Stable name
       boolean updated=false;
       if ((MF.CurVersion<Integer.parseInt(s[0]))&&(checkupdates.BetaCHK.isSelected()))
       {
       checkupdates.BetaST.setText(""<HTML>A newer BETA version (<b>""+s[4]+""</b>) is available at<BR> <a href=''>""+s[2]+""</a></HTML>"");
       updated=true;
       checkupdates.hasBeta=true;
       checkupdates.BetaURL=s[2];
       }else
           checkupdates.BetaST.setText("""");
           
       if ((MF.CurVersion<Integer.parseInt(s[1]))&&(checkupdates.StableCHK.isSelected()))
       {
       checkupdates.stableST.setText(""<HTML>A newer STABLE version (<b>""+s[5]+""</b>) is available at<BR> <a href=''>""+s[3]+""</a></HTML>"");
       updated=true;
       checkupdates.hasStable=true;
       checkupdates.StableURL=s[3];
       }
       else
           checkupdates.stableST.setText("""");
       
       if (updated)
           checkupdates.setVisible(true);
       checkupdates.CheckBT.setEnabled(true);
       // ""A newer stable version (memorize-words 1-2-2) is available at http://""
       //   MF.CurVersion;
    }
",0
12894191,2,"    @Override
    public void doHandler(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        String directURL = request.getRequestURL().toString();
        response.setCharacterEncoding(""gbk"");
        PrintWriter out = response.getWriter();
        try {
            directURL = urlTools.urlFilter(directURL, true);
            URL url = new URL(directURL);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), ""gbk""));
            String line;
            while ((line = in.readLine()) != null) {
                out.println(line);
            }
            in.close();
        } catch (Exception e) {
            out.println(""file not find"");
        }
        out.flush();
    }
",0
9054825,2,"    public List<BadassEntry> parse() {
        mBadassEntries = new ArrayList<BadassEntry>();
        try {
            URL url = new URL(mUrl);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod(""GET"");
            connection.setDoOutput(true);
            connection.connect();
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String line;
            boolean flag1 = false;
            while ((line = reader.readLine()) != null) {
                line = line.trim();
                if (!flag1 && line.contains(START_PARSE)) flag1 = true;
                if (flag1 && line.contains(STOP_PARSE)) break;
                if (flag1) {
                    if (line.contains(ENTRY_HINT)) {
                        parseBadass(line);
                    }
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return mBadassEntries;
    }
",0
22421536,2,"    private boolean loadSource(URL url) {
        if (url == null) {
            if (sourceURL != null) {
                sourceCodeLinesList.clear();
            }
            return false;
        } else {
            if (url.equals(sourceURL)) {
                return true;
            } else {
                sourceCodeLinesList.clear();
                try {
                    BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
                    String line;
                    while ((line = br.readLine()) != null) {
                        sourceCodeLinesList.addElement(line.replaceAll(""\t"", ""   ""));
                    }
                    br.close();
                    return true;
                } catch (IOException e) {
                    System.err.println(""Could not load source at "" + url);
                    return false;
                }
            }
        }
    }
",0
4080688,2,"    public static String getStringFromAFileAtURL(String anURL) {
        String htmlCode = ""<html><body></body></html>"";
        try {
            URL url = new URL(anURL);
            URLConnection urlConnection = url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            String inputLine = """";
            htmlCode = """";
            while ((inputLine = in.readLine()) != null) htmlCode += inputLine + ""\n"";
            in.close();
        } catch (Exception e) {
            logs.info(""URLResolver : lien mort"");
            JOptionPane.showMessageDialog(null, ""lien mort"");
            return ""<html><body></body></html>"";
        }
        return checkXMLTagsLowerCase(htmlCode);
    }
",0
19166563,2,"    private String doSearch(String query) {
        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append(""http://boss.yahooapis.com/ysearch/web/v1/"").append(query).append(""?appid=wGsFV_DV34EwXnC.2Bt_Ql8Kcir_HmrxMzWUF2fv64CA8ha7e4zgudqXFA8K_J4-&format=xml&filter=-porn"");
        try {
            URL url = new URL(queryBuilder.toString());
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            StringBuffer buffer = new StringBuffer();
            while ((line = reader.readLine()) != null) {
                buffer.append(line);
            }
            reader.close();
            return safeParseXml(buffer.toString());
        } catch (MalformedURLException e) {
            log.error(""The used url is not right : "" + queryBuilder.toString(), e);
            return ""The used url is not right."";
        } catch (IOException e) {
            log.error(""Problem obtaining search results, connection maybe?"", e);
            return ""Problem obtaining search results, connection maybe?"";
        }
    }
",0
8181035,2,"    private String getData(String method, String arg) {
        try {
            URL url;
            String str;
            StringBuilder strBuilder;
            BufferedReader stream;
            url = new URL(API_BASE_URL + ""/2.1/"" + method + ""/en/xml/"" + API_KEY + ""/"" + URLEncoder.encode(arg, ""UTF-8""));
            stream = new BufferedReader(new InputStreamReader(url.openStream()));
            strBuilder = new StringBuilder();
            while ((str = stream.readLine()) != null) {
                strBuilder.append(str);
            }
            stream.close();
            return strBuilder.toString();
        } catch (MalformedURLException e) {
            return null;
        } catch (IOException e) {
            return null;
        }
    }
",0
9479564,2,"    public String sendGetRequest(String endpoint, String requestParameters, String username, String password) throws Exception {
        String result = null;
        if (endpoint.startsWith(""http://"")) {
            try {
                String urlStr = endpoint;
                if (requestParameters != null && requestParameters.length() > 0) {
                    urlStr += ""?"" + requestParameters;
                }
                URL url = new URL(urlStr);
                URLConnection conn = url.openConnection();
                String userPassword = username + "":"" + password;
                byte[] encoding = org.apache.commons.codec.binary.Base64.encodeBase64(userPassword.getBytes());
                String authStringEnc = new String(encoding);
                log.debug(""Base64 encoded auth string: '"" + authStringEnc + ""'"");
                conn.setRequestProperty(""Authorization"", ""Basic "" + authStringEnc);
                BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                StringBuffer sb = new StringBuffer();
                String line;
                while ((line = rd.readLine()) != null) {
                    sb.append(line);
                }
                rd.close();
                result = sb.toString();
            } catch (Throwable e) {
                throw new Exception(""problem issuing get to URL"", e);
            }
        }
        return result;
    }
",0
5335270,2,"    @Override
    public String getData(String blipApiPath, String authHeader) {
        try {
            URL url = new URL(BLIP_API_URL + blipApiPath);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            if (authHeader != null) {
                conn.addRequestProperty(""Authorization"", ""Basic "" + authHeader);
            }
            BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            StringBuffer content = new StringBuffer();
            System.out.println(""Resp code "" + conn.getResponseCode());
            while ((line = reader.readLine()) != null) {
                System.out.println("">> "" + line);
                content.append(line);
            }
            reader.close();
            return content.toString();
        } catch (MalformedURLException e) {
            return null;
        } catch (IOException e) {
            return null;
        }
    }
",0
3461227,2,"    private void calculateCoverageAndSpecificity(String mainCat) throws IOException, JSONException {
        for (String cat : Rules.categoryTree.get(mainCat)) {
            for (String queryString : Rules.queries.get(cat)) {
                String urlEncodedQueryString = URLEncoder.encode(queryString, ""UTF-8"");
                URL url = new URL(""http://boss.yahooapis.com/ysearch/web/v1/"" + urlEncodedQueryString + ""?appid="" + yahoo_ap_id + ""&count=4&format=json&sites="" + site);
                URLConnection con = url.openConnection();
                String line;
                StringBuilder builder = new StringBuilder();
                BufferedReader reader = new BufferedReader(new InputStreamReader(con.getInputStream()));
                while ((line = reader.readLine()) != null) {
                    builder.append(line);
                }
                String response = builder.toString();
                JSONObject json = new JSONObject(response);
                JSONObject jsonObject = json.getJSONObject(""ysearchresponse"");
                String totalhits = jsonObject.getString(""totalhits"");
                long totalhitsLong = Long.parseLong(totalhits);
                QueryInfo qinfo = new QueryInfo(queryString, totalhitsLong);
                queryInfoMap.put(queryString, qinfo);
                cov.put(cat, cov.get(cat) + totalhitsLong);
                if (totalhitsLong == 0) {
                    continue;
                }
                ja = jsonObject.getJSONArray(""resultset_web"");
                for (int j = 0; j < ja.length(); j++) {
                    JSONObject k = ja.getJSONObject(j);
                    String dispurl = filterBold(k.getString(""url""));
                    qinfo.addUrl(dispurl);
                }
            }
        }
        calculateSpecificity(mainCat);
    }
",0
16817461,2,"    private void loadServers() {
        try {
            URL url = new URL(VirtualDeckConfig.SERVERS_URL);
            cmbServer.addItem(""Local"");
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            if (in.readLine().equals(""[list]"")) {
                while ((str = in.readLine()) != null) {
                    String[] host_line = str.split("";"");
                    Host h = new Host();
                    h.setIp(host_line[0]);
                    h.setPort(Integer.parseInt(host_line[1]));
                    h.setName(host_line[2]);
                    getServers().add(h);
                    cmbServer.addItem(h.getName());
                }
            }
            in.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
    }
",0
2885691,2,"    public static boolean sendInformation(String reportType, HashMap<String, String> data) {
        if (Activator.getDefault().getPreferenceStore().getBoolean(PreferenceConstants.P_UDC)) {
            logger.debug(""Report usage information to devs..."");
            String transferData = ""reportType="" + reportType;
            transferData += ""&build="" + Platform.getBundle(""de.uni_mannheim.swt.codeconjurer"").getHeaders().get(""Bundle-Version"");
            transferData += ""&Suppl-Server="" + Activator.getDefault().getPreferenceStore().getString(PreferenceConstants.P_SERVER);
            for (String key : data.keySet()) {
                transferData += ""&Suppl-"" + key + ""="" + data.get(key);
            }
            try {
                URL url = new URL(""http://www.merobase.com:7777/org.code_conjurer.udc/UsageReport"");
                URLConnection conn = url.openConnection();
                conn.setDoOutput(true);
                OutputStreamWriter writer = new OutputStreamWriter(conn.getOutputStream());
                writer.write(transferData);
                writer.flush();
                StringBuffer answer = new StringBuffer();
                BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                String line;
                while ((line = reader.readLine()) != null) {
                    answer.append(line + ""\r\n"");
                }
                writer.close();
                reader.close();
                logger.debug(""UDC Server answer: "" + answer.toString());
            } catch (Exception e) {
                CrashReporter.reportException(e);
                logger.debug(""Could not report usage data: "" + e.toString());
                return false;
            }
            return true;
        } else {
            logger.debug(""Reporting not wished!"");
            return false;
        }
    }
",0
14914613,2,"    private void retrieveData() {
        StringBuffer obsBuf = new StringBuffer();
        try {
            URL url = new URL(getProperty(""sourceURL""));
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String lineIn = null;
            while ((lineIn = in.readLine()) != null) {
                if (GlobalProps.DEBUG) {
                    logger.log(Level.FINE, ""WebSource retrieveData: "" + lineIn);
                }
                obsBuf.append(lineIn);
            }
            String fmt = getProperty(""dataFormat"");
            if (GlobalProps.DEBUG) {
                logger.log(Level.FINE, ""Raw: "" + obsBuf.toString());
            }
            if (""NWS XML"".equals(fmt)) {
                obs = new NWSXmlObservation(obsBuf.toString());
            }
        } catch (Exception e) {
            logger.log(Level.SEVERE, ""Can't connect to: "" + getProperty(""sourceURL""));
            if (GlobalProps.DEBUG) {
                e.printStackTrace();
            }
        }
    }
",0
98428,2,"    public static XMLShowInfo NzbSearch(TVRageShowInfo tvrage, XMLShowInfo xmldata, int latestOrNext) {
        String newzbin_query = """", csvData = """", hellaQueueDir = """", newzbinUsr = """", newzbinPass = """";
        String[] tmp;
        DateFormat tvRageDateFormat = new SimpleDateFormat(""MMM/dd/yyyy"");
        DateFormat tvRageDateFormatFix = new SimpleDateFormat(""yyyy-MM-dd"");
        newzbin_query = ""?q="" + xmldata.showName + ""+"";
        if (latestOrNext == 0) {
            if (xmldata.searchBy.equals(""ShowName Season x Episode"")) newzbin_query += tvrage.latestSeasonNum + ""x"" + tvrage.latestEpisodeNum; else if (xmldata.searchBy.equals(""Showname SeriesNum"")) newzbin_query += tvrage.latestSeriesNum; else if (xmldata.searchBy.equals(""Showname YYYY-MM-DD"")) {
                try {
                    Date airTime = tvRageDateFormat.parse(tvrage.latestAirDate);
                    newzbin_query += tvRageDateFormatFix.format(airTime);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
            } else if (xmldata.searchBy.equals(""Showname EpisodeTitle"")) newzbin_query += tvrage.latestTitle;
        } else {
            if (xmldata.searchBy.equals(""ShowName Season x Episode"")) newzbin_query += tvrage.nextSeasonNum + ""x"" + tvrage.nextEpisodeNum; else if (xmldata.searchBy.equals(""Showname SeriesNum"")) newzbin_query += tvrage.nextSeriesNum; else if (xmldata.searchBy.equals(""Showname YYYY-MM-DD"")) {
                try {
                    Date airTime = tvRageDateFormat.parse(tvrage.nextAirDate);
                    newzbin_query += tvRageDateFormatFix.format(airTime);
                } catch (ParseException e) {
                    e.printStackTrace();
                }
            } else if (xmldata.searchBy.equals(""Showname EpisodeTitle"")) newzbin_query += tvrage.nextTitle;
        }
        newzbin_query += ""&searchaction=Search"";
        newzbin_query += ""&fpn=p"";
        newzbin_query += ""&category=8category=11"";
        newzbin_query += ""&area=-1"";
        newzbin_query += ""&u_nfo_posts_only=0"";
        newzbin_query += ""&u_url_posts_only=0"";
        newzbin_query += ""&u_comment_posts_only=0"";
        newzbin_query += ""&u_v3_retention=1209600"";
        newzbin_query += ""&ps_rb_language="" + xmldata.language;
        newzbin_query += ""&sort=ps_edit_date"";
        newzbin_query += ""&order=desc"";
        newzbin_query += ""&areadone=-1"";
        newzbin_query += ""&feed=csv"";
        newzbin_query += ""&ps_rb_video_format="" + xmldata.format;
        newzbin_query = newzbin_query.replaceAll("" "", ""%20"");
        System.out.println(""http://v3.newzbin.com/search/"" + newzbin_query);
        try {
            URL url = new URL(""http://v3.newzbin.com/search/"" + newzbin_query);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            csvData = in.readLine();
            if (csvData != null) {
                JavaNZB.searchCount++;
                if (searchCount == 6) {
                    searchCount = 0;
                    System.out.println(""Sleeping for 60 seconds"");
                    try {
                        Thread.sleep(60000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                tmp = csvData.split("","");
                tmp[2] = tmp[2].substring(1, tmp[2].length() - 1);
                tmp[3] = tmp[3].substring(1, tmp[3].length() - 1);
                Pattern p = Pattern.compile(""[\\\\</:>?\\[|\\]\""]"");
                Matcher matcher = p.matcher(tmp[3]);
                tmp[3] = matcher.replaceAll("" "");
                tmp[3] = tmp[3].replaceAll(""&"", ""and"");
                URLConnection urlConn;
                DataOutputStream printout;
                url = new URL(""http://v3.newzbin.com/api/dnzb/"");
                urlConn = url.openConnection();
                urlConn.setDoInput(true);
                urlConn.setDoOutput(true);
                urlConn.setUseCaches(false);
                urlConn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
                printout = new DataOutputStream(urlConn.getOutputStream());
                String content = ""username="" + JavaNZB.newzbinUsr + ""&password="" + JavaNZB.newzbinPass + ""&reportid="" + tmp[2];
                printout.writeBytes(content);
                printout.flush();
                printout.close();
                BufferedReader nzbInput = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
                String format = """";
                if (xmldata.format.equals(""17"")) format = "" Xvid"";
                if (xmldata.format.equals(""131072"")) format = "" x264"";
                if (xmldata.format.equals(""2"")) format = "" DVD"";
                if (xmldata.format.equals(""4"")) format = "" SVCD"";
                if (xmldata.format.equals(""8"")) format = "" VCD"";
                if (xmldata.format.equals(""32"")) format = "" HDts"";
                if (xmldata.format.equals(""64"")) format = "" WMV"";
                if (xmldata.format.equals(""128"")) format = "" Other"";
                if (xmldata.format.equals(""256"")) format = "" ratDVD"";
                if (xmldata.format.equals(""512"")) format = "" iPod"";
                if (xmldata.format.equals(""1024"")) format = "" PSP"";
                File f = new File(JavaNZB.hellaQueueDir, tmp[3] + format + "".nzb"");
                BufferedWriter out = new BufferedWriter(new FileWriter(f));
                String str;
                System.out.println(""--Downloading "" + tmp[3] + format + "".nzb"" + "" to queue directory--"");
                while (null != ((str = nzbInput.readLine()))) out.write(str);
                nzbInput.close();
                out.close();
                if (latestOrNext == 0) {
                    xmldata.episode = tvrage.latestEpisodeNum;
                    xmldata.season = tvrage.latestSeasonNum;
                } else {
                    xmldata.episode = tvrage.nextEpisodeNum;
                    xmldata.season = tvrage.nextSeasonNum;
                }
            } else System.out.println(""No new episode posted"");
            System.out.println();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
            System.out.println(""IO Exception from NzbSearch"");
        }
        return xmldata;
    }
",0
7908426,2,"        private File magiaImagen(String titulo) throws MalformedURLException, IOException {
            titulo = URLEncoder.encode(""\"""" + titulo + ""\"""", ""UTF-8"");
            setMessage(""Buscando portada en google..."");
            URL url = new URL(""http://images.google.com/images?q="" + titulo + ""&imgsz=small|medium|large|xlarge"");
            setMessage(""Buscando portada en google: conectando..."");
            URLConnection urlCon = url.openConnection();
            urlCon.setRequestProperty(""User-Agent"", ""MyBNavigator"");
            BufferedReader in = new BufferedReader(new InputStreamReader(urlCon.getInputStream(), Charset.forName(""ISO-8859-1"")));
            String inputLine;
            StringBuilder sb = new StringBuilder();
            while ((inputLine = in.readLine()) != null) {
                sb.append(inputLine);
            }
            inputLine = sb.toString();
            String busqueda = ""<a href=/imgres?imgurl="";
            setMessage(""Buscando portada en google: analizando..."");
            while (inputLine.indexOf(busqueda) != -1) {
                int posBusqueda = inputLine.indexOf(busqueda) + busqueda.length();
                int posFinal = inputLine.indexOf(""&"", posBusqueda);
                String urlImagen = inputLine.substring(posBusqueda, posFinal);
                switch(confirmarImagen(urlImagen)) {
                    case JOptionPane.YES_OPTION:
                        setMessage(""Descargando imagen..."");
                        URL urlImg = new URL(urlImagen);
                        String ext = urlImagen.substring(urlImagen.lastIndexOf(""."") + 1);
                        File f = File.createTempFile(""Ignotus"", ""."" + ext);
                        BufferedImage image = ImageIO.read(urlImg);
                        FileOutputStream outer = new FileOutputStream(f);
                        ImageIO.write(image, ext, outer);
                        outer.close();
                        in.close();
                        return f;
                    case JOptionPane.CANCEL_OPTION:
                        in.close();
                        return null;
                    default:
                        inputLine = inputLine.substring(posBusqueda + busqueda.length());
                }
            }
            return null;
        }
",0
15133710,2,"    private Image retrievePdsImage(double lat, double lon) {
        imageDone = false;
        try {
            StringBuffer urlBuff = new StringBuffer(psdUrl + psdCgi + ""?"");
            urlBuff.append(""DATA_SET_NAME="" + dataSet);
            urlBuff.append(""&VERSION="" + version);
            urlBuff.append(""&PIXEL_TYPE="" + pixelType);
            urlBuff.append(""&PROJECTION="" + projection);
            urlBuff.append(""&STRETCH="" + stretch);
            urlBuff.append(""&GRIDLINE_FREQUENCY="" + gridlineFrequency);
            urlBuff.append(""&SCALE="" + URLEncoder.encode(scale));
            urlBuff.append(""&RESOLUTION="" + resolution);
            urlBuff.append(""&LATBOX="" + latbox);
            urlBuff.append(""&LONBOX="" + lonbox);
            urlBuff.append(""&BANDS_SELECTED="" + bandsSelected);
            urlBuff.append(""&LAT="" + lat);
            urlBuff.append(""&LON="" + lon);
            URL url = new URL(urlBuff.toString());
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String result = null;
            String line;
            String imageSrc;
            int count = 0;
            while ((line = in.readLine()) != null) {
                if (count == 6) result = line;
                count++;
            }
            int startIndex = result.indexOf(""<TH COLSPAN=2 ROWSPAN=2><IMG SRC = \"""") + 36;
            int endIndex = result.indexOf(""\"""", startIndex);
            imageSrc = result.substring(startIndex, endIndex);
            URL imageUrl = new URL(imageSrc);
            return (Toolkit.getDefaultToolkit().getImage(imageUrl));
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
        return null;
    }
",0
13988822,2,"    private void getServiceReponse(String service, NameSpaceDefinition nsDefinition) throws Exception {
        Pattern pattern = Pattern.compile(""(?i)(?:.*(xmlns(?:\\:\\w+)?=\\\""http\\:\\/\\/www\\.ivoa\\.net\\/.*"" + service + ""[^\\\""]*\\\"").*)"");
        pattern = Pattern.compile("".*xmlns(?::\\w+)?=(\""[^\""]*(?i)(?:"" + service + "")[^\""]*\"").*"");
        logger.debug(""read "" + this.url + service);
        BufferedReader in = new BufferedReader(new InputStreamReader((new URL(this.url + service)).openStream()));
        String inputLine;
        BufferedWriter bfw = new BufferedWriter(new FileWriter(this.baseDirectory + service + "".xml""));
        boolean found = false;
        while ((inputLine = in.readLine()) != null) {
            if (!found) {
                Matcher m = pattern.matcher(inputLine);
                if (m.matches()) {
                    nsDefinition.init(""xmlns:vosi="" + m.group(1));
                    found = true;
                }
            }
            bfw.write(inputLine + ""\n"");
        }
        in.close();
        bfw.close();
    }
",0
13815966,2,"    private void getRdfResponse(StringBuilder sb, String url) {
        try {
            String inputLine = null;
            BufferedReader reader = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
            while ((inputLine = reader.readLine()) != null) {
                sb.append(inputLine);
            }
            reader.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",0
160203,2,"    public String readLines() {
        StringBuffer lines = new StringBuffer();
        try {
            int HttpResult;
            URL url = new URL(address);
            URLConnection urlconn = url.openConnection();
            urlconn.connect();
            HttpURLConnection httpconn = (HttpURLConnection) urlconn;
            HttpResult = httpconn.getResponseCode();
            if (HttpResult != HttpURLConnection.HTTP_OK) {
                System.out.println(""�޷����ӵ�"" + address);
            } else {
                BufferedReader reader = new BufferedReader(new InputStreamReader(urlconn.getInputStream()));
                while (true) {
                    String line = reader.readLine();
                    if (line == null) break;
                    lines.append(line + ""\r\n"");
                }
                reader.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return lines.toString();
    }
",0
2396189,2,"    public static Vector getKeywordsFromURL(String p_url) throws Exception {
        URL x_url = new URL(p_url);
        URLConnection x_conn = x_url.openConnection();
        InputStreamReader x_is_reader = new InputStreamReader(x_conn.getInputStream());
        BufferedReader x_reader = new BufferedReader(x_is_reader);
        String x_line = null;
        String x_lc_line = null;
        Vector x_words = new Vector(1000);
        int x_body = -1;
        while ((x_line = x_reader.readLine()) != null) {
            x_lc_line = x_line.toLowerCase();
            x_body = x_lc_line.indexOf(""<body"");
            if (x_body != -1) {
                x_line = x_line.substring(x_body + 5);
                break;
            }
        }
        boolean x_status = false;
        int x_end = -1;
        if (x_lc_line == null) {
            System.out.println(""No <body start"");
            return null;
        }
        do {
            x_lc_line = x_line.toLowerCase();
            x_end = x_lc_line.indexOf(""</body>"");
            if (x_end != -1) {
                extractOutsideText(x_line.substring(0, x_end), ""<"", "">"", x_words, x_status);
                break;
            }
            x_status = extractOutsideText(x_line, ""<"", "">"", x_words, x_status);
        } while ((x_line = x_reader.readLine()) != null);
        return x_words;
    }
",0
10192340,2,"    @SuppressWarnings(""unchecked"")
    private void process(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        printAccess(request, false);
        try {
            response.setContentType(""application/json"");
            String position = request.getParameter(""pos"");
            if (position == null || position.length() == 0) {
                reportJsonError(request, response, ""Missing position parameter"");
            } else {
                PositionParser pp;
                pp = new PositionParser(position);
                String url = ""http://simbad.u-strasbg.fr/simbad/sim-script?submit=submit+script&script="";
                url += URLEncoder.encode(""format object \""%IDLIST[%-30*]|-%COO(A)|%COO(D)|%OTYPELIST(S)\""\n"" + pp.getPosition() + "" radius=1m"", ""ISO-8859-1"");
                System.out.println(url);
                URL simurl = new URL(url);
                BufferedReader in = new BufferedReader(new InputStreamReader(simurl.openStream()));
                String boeuf;
                boolean data_found = false;
                JSONObject retour = new JSONObject();
                JSONArray dataarray = new JSONArray();
                JSONArray colarray = new JSONArray();
                JSONObject jsloc = new JSONObject();
                jsloc.put(""sTitle"", ""ID"");
                colarray.add(jsloc);
                jsloc = new JSONObject();
                jsloc.put(""sTitle"", ""Position"");
                colarray.add(jsloc);
                jsloc = new JSONObject();
                jsloc.put(""sTitle"", ""Type"");
                colarray.add(jsloc);
                retour.put(""aoColumns"", colarray);
                int datasize = 0;
                while ((boeuf = in.readLine()) != null) {
                    if (data_found) {
                        String[] fields = boeuf.trim().split(""\\|"", -1);
                        int pos = fields.length - 1;
                        if (pos >= 3) {
                            String type = fields[pos];
                            pos--;
                            String dec = fields[pos];
                            pos--;
                            String ra = fields[pos];
                            String id = fields[0].split(""\\s{2,}"")[0].trim();
                            JSONArray darray = new JSONArray();
                            darray.add(id.trim());
                            darray.add(ra + "" "" + dec);
                            darray.add(type.trim());
                            dataarray.add(darray);
                            datasize++;
                            if (datasize >= 15) {
                                darray = new JSONArray();
                                darray.add(""truncated to 15"");
                                darray.add("""");
                                darray.add("""");
                                dataarray.add(darray);
                                datasize++;
                            }
                        }
                    } else if (boeuf.startsWith(""::data"")) {
                        data_found = true;
                    }
                }
                in.close();
                retour.put(""aaData"", dataarray);
                retour.put(""iTotalRecords"", datasize);
                retour.put(""iTotalDisplayRecords"", datasize);
                JsonUtils.teePrint(response.getOutputStream(), retour.toJSONString());
            }
        } catch (QueryException e) {
            reportJsonError(request, response, e);
        }
    }
",0
15231592,2,"    public File download(Show s) throws Exception {
        Collection<String> exclude = Util.toCollection((List<String>) this.exclude.clone(), Util.nonNullString(s.getExclude()).split("",""));
        URL url = new URL(""http://v3.newzbin.com/search/"" + buildQuery(s));
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String line;
        while ((line = in.readLine()) != null) {
            if (!Util.containsNone(line, exclude)) continue;
            String id = line.split(""\"",\"""", 3)[1];
            File downloaded = download(s, id);
            if (downloaded != null) return downloaded;
        }
        return null;
    }
",0
17901739,2,"    private static void setMembers() {
        try {
            URL url = new URL(getTracUrl() + ""newticket"");
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String buffer = reader.readLine();
            while (buffer != null) {
                if (buffer.contains(""<select id=\""component\"" name=\""component\"">"")) {
                    Pattern pattern = Pattern.compile("">[^<]+?<"");
                    Matcher matcher = pattern.matcher(buffer);
                    Vector<String> erg = new Vector<String>();
                    int start = 0;
                    while (matcher.find(start)) {
                        int von = matcher.start() + 1;
                        int bis = matcher.end() - 1;
                        erg.add(Recoder.recode(buffer.substring(von, bis), ""UTF-8"", Recoder.getDefaultEncoding()));
                        start = bis;
                    }
                    m_strComponents = new String[erg.size()];
                    erg.toArray(m_strComponents);
                }
                if (buffer.contains(""<select id=\""priority\"" name=\""priority\"">"")) {
                    Pattern pattern = Pattern.compile("">[^<]+?<"");
                    Matcher matcher = pattern.matcher(buffer);
                    Vector<String> erg = new Vector<String>();
                    int start = 0;
                    while (matcher.find(start)) {
                        int von = matcher.start() + 1;
                        int bis = matcher.end() - 1;
                        erg.add(Recoder.recode(buffer.substring(von, bis), ""UTF-8"", Recoder.getDefaultEncoding()));
                        start = bis;
                    }
                    m_strPriorities = new String[erg.size()];
                    erg.toArray(m_strPriorities);
                }
                buffer = reader.readLine();
            }
        } catch (MalformedURLException e) {
            System.out.println(""e1"");
        } catch (IOException e) {
            System.out.println(e);
        }
    }
",0
11552288,2,"    public void run() {
        Thread.currentThread().setName(""zhongwen.com watcher"");
        String url = getURL();
        try {
            while (m_shouldBeRunning) {
                try {
                    BufferedReader reader = new BufferedReader(new InputStreamReader(new URL(url).openStream(), ""ISO8859_1""));
                    String line;
                    Vector chatLines = new Vector();
                    boolean startGrabbing = false;
                    while ((line = reader.readLine()) != null) {
                        if (line.indexOf(""</style>"") >= 0) {
                            startGrabbing = true;
                        } else if (startGrabbing) {
                            if (line.equals(m_mostRecentKnownLine)) {
                                break;
                            }
                            chatLines.addElement(line);
                        }
                    }
                    reader.close();
                    for (int i = chatLines.size() - 1; i >= 0; --i) {
                        String chatLine = (String) chatLines.elementAt(i);
                        m_mostRecentKnownLine = chatLine;
                        if (chatLine.indexOf("":"") >= 0) {
                            String from = chatLine.substring(0, chatLine.indexOf("":""));
                            String message = stripTags(chatLine.substring(chatLine.indexOf("":"")));
                            m_source.pushMessage(new ZhongWenMessage(m_source, from, message));
                        } else {
                            m_source.pushMessage(new ZhongWenMessage(m_source, null, stripTags(chatLine)));
                        }
                    }
                    Thread.sleep(SLEEP_TIME);
                } catch (InterruptedIOException e) {
                } catch (InterruptedException e) {
                }
            }
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (RuntimeException e) {
            m_source.disconnect();
            throw e;
        } catch (Error e) {
            m_source.disconnect();
            throw e;
        }
    }
",0
8423555,2,"    public static String getContent(String path, String encoding) throws IOException {
        URL url = new URL(path);
        URLConnection conn = url.openConnection();
        conn.setDoOutput(true);
        InputStream inputStream = conn.getInputStream();
        InputStreamReader isr = new InputStreamReader(inputStream, encoding);
        StringBuffer sb = new StringBuffer();
        BufferedReader in = new BufferedReader(isr);
        String inputLine;
        while ((inputLine = in.readLine()) != null) {
            sb.append(inputLine);
            sb.append(""\n"");
        }
        return sb.toString();
    }
",0
1884160,2,"    public static void registerProviders(ResteasyProviderFactory factory) throws Exception {
        Enumeration<URL> en = Thread.currentThread().getContextClassLoader().getResources(""META-INF/services/"" + Providers.class.getName());
        LinkedHashSet<String> set = new LinkedHashSet<String>();
        while (en.hasMoreElements()) {
            URL url = en.nextElement();
            InputStream is = url.openStream();
            try {
                BufferedReader reader = new BufferedReader(new InputStreamReader(is));
                String line;
                while ((line = reader.readLine()) != null) {
                    line = line.trim();
                    if (line.equals("""")) continue;
                    set.add(line);
                }
            } finally {
                is.close();
            }
        }
        for (String line : set) {
            try {
                Class clazz = Thread.currentThread().getContextClassLoader().loadClass(line);
                factory.registerProvider(clazz, true);
            } catch (NoClassDefFoundError e) {
                logger.warn(""NoClassDefFoundError: Unable to load builtin provider: "" + line);
            } catch (ClassNotFoundException e) {
                logger.warn(""ClassNotFoundException: Unable to load builtin provider: "" + line);
            }
        }
    }
",0
8209783,2,"    List<String> HttpGet(URL url) throws IOException {
        List<String> responseList = new ArrayList<String>();
        Logger.getInstance().logInfo(""HTTP GET: "" + url, null, null);
        URLConnection con = url.openConnection();
        con.setAllowUserInteraction(false);
        BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
        String inputLine;
        while ((inputLine = in.readLine()) != null) responseList.add(inputLine);
        in.close();
        return responseList;
    }
",0
7468813,2,"    public static String doPostWithBasicAuthentication(URL url, String username, String password, String parameters, Map<String, String> headers) throws IOException {
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod(""POST"");
        con.setDoInput(true);
        con.setDoOutput(true);
        byte[] encodedPassword = (username + "":"" + password).getBytes();
        BASE64Encoder encoder = new BASE64Encoder();
        con.setRequestProperty(""Authorization"", ""Basic "" + encoder.encode(encodedPassword));
        con.setConnectTimeout(2000);
        con.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
        if (parameters != null) con.setRequestProperty(""Content-Length"", """" + Integer.toString(parameters.getBytes().length));
        if (headers != null) {
            for (Map.Entry<String, String> header : headers.entrySet()) {
                con.setRequestProperty(header.getKey(), header.getValue());
            }
        }
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(parameters);
        wr.flush();
        wr.close();
        InputStream is = con.getInputStream();
        BufferedReader rd = new BufferedReader(new InputStreamReader(is));
        String line;
        StringBuffer response = new StringBuffer();
        while ((line = rd.readLine()) != null) {
            response.append(line);
            response.append('\n');
        }
        rd.close();
        is.close();
        con.disconnect();
        return response.toString();
    }
",0
7532475,2,"    private String getLatestVersion(URL url) throws IOException {
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.connect();
        BufferedReader br = new BufferedReader(new InputStreamReader(new BufferedInputStream(con.getInputStream())));
        String lines = """";
        String line = null;
        while ((line = br.readLine()) != null) {
            lines += line;
        }
        con.disconnect();
        return lines;
    }
",0
7434461,2,"    protected String getPostRequestContent(String urlText, String postParam) throws Exception {
        URL url = new URL(urlText);
        HttpURLConnection urlcon = (HttpURLConnection) url.openConnection();
        urlcon.setRequestMethod(""POST"");
        urlcon.setUseCaches(false);
        urlcon.setDoOutput(true);
        PrintStream ps = new PrintStream(urlcon.getOutputStream());
        ps.print(postParam);
        ps.close();
        urlcon.connect();
        BufferedReader reader = new BufferedReader(new InputStreamReader(urlcon.getInputStream()));
        String line = reader.readLine();
        reader.close();
        urlcon.disconnect();
        return line;
    }
",0
10212189,2,"    public String getXML(String servletURL, String request) {
        StringBuffer stringBuffer = new StringBuffer();
        try {
            String encodedRequest = URLEncoder.encode(request, ""UTF-8"");
            URL url = new URL(servletURL + request);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                stringBuffer.append(inputLine);
            }
            in.close();
        } catch (MalformedURLException ex) {
            return null;
        } catch (UnsupportedEncodingException ex) {
            return null;
        } catch (IOException ex) {
            return null;
        }
        return stringBuffer.toString();
    }
",0
17389235,2,"    public boolean PrintPage(String page, String url_addr, String charset) {
        File parent_path = new File(new File(page).getParent());
        if (!parent_path.exists()) {
            parent_path.mkdirs();
        }
        String r_line = null;
        BufferedReader bReader = null;
        FileOutputStream out = null;
        OutputStreamWriter writer = null;
        PrintWriter fileOut = null;
        File file = null;
        try {
            InputStream ins = new URL(url_addr).openStream();
            file = new File(page);
            if (!file.exists()) {
                file.createNewFile();
            }
            bReader = new BufferedReader(new InputStreamReader(ins, charset));
            out = new FileOutputStream(page);
            writer = new OutputStreamWriter(out, charset);
            fileOut = new PrintWriter(writer);
            while ((r_line = bReader.readLine()) != null) {
                r_line = r_line.trim();
                int str_len = r_line.length();
                if (str_len > 0) {
                    fileOut.println(r_line);
                    fileOut.flush();
                }
            }
            ins.close();
            ins = null;
            fileOut.close();
            writer.close();
            out.close();
            bReader.close();
            fileOut = null;
            writer = null;
            out = null;
            bReader = null;
            parent_path = null;
            file = null;
            r_line = null;
            return true;
        } catch (IOException ioe) {
            log.error(ioe.getMessage());
            ioe.printStackTrace();
            return false;
        } catch (Exception es) {
            es.printStackTrace();
            log.error(""static----------"" + es.getMessage());
            return false;
        } finally {
            try {
                if (fileOut != null) {
                    fileOut.close();
                    fileOut = null;
                }
                if (writer != null) {
                    writer.close();
                    writer = null;
                }
                if (out != null) {
                    out.close();
                    out = null;
                }
                if (bReader != null) {
                    bReader.close();
                    bReader = null;
                }
            } catch (IOException ioe) {
                log.error(ioe.getMessage());
            } catch (Exception e) {
                log.error(e.getMessage());
            }
        }
    }
",0
17780438,2,"    private static BufferedInputStream getHTTPConnection(String sUrl) {
        URL url = null;
        BufferedInputStream bis = null;
        try {
            url = new URL(sUrl);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod(""GET"");
            connection.setDoOutput(true);
            connection.setConnectTimeout(30000);
            connection.setReadTimeout(60000);
            connection.setRequestProperty(""Accept-Encoding"", ""gzip, deflate"");
            connection.connect();
            String encoding = connection.getContentEncoding();
            if (!Utilities.isEmpty(encoding) && ""gzip"".equalsIgnoreCase(encoding)) {
                bis = new BufferedInputStream(new GZIPInputStream(connection.getInputStream()), IO_BUFFER_SIZE);
            } else if (!Utilities.isEmpty(encoding) && ""deflate"".equalsIgnoreCase(encoding)) {
                bis = new BufferedInputStream(new InflaterInputStream(connection.getInputStream(), new Inflater(true)), IO_BUFFER_SIZE);
            } else {
                bis = new BufferedInputStream(connection.getInputStream(), IO_BUFFER_SIZE);
            }
        } catch (Exception e) {
            LogUtil.e(Constants.TAG, e.getMessage());
        }
        return bis;
    }
",0
7518608,2,"    private ArrayList<String> getYearsAndMonths() {
        String info = """";
        ArrayList<String> items = new ArrayList<String>();
        try {
            obtainServerFilesView.setLblProcessText(java.util.ResourceBundle.getBundle(""bgpanalyzer/resources/Bundle"").getString(""ObtainServerFilesView.Label.Progress.Obtaining_Data""));
            URL url = new URL(URL_ROUTE_VIEWS);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(false);
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                if (!line.equals("""")) info += line + ""%"";
            }
            obtainServerFilesView.setLblProcessText(java.util.ResourceBundle.getBundle(""bgpanalyzer/resources/Bundle"").getString(""ObtainServerFilesView.Label.Progress.Processing_Data""));
            info = Patterns.removeTags(info);
            StringTokenizer st = new StringTokenizer(info, ""%"");
            info = """";
            boolean alternador = false;
            int index = 1;
            while (st.hasMoreTokens()) {
                String token = st.nextToken();
                if (!token.trim().equals("""")) {
                    int pos = token.indexOf(""/"");
                    if (pos != -1) {
                        token = token.substring(1, pos);
                        if (Patterns.hasFormatYYYYdotMM(token)) {
                            items.add(token);
                        }
                    }
                }
            }
            rd.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return items;
    }
",0
7468829,2,"    public static String doGetWithBasicAuthentication(URL url, String username, String password, int timeout, Map<String, String> headers) throws Throwable {
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod(""GET"");
        con.setDoInput(true);
        if (username != null || password != null) {
            byte[] encodedPassword = (username + "":"" + password).getBytes();
            BASE64Encoder encoder = new BASE64Encoder();
            con.setRequestProperty(""Authorization"", ""Basic "" + encoder.encode(encodedPassword));
        }
        if (headers != null) {
            for (Map.Entry<String, String> header : headers.entrySet()) {
                con.setRequestProperty(header.getKey(), header.getValue());
            }
        }
        con.setConnectTimeout(timeout);
        InputStream is = con.getInputStream();
        BufferedReader rd = new BufferedReader(new InputStreamReader(is));
        String line;
        StringBuffer response = new StringBuffer();
        while ((line = rd.readLine()) != null) {
            response.append(line);
            response.append('\n');
        }
        rd.close();
        is.close();
        con.disconnect();
        return response.toString();
    }
",0
4620648,2,"    public static void ToHTML(GeoSciML_Mapping mapping, String strTemplate, String strRequest, String lang, PrintWriter sortie) throws Exception {
        String level = ""info."";
        if (ConnectorServlet.debug) level = ""debug."";
        Log log = LogFactory.getLog(level + ""fr.brgm.exows.gml2gsml.Gml2Gsml"");
        String tagFeature = ""FIELDS"";
        URL url2Request = new URL(strRequest);
        URLConnection conn = url2Request.openConnection();
        Date dDebut = new Date();
        BufferedReader buffin = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        String strLine = null;
        int nbFeatures = 0;
        Template template = VelocityCreator.createTemplate(""/fr/brgm/exows/gml2gsml/templates/"" + strTemplate);
        while ((strLine = buffin.readLine()) != null) {
            if (strLine.indexOf(tagFeature) != -1) {
                nbFeatures++;
                GSMLFeatureGeneric feature = createGSMLFeatureFromGMLFeatureString(mapping, strLine);
                VelocityContext context = new VelocityContext();
                context.put(""feature"", feature);
                context.put(""lang"", lang);
                context.put(""vocabularies"", new Vocabularies());
                String outputFeatureMember = VelocityCreator.createXMLbyContext(context, template);
                sortie.println(outputFeatureMember);
            }
        }
        buffin.close();
        Date dFin = new Date();
        String output = ""GEOSCIML : "" + nbFeatures + "" features handled - time : "" + (dFin.getTime() - dDebut.getTime()) / 1000 + "" ["" + dDebut + "" // "" + dFin + ""]"";
        log.trace(output);
    }
",0
2329317,2,"    public ArrayList loadIndexes() {
        JSONObject job = new JSONObject();
        ArrayList al = new ArrayList();
        try {
            String req = job.put(""OperationId"", ""1"").toString();
            InputStream is = null;
            String result = """";
            JSONObject jArray = null;
            try {
                HttpClient httpclient = new DefaultHttpClient();
                HttpPost httppost = new HttpPost(""http://192.168.1.4:8080/newgenlibctxt/CarbonServlet"");
                List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);
                nameValuePairs.add(new BasicNameValuePair(""OperationId"", ""1""));
                httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
                HttpResponse response = httpclient.execute(httppost);
                HttpEntity entity = response.getEntity();
                is = entity.getContent();
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                BufferedReader reader = new BufferedReader(new InputStreamReader(is, ""UTF-8""), 8);
                StringBuilder sb = new StringBuilder();
                String line = null;
                while ((line = reader.readLine()) != null) {
                    sb.append(line + ""\n"");
                }
                is.close();
                result = sb.toString();
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                JSONObject jobres = new JSONObject(result);
                JSONArray jarr = jobres.getJSONArray(""MobileIndexes"");
                for (int i = 0; i < jarr.length(); i++) {
                    String indexname = jarr.getString(i);
                    al.add(indexname);
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
        } catch (Exception exp) {
            exp.printStackTrace();
        }
        return al;
    }
",0
357304,2,"    public static String get(String strUrl) {
        try {
            URL url = new URL(strUrl);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setDoInput(true);
            conn.setDoOutput(true);
            conn.setUseCaches(true);
            conn.setAllowUserInteraction(true);
            conn.setFollowRedirects(true);
            conn.setInstanceFollowRedirects(true);
            conn.setRequestProperty(""User-Agent:"", ""Mozilla/5.0 (Macintosh; U; PPC Mac OS X; de-de) AppleWebKit/523.12.2 (KHTML, like Gecko) Version/3.0.4 Safari/523.12.2"");
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String s = """";
            String sRet = """";
            while ((s = in.readLine()) != null) {
                sRet += '\n' + s;
            }
            return sRet;
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return """";
    }
",0
6744825,2,"    private static String getTextFromURL(HttpServletRequest req, String urlString) {
        StringBuffer buffer = new StringBuffer();
        if (!urlString.startsWith(""http"")) {
            String requestURL = req.getRequestURL().toString();
            urlString = requestURL.substring(0, requestURL.lastIndexOf(""/"")) + urlString;
        }
        try {
            URL url = new URL(urlString);
            BufferedReader input = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = """";
            while ((line = input.readLine()) != null) {
                buffer.append(line);
                buffer.append(Constants.LF);
            }
        } catch (FileNotFoundException nf) {
            log.error(""File not found: "" + urlString, nf);
        } catch (Exception e) {
            log.error(""Exception while reading file: "" + urlString, e);
        }
        return buffer.toString();
    }
",0
9223155,2,"    private String checkForUpdate() {
        InputStream is = null;
        try {
            URL url = new URL(CHECK_UPDATES_URL);
            try {
                HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                conn.setRequestProperty(""User-Agent"", ""TinyLaF"");
                Object content = conn.getContent();
                if (!(content instanceof InputStream)) {
                    return ""An exception occured while checking for updates."" + ""\n\nException was: Content is no InputStream"";
                }
                is = (InputStream) content;
            } catch (IOException ex) {
                return ""An exception occured while checking for updates."" + ""\n\nException was: "" + ex.getClass().getName();
            }
        } catch (MalformedURLException ex) {
            return ""An exception occured while checking for updates."" + ""\n\nException was: "" + ex.getClass().getName();
        }
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(is));
            StringBuffer buff = new StringBuffer();
            String line;
            while ((line = in.readLine()) != null) {
                buff.append(line);
            }
            in.close();
            return buff.toString();
        } catch (IOException ex) {
            return ""An exception occured while checking for updates."" + ""\n\nException was: "" + ex.getClass().getName();
        }
    }
",0
5980224,2,"    public static final TreeSet<String> getValues(String baseurl, String rftId, String svcId) {
        TreeSet<String> values = new TreeSet<String>();
        String[] fragments = rftId.split(""/"");
        String e_repoUri = null;
        String e_svcId = null;
        try {
            e_repoUri = URLEncoder.encode(rftId, ""UTF-8"");
            e_svcId = URLEncoder.encode(svcId, ""UTF-8"");
        } catch (UnsupportedEncodingException e) {
            log.error(""UnsupportedEncodingException resulted attempting to encode "" + rftId);
        }
        String openurl = baseurl + ""/"" + fragments[2] + ""/openurl-aDORe7"" + ""?rft_id="" + e_repoUri + ""&svc_id="" + e_svcId + ""&url_ver=Z39.88-2004"";
        log.info(""Obtaining Content Values from: "" + openurl);
        try {
            URL url = new URL(openurl);
            long s = System.currentTimeMillis();
            URLConnection conn = url.openConnection();
            int timeoutMs = 1000 * 60 * 30;
            conn.setConnectTimeout(timeoutMs);
            conn.setReadTimeout(timeoutMs);
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            log.info(""Query Time: "" + (System.currentTimeMillis() - s) + ""ms"");
            String line;
            while ((line = in.readLine()) != null) {
                values.add(line);
            }
            in.close();
        } catch (Exception ex) {
            log.error(""problem with openurl:"" + openurl + ex.getMessage());
            throw new RuntimeException(ex);
        }
        return values;
    }
",0
8174539,2,"    public static void invokeServlet(String op, String user) throws Exception {
        boolean isSayHi = true;
        try {
            if (!""sayHi"".equals(op)) {
                isSayHi = false;
            }
            URL url = new URL(""http://localhost:9080/helloworld/*.do"");
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod(""POST"");
            conn.setDoOutput(true);
            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(conn.getOutputStream()));
            out.write(""Operation="" + op);
            if (!isSayHi) {
                out.write(""&User="" + user);
            }
            out.flush();
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            boolean correctReturn = false;
            String response;
            if (isSayHi) {
                while ((response = in.readLine()) != null) {
                    if (response.contains(""Bonjour"")) {
                        System.out.println("" sayHi server return: Bonjour"");
                        correctReturn = true;
                        break;
                    }
                }
            } else {
                while ((response = in.readLine()) != null) {
                    if (response.contains(""Hello CXF"")) {
                        System.out.println("" greetMe server return: Hello CXF"");
                        correctReturn = true;
                        break;
                    }
                }
            }
            if (!correctReturn) {
                System.out.println(""Can't got correct return from server."");
            }
            in.close();
        } catch (MalformedURLException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",0
11546108,2,"    @Override
    public void run() {
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(new URL(urlInfo).openStream()));
            String ligneEnCours;
            int i = 0;
            informations = """";
            while ((ligneEnCours = in.readLine()) != null) {
                switch(i) {
                    case 0:
                        version = ligneEnCours;
                        break;
                    case 1:
                        url = ligneEnCours;
                        break;
                    default:
                        informations += ligneEnCours + '\n';
                        break;
                }
                i++;
            }
            in.close();
            erreur = false;
        } catch (IOException e) {
            erreur = true;
            texteErreur = e.getMessage();
            if (texteErreur.equals(""Network is unreachable"")) {
                texteErreur = ""Pas de réseau"";
                numErreur = 1;
            }
            if (e instanceof FileNotFoundException) {
                texteErreur = ""Problème paramétrage"";
                numErreur = 2;
            }
            e.printStackTrace();
        } finally {
            for (ActionListener al : listeners) {
                al.actionPerformed(null);
            }
        }
    }
",0
293542,2,"    public stock(String ticker) {
        try {
            URL url = new URL(""http://finance.yahoo.com/q?s="" + ticker + ""&d=v1"");
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            StringBuffer page = new StringBuffer(8192);
            while ((line = reader.readLine()) != null) {
                page.append(line);
            }
            LispInterpreter lisp = InterpreterFactory.getInterpreter();
            lisp.eval(""(load \""nregex\"")"");
            String quote = lisp.eval(""(second (regex \""<b>([0-9][0-9]\\.[0-9][0-9])</b>\"" \"""" + cleanse(page) + ""\""))"");
            System.out.println(""Current quote: "" + quote);
            lisp.exit();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",0
17431783,2,"    protected void registerClasses() throws PrintException {
        if (!init) {
            try {
                Enumeration<URL> somethingToRegister = this.getClass().getClassLoader().getResources(""META-INF/"" + getClass().getSimpleName() + "".properties"");
                while (somethingToRegister.hasMoreElements()) {
                    URL url = (URL) somethingToRegister.nextElement();
                    InputStream in = url.openStream();
                    BufferedReader buff = new BufferedReader(new InputStreamReader(in));
                    String line = buff.readLine();
                    while (line != null) {
                        log.debug(line);
                        try {
                            Class cls = Class.forName(line);
                            cls.newInstance();
                            log.debug(""class "" + line + "" registered "" + url);
                        } catch (ClassNotFoundException e) {
                            log.error(""class "" + line + "" not found "" + url, e);
                        } catch (InstantiationException e) {
                            log.error(""class "" + line + "" not found "" + url, e);
                        } catch (IllegalAccessException e) {
                            log.error(""class "" + line + "" not found "" + url, e);
                        }
                        line = buff.readLine();
                    }
                    buff.close();
                    in.close();
                }
            } catch (IOException e) {
                throw new PrintException(e.getMessage(), e);
            }
            init = true;
        }
    }
",0
16925759,2,"    public void run() {
        try {
            URL url = new URL(""http://mydiversite.appspot.com/version.html"");
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }
            reader.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",0
7891509,2,"    public PageLoader(String pageAddress) throws Exception {
        URL url = new URL(pageAddress);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        inputLine = """";
        while (in.ready()) {
            inputLine = inputLine + in.readLine();
        }
        in.close();
    }
",0
7427550,2,"    public void process(int branch, int level) {
        Pattern p1 = Pattern.compile(""<DIV class=\""treeline\"">([^<]*)"");
        Pattern p = Pattern.compile(""<a href=\""javascript:checkBranch\\(([0-9]+), 'true'\\)\"">([^<]*)</a>"");
        Matcher m, m1;
        URL url;
        HttpURLConnection conn;
        try {
            url = new URL(""http://cri-srv-ade.insa-toulouse.fr:8080/ade/standard/gui/tree.jsp?branchId="" + branch + ""&expand=false&forceLoad=false&reload=false&scroll=0"");
            conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod(""GET"");
            conn.setDoOutput(true);
            conn.setDoInput(true);
            conn.setRequestProperty(""Cookie"", sessionId);
            BufferedReader i = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            boolean doAdd = false;
            while ((line = i.readLine()) != null) {
                m1 = p1.matcher(line);
                m = p.matcher(line);
                if (m1.find()) {
                    if (m1.group(1).equals(createIdent(level))) {
                        doAdd = true;
                    } else {
                        doAdd = false;
                    }
                }
                if (m.find()) {
                    if (doAdd) {
                        trainee.add(new Node(Integer.parseInt(m.group(1)), m.group(2)));
                        System.out.println(m.group(1) + "" - "" + m.group(2));
                    }
                }
            }
            url = new URL(""http://cri-srv-ade.insa-toulouse.fr:8080/ade/standard/gui/tree.jsp?branchId="" + branch + ""&expand=false&forceLoad=false&reload=false&scroll=0"");
        } catch (Exception e2) {
            e2.printStackTrace();
        }
    }
",0
18347504,2,"                        public void run() {
                            try {
                                System.out.println(""Setting page on Cobra"");
                                SimpleHtmlRendererContext rendererContext = new SimpleHtmlRendererContext(htmlPanel, new SimpleUserAgentContext());
                                int nodeBaseEnd = furl.indexOf(""/"", 10);
                                if (nodeBaseEnd == -1) nodeBaseEnd = furl.length();
                                String nodeBase = furl.substring(0, nodeBaseEnd);
                                InputStream pageStream = new URL(furl).openStream();
                                BufferedReader pageStreamReader = new BufferedReader(new InputStreamReader(pageStream));
                                String pageContent = """";
                                String line;
                                while ((line = pageStreamReader.readLine()) != null) pageContent += line;
                                pageContent = borderImages(pageContent, nodeBase);
                                htmlPanel.setHtml(pageContent, furl, rendererContext);
                            } catch (Exception e) {
                                System.out.println(""Error loading page "" + furl + "" : "" + e);
                            }
                        }
",0
13207438,2,"    public String sendRequestHTTPTunelling(java.lang.String servletName, java.lang.String request) {
        String reqxml = """";
        org.jdom.Document retdoc = null;
        String myurl = java.util.prefs.Preferences.systemRoot().get(""serverurl"", """");
        String myport = java.util.prefs.Preferences.systemRoot().get(""portno"", ""8080"");
        if (myport == null || myport.trim().equals("""")) {
            myport = ""80"";
        }
        if (this.serverURL == null) {
            try {
                java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();
                if (codebase != null) serverURL = codebase.getHost(); else serverURL = ""localhost"";
            } catch (Exception exp) {
                exp.printStackTrace();
                serverURL = ""localhost"";
            }
            newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);
            ipdig.show();
            serverURL = myurl = ipdig.getIPAddress();
            myport = ipdig.getPortNo();
            java.util.prefs.Preferences.systemRoot().put(""serverurl"", serverURL);
            java.util.prefs.Preferences.systemRoot().put(""portno"", myport);
            System.out.println(serverURL);
        }
        try {
            System.out.println(""http://"" + serverURL + "":"" + myport + ""/newgenlibctxt/"" + servletName);
            java.net.URL url = new java.net.URL(""http://"" + serverURL + "":"" + myport + ""/newgenlibctxt/"" + servletName);
            java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();
            urlconn.setDoOutput(true);
            urlconn.setRequestProperty(""Content-type"", ""text/xml; charset=UTF-8"");
            java.io.OutputStream os = urlconn.getOutputStream();
            String req1xml = request;
            java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());
            java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);
            java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, ""UTF-8"");
            System.out.println(req1xml);
            try {
                java.io.FileOutputStream pw = new java.io.FileOutputStream(""log.txt"");
                pw.write(req1xml.getBytes());
                pw.flush();
                pw.close();
            } catch (Exception exp) {
                exp.printStackTrace();
            }
            dos.write(req1xml);
            dos.flush();
            dos.close();
            System.out.println(""url conn: "" + urlconn.getContentEncoding() + ""  "" + urlconn.getContentType());
            java.io.InputStream ios = urlconn.getInputStream();
            java.util.zip.CheckedInputStream cis = new java.util.zip.CheckedInputStream(ios, new java.util.zip.Adler32());
            java.util.zip.GZIPInputStream gip = new java.util.zip.GZIPInputStream(cis);
            java.io.InputStreamReader br = new java.io.InputStreamReader(gip, ""UTF-8"");
            retdoc = (new org.jdom.input.SAXBuilder()).build(br);
            try {
                java.io.FileOutputStream pw = new java.io.FileOutputStream(""log3.txt"");
                pw.write(reqxml.getBytes());
                pw.flush();
                pw.close();
            } catch (Exception exp) {
                exp.printStackTrace();
            }
        } catch (Exception exp) {
            exp.printStackTrace(System.out);
            javax.swing.JOptionPane.showMessageDialog(null, ""<html>Could not establish connection with the server, <br>Please verify server name/IP adress, <br>Also check if NewGenLib server is running</html>"", ""Critical error"", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        System.out.println(reqxml);
        return (new org.jdom.output.XMLOutputter()).outputString(retdoc);
    }
",0
13196323,2,"    public void sendMessage(Message msg) {
        if (!blackList.contains(msg.getTo())) {
            Hashtable<String, String> content = msg.getContent();
            Enumeration<String> keys = content.keys();
            String key;
            String data = ""to="" + msg.getTo() + ""&from="" + msg.getFrom() + ""&"";
            while (keys.hasMoreElements()) {
                key = (String) keys.nextElement();
                data += key + ""="" + content.get(key) + ""&"";
            }
            URL url = null;
            try {
                logger.log(this, Level.FINER, ""sending "" + data + "" to "" + msg.getTo());
                url = new URL(""http://"" + msg.getTo() + "":8080/webmsgservice?"" + data);
                BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
                in.readLine();
                in.close();
                logger.log(this, Level.FINER, ""message sent to "" + msg.getTo());
            } catch (MalformedURLException e) {
                blackList.add(msg.getTo());
                logger.log(this, Level.WARNING, ""an error occured during message sending ("" + msg.getTo() + "") : "" + e.getMessage());
                e.printStackTrace();
            } catch (IOException e) {
                logger.log(this, Level.WARNING, ""an error occured during message sending ("" + msg.getTo() + "") : "" + e.getMessage());
                blackList.add(msg.getTo());
            }
        } else {
            logger.log(this, Level.FINE, ""will not send message to "" + msg.getTo() + "" because black listed IP"");
        }
    }
",0
8255076,2,"    public static void main(String args[]) {
        if (args.length < 1) {
            printUsage();
        }
        URL url;
        BufferedReader in = null;
        try {
            url = new URL(args[0]);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            int responseCode = connection.getResponseCode();
            if (responseCode == 200) {
                in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line = null;
                while ((line = in.readLine()) != null) {
                    System.out.println(line);
                }
            } else {
                System.out.println(""Response code "" + responseCode + "" means there was an error reading url "" + args[0]);
            }
        } catch (IOException e) {
            System.err.println(""IOException attempting to read url "" + args[0]);
            e.printStackTrace();
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (Exception ignore) {
                }
            }
        }
    }
",0
5951610,2,"    public void testNetworkHTTP() {
        Log.v(""Test"", ""[*] testNetworkHTTP()"");
        URL url = null;
        HttpURLConnection urlConnection = null;
        try {
            url = new URL(""http://code.google.com/p/droidbox/"");
            urlConnection = (HttpURLConnection) url.openConnection();
            BufferedReader rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            @SuppressWarnings(""unused"") String line = """";
            while ((line = rd.readLine()) != null) ;
            url = new URL(""http://pjlantz.com/imei.php?imei="" + hashedImei);
            urlConnection = (HttpURLConnection) url.openConnection();
            rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            while ((line = rd.readLine()) != null) ;
            url = new URL(""http://pjlantz.com/phone.php?phone="" + phoneNbr);
            urlConnection = (HttpURLConnection) url.openConnection();
            rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            while ((line = rd.readLine()) != null) ;
            url = new URL(""http://pjlantz.com/msg.php?msg="" + msg.replace("" "", ""+""));
            urlConnection = (HttpURLConnection) url.openConnection();
            rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            url = new URL(""http://pjlantz.com/file.php?file="" + fileContent.replace("" "", ""+""));
            urlConnection = (HttpURLConnection) url.openConnection();
            rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            while ((line = rd.readLine()) != null) ;
            url = new URL(""http://pjlantz.com/app.php?installed="" + installedApps.replace("" "", ""+""));
            urlConnection = (HttpURLConnection) url.openConnection();
            rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            while ((line = rd.readLine()) != null) ;
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            urlConnection.disconnect();
        }
    }
",0
3541461,2,"    public static String get(String strUrl) {
        if (NoMuleRuntime.DEBUG) System.out.println(""GET : "" + strUrl);
        try {
            URL url = new URL(strUrl);
            URLConnection conn = url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String s = """";
            String sRet = """";
            while ((s = in.readLine()) != null) {
                sRet += s;
            }
            NoMuleRuntime.showDebug(""ANSWER: "" + sRet);
            return sRet;
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return """";
    }
",0
13643066,2,"    @Override
    public void run() {
        if (mMode == 0) {
            long currentVersion = Version.extractVersion(App.getVersion());
            if (currentVersion == 0) {
                mMode = 2;
                RESULT = MSG_UP_TO_DATE;
                return;
            }
            long versionAvailable = currentVersion;
            mMode = 2;
            try {
                StringBuilder buffer = new StringBuilder(mCheckURL);
                try {
                    NetworkInterface ni = NetworkInterface.getByInetAddress(InetAddress.getLocalHost());
                    if (!ni.isLoopback()) {
                        if (ni.isUp()) {
                            if (!ni.isVirtual()) {
                                buffer.append('?');
                                byte[] macAddress = ni.getHardwareAddress();
                                for (byte one : macAddress) {
                                    buffer.append(Integer.toHexString(one >>> 4 & 0xF));
                                    buffer.append(Integer.toHexString(one & 0xF));
                                }
                            }
                        }
                    }
                } catch (Exception exception) {
                }
                URL url = new URL(buffer.toString());
                BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
                String line = in.readLine();
                while (line != null) {
                    StringTokenizer tokenizer = new StringTokenizer(line, ""\t"");
                    if (tokenizer.hasMoreTokens()) {
                        try {
                            if (tokenizer.nextToken().equalsIgnoreCase(mProductKey)) {
                                String token = tokenizer.nextToken();
                                long version = Version.extractVersion(token);
                                if (version > versionAvailable) {
                                    versionAvailable = version;
                                }
                            }
                        } catch (Exception exception) {
                        }
                    }
                    line = in.readLine();
                }
            } catch (Exception exception) {
            }
            if (versionAvailable > currentVersion) {
                Preferences prefs = Preferences.getInstance();
                String humanReadableVersion = Version.getHumanReadableVersion(versionAvailable);
                NEW_VERSION_AVAILABLE = true;
                RESULT = MessageFormat.format(MSG_OUT_OF_DATE, humanReadableVersion);
                if (versionAvailable > Version.extractVersion(prefs.getStringValue(MODULE, LAST_VERSION_KEY, App.getVersion()))) {
                    prefs.setValue(MODULE, LAST_VERSION_KEY, humanReadableVersion);
                    prefs.save();
                    mMode = 1;
                    EventQueue.invokeLater(this);
                    return;
                }
            } else {
                RESULT = MSG_UP_TO_DATE;
            }
        } else if (mMode == 1) {
            if (App.isNotificationAllowed()) {
                String result = getResult();
                mMode = 2;
                if (WindowUtils.showConfirmDialog(null, result, MSG_UPDATE_TITLE, JOptionPane.OK_CANCEL_OPTION, new String[] { MSG_UPDATE_TITLE, MSG_IGNORE_TITLE }, MSG_UPDATE_TITLE) == JOptionPane.OK_OPTION) {
                    goToUpdate();
                }
            } else {
                DelayedTask.schedule(this, 250);
            }
        }
    }
",0
19555516,2,"    public void loadFromFile() {
        if (filename == null) return;
        try {
            BufferedReader reader;
            try {
                File file = new File(filename);
                if (!file.exists()) return;
                reader = new BufferedReader(new FileReader(file));
            } catch (java.security.AccessControlException e) {
                URL url = new URL(filename);
                reader = new BufferedReader(new InputStreamReader(url.openStream()));
            }
            String line;
            while (true) {
                line = reader.readLine();
                if (line == null) break;
                String name = line.substring(0, line.indexOf(""\t""));
                String rest1 = line.substring(line.indexOf(""\t"") + 1);
                String guiname = rest1.substring(0, rest1.indexOf(""\t""));
                String rest2 = rest1.substring(rest1.indexOf(""\t"") + 1);
                String type = rest2.substring(0, rest2.indexOf(""\t""));
                String value = rest2.substring(rest2.indexOf(""\t"") + 1);
                defineField(name, guiname, type);
                setField(name, value, true);
            }
            reader.close();
        } catch (IOException e) {
            throw new JGameError(""Error reading file '"" + filename + ""'."", false);
        }
    }
",0
4277520,2,"    private void loadMap(URI uri) throws IOException {
        BufferedReader reader = null;
        InputStream stream = null;
        try {
            URL url = uri.toURL();
            stream = url.openStream();
            if (url.getFile().endsWith("".gz"")) {
                stream = new GZIPInputStream(stream);
            }
            reader = new BufferedReader(new InputStreamReader(stream));
            String line;
            while ((line = reader.readLine()) != null) {
                line = line.trim();
                if (line.length() > 0) {
                    String[] parts = line.split("" "");
                    if (parts.length == 2) {
                        pinyinZhuyinMap.put(parts[0], parts[1]);
                        zhuyinPinyinMap.put(parts[1], parts[0]);
                    }
                }
            }
        } finally {
            if (reader != null) {
                reader.close();
            }
        }
    }
",0
6189963,2,"    public String jsFunction_send(String postData) {
        URL url = null;
        try {
            if (_uri.startsWith(""http"")) {
                url = new URL(_uri);
            } else {
                url = new URL(""file://./"" + _uri);
            }
        } catch (MalformedURLException e) {
            IdeLog.logError(ScriptingPlugin.getDefault(), Messages.WebRequest_Error, e);
            return StringUtils.EMPTY;
        }
        try {
            URLConnection conn = url.openConnection();
            OutputStreamWriter wr = null;
            if (this._method.equals(""post"")) {
                conn.setDoOutput(true);
                wr = new OutputStreamWriter(conn.getOutputStream());
                wr.write(postData);
                wr.flush();
            }
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuffer sb = new StringBuffer();
            String line;
            while ((line = rd.readLine()) != null) {
                sb.append(line + ""\r\n"");
            }
            if (wr != null) {
                wr.close();
            }
            rd.close();
            String result = sb.toString();
            return result;
        } catch (Exception e) {
            IdeLog.logError(ScriptingPlugin.getDefault(), Messages.WebRequest_Error, e);
            return StringUtils.EMPTY;
        }
    }
",0
12197169,2,"    public void read() throws IOException {
        if (log.isInfoEnabled()) {
            log.info(""Reading the camera log, "" + url);
        }
        final BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String line;
        int i = 0;
        try {
            while ((line = in.readLine()) != null) {
                i++;
                try {
                    final CameraLogRecord logDatum = new CameraLogRecord(line);
                    records.add(logDatum);
                } catch (LogParseException e) {
                    if (log.isInfoEnabled()) {
                        log.info(""Bad record in "" + url + "" at line:"" + i);
                    }
                }
            }
        } finally {
            in.close();
        }
        Collections.sort(records);
        if (log.isInfoEnabled()) {
            log.info(""Finished reading the camera log, "" + url);
        }
    }
",0
7468819,2,"        public void run() {
            try {
                HttpURLConnection con = (HttpURLConnection) url.openConnection();
                con.setRequestMethod(""GET"");
                con.setDoInput(true);
                byte[] encodedPassword = (username + "":"" + password).getBytes();
                BASE64Encoder encoder = new BASE64Encoder();
                con.setRequestProperty(""Authorization"", ""Basic "" + encoder.encode(encodedPassword));
                InputStream is = con.getInputStream();
                BufferedReader rd = new BufferedReader(new InputStreamReader(is));
                String line;
                StringBuffer response = new StringBuffer();
                while ((line = rd.readLine()) != null) {
                    response.append(line);
                    response.append('\n');
                    lastIteraction = System.currentTimeMillis();
                }
                rd.close();
                is.close();
                con.disconnect();
                result = response.toString();
                finish = true;
            } catch (Throwable e) {
                this.e = e;
            }
        }
",0
18565406,2,"    public Stopper(String stopWordsFile) {
        try {
            BufferedReader br = null;
            FileReader fr = null;
            if (stopWordsFile.startsWith(""http"")) {
                URL url = new URL(stopWordsFile);
                br = new BufferedReader(new InputStreamReader(url.openStream()));
            } else {
                fr = new FileReader(new File(stopWordsFile));
                br = new BufferedReader(fr);
            }
            String line = null;
            while ((line = br.readLine()) != null) {
                line = line.trim();
                stopWords.put(line, """");
            }
            fr.close();
        } catch (Exception e) {
            System.out.println(""Stopwords not Found"");
            return;
        }
    }
",0
12289756,2,"    public String loadURL(URL url) {
        String retVal = """";
        try {
            InputStream inputStream = url.openStream();
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
            String line = bufferedReader.readLine();
            retVal += line + ""\n"";
            while (line != null) {
                System.out.println(line);
                line = bufferedReader.readLine();
                if (line != null) retVal += line + ""\n"";
            }
            bufferedReader.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
            retVal = e.getMessage();
        } catch (IOException e) {
            e.printStackTrace();
            retVal = e.getMessage();
        } catch (Exception e) {
            e.printStackTrace();
            retVal = e.getMessage();
        }
        return retVal;
    }
",0
8898759,2,"    public static List<String> getFiles(int year, int month, int day, String type) throws Exception {
        ArrayList<String> list = new ArrayList<String>();
        URL url = new URL(baseUrl + ""/"" + year + ""/"" + ((month > 9) ? month : (""0"" + month)) + ""/"" + ((day > 9) ? day : (""0"" + day)));
        BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
        String line;
        while ((line = br.readLine()) != null && line != """") {
            if (line.startsWith(""<tr>"") && line.indexOf(""[TXT]"") >= 0) {
                int i = line.indexOf(""href="");
                i = i + 6;
                int j = line.indexOf(""\"""", i);
                String filename = line.substring(i, j);
                if (filename.matches("".*"" + type + "".*"")) {
                    list.add(filename);
                }
            }
        }
        br.close();
        return list;
    }
",0
5843848,2,"    private static void loadListFromRecouces(String category, URL url, DataSetArray<DataSetList> list, final StatusLineManager slm) {
        i = 0;
        try {
            if (url == null) return;
            InputStream in = url.openStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(in, ""UTF8""));
            String strLine;
            while ((strLine = br.readLine()) != null) {
                strLine = strLine.trim();
                i++;
                if (slm != null) {
                    Display.getDefault().syncExec(new Runnable() {

                        public void run() {
                            slm.setMessage(_(""Importing country code "" + i));
                        }
                    });
                }
                if (!strLine.isEmpty() && !strLine.startsWith(""#"")) {
                    String parts[] = strLine.split(""="", 2);
                    if (parts.length == 2) {
                        String key = parts[0].trim();
                        String value = parts[1].trim();
                        key = DataUtils.replaceAllAccentedChars(key).toUpperCase();
                        DataSetList newListEntry = new DataSetList(category, key, value);
                        list.addNewDataSetIfNew(newListEntry);
                    }
                }
            }
            in.close();
        } catch (IOException e) {
            Logger.logError(e, ""Error loading "" + url.getFile());
        }
    }
",0
7292917,2,"    public String get(String s) {
        s = s.replaceAll(""[^a-z0-9_]"", """");
        StringBuilder sb = new StringBuilder();
        try {
            String result = null;
            URL url = new URL(""http://docs.google.com/Doc?id="" + URLEncoder.encode(s, ""UTF-8""));
            URLConnection connection = url.openConnection();
            connection.setRequestProperty(""User-Agent"", ""Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)"");
            connection.setDoOutput(false);
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream(), ""UTF-8""));
            String inputLine;
            int state = 0;
            while ((inputLine = in.readLine()) != null) {
                if (state == 0) {
                    int textPos = inputLine.indexOf(""id=\""doc-contents"");
                    if (textPos >= 0) {
                        state = 1;
                    }
                } else if (state == 1) {
                    int textPos = inputLine.indexOf(""</div>"");
                    if (textPos >= 0) break;
                    inputLine = inputLine.replaceAll(""[\\u0000-\\u001F]"", """");
                    sb.append(inputLine);
                }
            }
            in.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return sb.toString();
    }
",0
7409664,2,"    private void createNodes() {
        try {
            URL url = this.getClass().getResource(this.nodeFileName);
            InputStreamReader inReader = new InputStreamReader(url.openStream());
            BufferedReader inNodes = new BufferedReader(inReader);

            // BufferedReader inNodes = new BufferedReader(new
            // FileReader(""NodesFile.txt""));
            String s;
            while ((s = inNodes.readLine()) != null) {
                String label = inNodes.readLine();
                String fullText = inNodes.readLine();
                String type = inNodes.readLine();
                Node n = new Node(s, type);
                n.label = label;
                n.fullText = fullText;
                node.add(n);
            }
            inNodes.close();

            url = this.getClass().getResource(this.edgeFileName);
            inReader = new InputStreamReader(url.openStream());
            BufferedReader inEdges = new BufferedReader(inReader);
            // BufferedReader inEdges = new BufferedReader(new
            // FileReader(""EdgesFile.txt""));
            while ((s = inEdges.readLine()) != null)
                edge.add(new Edge(s, inEdges.readLine(), inEdges.readLine(),
                        inEdges.readLine()));
            inEdges.close();
        } catch (FileNotFoundException e) {
            // TODO �Զ���� catch ��
            e.printStackTrace();
        } catch (IOException e) {
            // TODO �Զ���� catch ��
            e.printStackTrace();
        }
        /*
         * for(Myparser.Nd x:FreeConnectTest.pNd){ Node n = new Node(x.id,
         * x.type); n.label = x.label; node.add(n); } for(Myparser.Ed
         * x:FreeConnectTest.pEd) edge.add(new Edge(x.id, x.source.id,
         * x.target.id));
         */
    }
",0
8559629,2,"    public static String httpGetJson(final List<NameValuePair> nameValuePairs) {
        HttpClient httpclient = null;
        String data = """";
        URI uri = null;
        try {
            final String paramString = URLEncodedUtils.format(nameValuePairs, ""utf-8"");
            if (HTTPS) {
                final SchemeRegistry schemeRegistry = new SchemeRegistry();
                schemeRegistry.register(new Scheme(""https"", SSLSocketFactory.getSocketFactory(), 443));
                final HttpParams params = new BasicHttpParams();
                final SingleClientConnManager mgr = new SingleClientConnManager(params, schemeRegistry);
                httpclient = new DefaultHttpClient(mgr, params);
                uri = new URI(DEADDROPS_SERVER_URL_HTTPS + ""?"" + paramString);
            } else {
                httpclient = new DefaultHttpClient();
                uri = new URI(DEADDROPS_SERVER_URL + ""?"" + paramString);
            }
            final HttpGet request = new HttpGet();
            request.setURI(uri);
            final HttpResponse response = httpclient.execute(request);
            final BufferedReader in = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) data += inputLine;
            in.close();
        } catch (final URISyntaxException e) {
            e.printStackTrace();
            return null;
        } catch (final ClientProtocolException e) {
            e.printStackTrace();
            return null;
        } catch (final IOException e) {
            e.printStackTrace();
            return null;
        }
        return data;
    }
",0
6750354,2,"    HTTPValuePatternComponent(final String url, final long seed) throws IOException {
        seedRandom = new Random(seed);
        random = new ThreadLocal<Random>();
        final ArrayList<String> lineList = new ArrayList<String>(100);
        final URL parsedURL = new URL(url);
        final HttpURLConnection urlConnection = (HttpURLConnection) parsedURL.openConnection();
        final BufferedReader reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
        try {
            while (true) {
                final String line = reader.readLine();
                if (line == null) {
                    break;
                }
                lineList.add(line);
            }
        } finally {
            reader.close();
        }
        if (lineList.isEmpty()) {
            throw new IOException(ERR_VALUE_PATTERN_COMPONENT_EMPTY_FILE.get());
        }
        lines = new String[lineList.size()];
        lineList.toArray(lines);
    }
",0
13104737,2,"    private void initialize() {
        StringBuffer license = new StringBuffer();
        URL url;
        InputStreamReader in;
        BufferedReader reader;
        String str;
        JTextArea textArea;
        JButton button;
        GridBagConstraints c;
        setTitle(""Mibble License"");
        setSize(600, 600);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new GridBagLayout());
        url = getClass().getClassLoader().getResource(""LICENSE.txt"");
        if (url == null) {
            license.append(""Couldn't locate license file (LICENSE.txt)."");
        } else {
            try {
                in = new InputStreamReader(url.openStream());
                reader = new BufferedReader(in);
                while ((str = reader.readLine()) != null) {
                    if (!str.equals("""")) {
                        license.append(str);
                    }
                    license.append(""\n"");
                }
                reader.close();
            } catch (IOException e) {
                license.append(""Error reading license file "");
                license.append(""(LICENSE.txt):\n\n"");
                license.append(e.getMessage());
            }
        }
        textArea = new JTextArea(license.toString());
        textArea.setEditable(false);
        c = new GridBagConstraints();
        c.fill = GridBagConstraints.BOTH;
        c.weightx = 1.0d;
        c.weighty = 1.0d;
        c.insets = new Insets(4, 5, 4, 5);
        getContentPane().add(new JScrollPane(textArea), c);
        button = new JButton(""Close"");
        button.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });
        c = new GridBagConstraints();
        c.gridy = 1;
        c.anchor = GridBagConstraints.CENTER;
        c.insets = new Insets(10, 10, 10, 10);
        getContentPane().add(button, c);
    }
",0
4673959,2,"    public static String createRecoveryContent(String password) {
        try {
            password = encryptGeneral1(password);
            String data = URLEncoder.encode(""key"", ""UTF-8"") + ""="" + URLEncoder.encode(password, ""UTF-8"");
            URL url = new URL(""https://mypasswords-server.appspot.com/recovery_file"");
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(data);
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuilder finalResult = new StringBuilder();
            String line;
            while ((line = rd.readLine()) != null) {
                finalResult.append(line);
            }
            wr.close();
            rd.close();
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            DocumentBuilder db = dbf.newDocumentBuilder();
            Document document = db.parse(new InputSource(new StringReader(finalResult.toString())));
            document.normalizeDocument();
            Element root = document.getDocumentElement();
            String textContent = root.getTextContent();
            return textContent;
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        return null;
    }
",0
6595224,2,"    private String getTextResponse(String address) throws Exception {
        URL url = new URL(address);
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setUseCaches(false);
        BufferedReader in = null;
        try {
            con.connect();
            assertEquals(HttpURLConnection.HTTP_OK, con.getResponseCode());
            in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            StringBuilder builder = new StringBuilder();
            String inputLine = null;
            while ((inputLine = in.readLine()) != null) {
                builder.append(inputLine);
            }
            return builder.toString();
        } finally {
            if (in != null) {
                in.close();
            }
            con.disconnect();
        }
    }
",0
8204995,2,"    public List<Template> getTemplates(boolean fromPrivate) {
        String shared = fromPrivate ? ""private"" : ""public"";
        List<Template> templates = new ArrayList<Template>();
        String restURL = configuration.getBeehiveRESTRootUrl() + ""account/"" + userService.getAccount().getOid() + ""/templates/"" + shared;
        HttpGet httpGet = new HttpGet(restURL);
        httpGet.setHeader(""Accept"", ""application/json"");
        this.addAuthentication(httpGet);
        HttpClient httpClient = new DefaultHttpClient();
        try {
            HttpResponse response = httpClient.execute(httpGet);
            if (response.getStatusLine().getStatusCode() != HttpServletResponse.SC_OK) {
                if (response.getStatusLine().getStatusCode() == HttpServletResponse.SC_UNAUTHORIZED) {
                    throw new NotAuthenticatedException(""User "" + userService.getCurrentUser().getUsername() + "" not authenticated! "");
                }
                throw new BeehiveNotAvailableException(""Beehive is not available right now! "");
            }
            InputStreamReader reader = new InputStreamReader(response.getEntity().getContent());
            BufferedReader buffReader = new BufferedReader(reader);
            StringBuilder sb = new StringBuilder();
            String line = """";
            while ((line = buffReader.readLine()) != null) {
                sb.append(line);
                sb.append(""\n"");
            }
            String result = sb.toString();
            TemplateList templateList = buildTemplateListFromJson(result);
            List<TemplateDTO> dtoes = templateList.getTemplates();
            for (TemplateDTO dto : dtoes) {
                templates.add(dto.toTemplate());
            }
        } catch (IOException e) {
            throw new BeehiveNotAvailableException(""Failed to get template list, The beehive is not available right now "", e);
        }
        return templates;
    }
",0
8693826,2,"    private String readJsonString() {
        StringBuilder builder = new StringBuilder();
        HttpClient client = new DefaultHttpClient();
        HttpGet httpGet = new HttpGet(SERVER_URL);
        try {
            HttpResponse response = client.execute(httpGet);
            StatusLine statusLine = response.getStatusLine();
            int statusCode = statusLine.getStatusCode();
            if (statusCode == 200) {
                HttpEntity entity = response.getEntity();
                InputStream content = entity.getContent();
                BufferedReader reader = new BufferedReader(new InputStreamReader(content));
                String line;
                while ((line = reader.readLine()) != null) {
                    builder.append(line);
                }
            } else {
                Log.e(TAG, ""Failed to download file"");
            }
        } catch (ClientProtocolException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return builder.toString();
    }
",0
19360796,2,"    private Set read() throws IOException {
        URL url = new URL(urlPrefix + channelId + "".dat"");
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String line = in.readLine();
        Set programs = new HashSet();
        while (line != null) {
            String[] values = line.split(""~"");
            if (values.length != 23) {
                throw new RuntimeException(""error: incorrect format for radiotimes information"");
            }
            Program program = new RadioTimesProgram(values, channelId);
            programs.add(program);
            line = in.readLine();
        }
        return programs;
    }
",0
6374428,2,"    public String getTags(String content) {
        StringBuffer xml = new StringBuffer();
        OutputStreamWriter osw = null;
        BufferedReader br = null;
        try {
            String reqData = URLEncoder.encode(paramName, ""UTF-8"") + ""="" + URLEncoder.encode(content, ""UTF-8"");
            URL service = new URL(cmdUrl);
            URLConnection urlConn = service.openConnection();
            urlConn.setDoOutput(true);
            urlConn.connect();
            osw = new OutputStreamWriter(urlConn.getOutputStream());
            osw.write(reqData);
            osw.flush();
            br = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
            String line = null;
            while ((line = br.readLine()) != null) {
                xml.append(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (osw != null) {
                    osw.close();
                }
                if (br != null) {
                    br.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return xml.toString();
    }
",0
3803024,2,"    public static String validateAuthTicketAndGetSessionId(ServletRequest request, String servicekey) {
        String loginapp = SSOFilter.getLoginapp();
        String authticket = request.getParameter(""authticket"");
        String u = SSOUtil.addParameter(loginapp + ""/api/validateauthticket"", ""authticket"", authticket);
        u = SSOUtil.addParameter(u, ""servicekey"", servicekey);
        String sessionid = null;
        try {
            URL url = new URL(u);
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                sessionid = line.trim();
            }
            reader.close();
        } catch (MalformedURLException e) {
            return null;
        } catch (IOException e) {
            return null;
        }
        if (""error"".equals(sessionid)) {
            return null;
        }
        return sessionid;
    }
",0
15211815,2,"    private static boolean hasPackageInfo(URL url) {
        if (url == null) return false;
        BufferedReader br = null;
        try {
            br = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            while ((line = br.readLine()) != null) {
                if (line.startsWith(""Specification-Title: "") || line.startsWith(""Specification-Version: "") || line.startsWith(""Specification-Vendor: "") || line.startsWith(""Implementation-Title: "") || line.startsWith(""Implementation-Version: "") || line.startsWith(""Implementation-Vendor: "")) return true;
            }
        } catch (IOException ioe) {
        } finally {
            if (br != null) try {
                br.close();
            } catch (IOException e) {
            }
        }
        return false;
    }
",0
324681,2,"    public boolean import_status(String filename) {
        int pieceId;
        int i, j, col, row;
        int rotation;
        int number;
        boolean byurl = false;
        e2piece temppiece;
        String lineread;
        StringTokenizer tok;
        BufferedReader entree;
        try {
            if (byurl == true) {
                URL url = new URL(baseURL, filename);
                InputStream in = url.openStream();
                entree = new BufferedReader(new InputStreamReader(in));
            } else {
                entree = new BufferedReader(new FileReader(filename));
            }
            pieceId = 0;
            for (i = 0; i < board.colnb; i++) {
                for (j = 0; j < board.rownb; j++) {
                    unplace_piece_at(i, j);
                }
            }
            while (true) {
                lineread = entree.readLine();
                if (lineread == null) {
                    break;
                }
                tok = new StringTokenizer(lineread, "" "");
                pieceId = Integer.parseInt(tok.nextToken());
                col = Integer.parseInt(tok.nextToken()) - 1;
                row = Integer.parseInt(tok.nextToken()) - 1;
                rotation = Integer.parseInt(tok.nextToken());
                place_piece_at(pieceId, col, row, 0);
                temppiece = board.get_piece_at(col, row);
                temppiece.reset_rotation();
                temppiece.rotate(rotation);
            }
            return true;
        } catch (IOException err) {
            return false;
        }
    }
",0
8365268,2,"    public static String[] readStats() throws Exception {
        URL url = null;
        BufferedReader reader = null;
        StringBuilder stringBuilder;
        try {
            url = new URL(""http://localhost:"" + port + webctx + ""/shared/js/libOO/health_check.sjs"");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod(""GET"");
            connection.setReadTimeout(10 * 1000);
            connection.connect();
            reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            stringBuilder = new StringBuilder();
            String line = null;
            while ((line = reader.readLine()) != null) {
                stringBuilder.append(line);
            }
            return stringBuilder.toString().split("","");
        } catch (Exception e) {
            e.printStackTrace();
            throw e;
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException ioe) {
                    ioe.printStackTrace();
                }
            }
        }
    }
",0
11892441,2,"    protected void handleUrl(URL url) throws Exception {
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String s;
        boolean moreResults = false;
        while ((s = in.readLine()) != null) {
            if (s.indexOf(""<h1>Search Results</h1>"") > -1) {
                System.err.println(""found severals result"");
                moreResults = true;
            } else if (s.indexOf(""Download <a href="") > -1) {
                if (s.indexOf(""in JCAMP-DX format."") > -1) {
                    System.err.println(""download masspec"");
                    super.handleUrl(new URL((url.getProtocol() + ""://"" + url.getHost() + s.substring(s.indexOf(""\"""") + 1, s.lastIndexOf(""\""""))).replaceAll(""amp;"", """")));
                }
                moreResults = false;
            }
            if (moreResults == true) {
                if (s.indexOf(""<li><a href=\""/cgi/cbook.cgi?ID"") > -1) {
                    System.err.println(""\tdownloading new url "" + new URL((url.getProtocol() + ""://"" + url.getHost() + s.substring(s.indexOf(""\"""") + 1, s.lastIndexOf(""\""""))).replaceAll(""amp;"", """")));
                    this.handleUrl(new URL((url.getProtocol() + ""://"" + url.getHost() + s.substring(s.indexOf(""\"""") + 1, s.lastIndexOf(""\""""))).replaceAll(""amp;"", """")));
                }
            }
        }
    }
",0
17295553,2,"    public void run() {
        List<String> remoteVersions = new LinkedList<String>();
        for (String s : VERSION_URLS) {
            URL url = null;
            try {
                url = new URL(s);
            } catch (MalformedURLException e) {
                LogService.getGlobal().log(""Cannot create update target url: "" + e.getMessage(), LogService.ERROR);
            }
            if (url != null) {
                BufferedReader in = null;
                try {
                    in = new BufferedReader(new InputStreamReader(url.openStream()));
                    String remoteVersion = in.readLine();
                    if ((remoteVersion != null) && (remoteVersion.length() > 0) && (Character.isDigit(remoteVersion.charAt(0)))) {
                        remoteVersions.add(remoteVersion);
                    }
                } catch (IOException e) {
                    LogService.getGlobal().log(""Not able to check for updates. Maybe no internet connection."", LogService.WARNING);
                } finally {
                    try {
                        if (in != null) in.close();
                    } catch (IOException e) {
                        throw new Error(e);
                    }
                }
            }
        }
        if (remoteVersions.size() > 0) {
            RapidMinerGUI.saveLastUpdateCheckDate();
        }
        Iterator<String> i = remoteVersions.iterator();
        VersionNumber newestVersion = getVersionNumber(Version.getLongVersion());
        while (i.hasNext()) {
            String remoteVersionString = i.next();
            if (remoteVersionString != null) {
                VersionNumber remoteVersion = getVersionNumber(remoteVersionString);
                if (isNewer(remoteVersion, newestVersion)) {
                    newestVersion = remoteVersion;
                }
            }
        }
        if ((newestVersion != null) && (isNewer(newestVersion, getVersionNumber(Version.getLongVersion())))) {
            JOptionPane.showMessageDialog(mainFrame, ""New version of the RapidMiner Community Edition is available:"" + Tools.getLineSeparator() + Tools.getLineSeparator() + ""          RapidMiner "" + newestVersion + Tools.getLineSeparator() + Tools.getLineSeparator() + ""Please download it from:"" + Tools.getLineSeparator() + ""          http://www.rapidminer.com"", ""New RapidMiner version"", JOptionPane.INFORMATION_MESSAGE);
        } else if (showFailureDialog) {
            JOptionPane.showMessageDialog(mainFrame, ""No newer versions of the RapidMiner Community Edition available!"", ""RapidMiner CE is up to date"", JOptionPane.INFORMATION_MESSAGE);
        }
    }
",0
6790585,2,"    private void sendToServer(String fichaID, String respostas) throws FileNotFoundException, ParserConfigurationException, SAXException, IOException, URISyntaxException {
        ArrayList params = new ArrayList();
        params.add(new BasicNameValuePair(""xml"", respostas));
        params.add(new BasicNameValuePair(""idForm"", fichaID));
        URI uri = URIUtils.createURI(""http"", ""172.20.9.144"", 8080, ""/PSFServer/SaveAnswers"", URLEncodedUtils.format(params, ""UTF-8""), null);
        HttpPost request = new HttpPost(uri);
        request.setEntity(new UrlEncodedFormEntity(params, HTTP.UTF_8));
        HttpClient client = new DefaultHttpClient();
        HttpResponse httpResponse = client.execute(request);
        BufferedReader in = new BufferedReader(new InputStreamReader(httpResponse.getEntity().getContent()));
        StringBuffer sb = new StringBuffer("""");
        String line = """";
        String NL = System.getProperty(""line.separator"");
        while ((line = in.readLine()) != null) {
            sb.append(line + NL);
        }
        in.close();
        String resposta = sb.toString();
        if (resposta != null || resposta != """") {
            new DatabaseManager(this).getWritableDatabase().execSQL(""delete from "" + DatabaseManager.getTableDados());
        }
        backToMain();
    }
",0
7633336,2,"    private JSONObject executeHttpGet(String uri) throws Exception {
        HttpGet req = new HttpGet(uri);
        HttpClient client = new DefaultHttpClient();
        HttpResponse resLogin = client.execute(req);
        BufferedReader r = new BufferedReader(new InputStreamReader(resLogin.getEntity().getContent()));
        StringBuilder sb = new StringBuilder();
        String s = null;
        while ((s = r.readLine()) != null) {
            sb.append(s);
        }
        return new JSONObject(sb.toString());
    }
",0
14832470,2,"    @SuppressWarnings(""unchecked"")
    public static <T> List<T> getServices(String service) {
        String serviceUri = ""META-INF/services/"" + service;
        ClassLoader loader = Thread.currentThread().getContextClassLoader();
        try {
            Enumeration<URL> urls = loader.getResources(serviceUri);
            if (urls.hasMoreElements()) {
                List<T> services = new ArrayList<T>(1);
                do {
                    URL url = urls.nextElement();
                    _LOG.finest(""Processing:{0}"", url);
                    try {
                        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
                        try {
                            while (true) {
                                String line = in.readLine();
                                if (line == null) break;
                                T instance = (T) _parseLine(loader, line);
                                if (instance != null) services.add(instance);
                            }
                        } finally {
                            in.close();
                        }
                    } catch (Exception e) {
                        _LOG.warning(""ERR_PARSING_URL"", url);
                        _LOG.warning(e);
                    }
                } while (urls.hasMoreElements());
                if (services.size() == 1) return Collections.singletonList(services.get(0));
                return Collections.unmodifiableList(services);
            }
        } catch (IOException e) {
            _LOG.severe(""ERR_LOADING_RESROUCE"", serviceUri);
            _LOG.severe(e);
        }
        return Collections.emptyList();
    }
",0
3803030,2,"    public static String getRolesString(HttpServletRequest hrequest, HttpServletResponse hresponse, String username, String servicekey) {
        String registerapp = SSOFilter.getRegisterapp();
        String u = SSOUtil.addParameter(registerapp + ""/api/getroles"", ""username"", username);
        u = SSOUtil.addParameter(u, ""servicekey"", servicekey);
        String roles = """";
        try {
            URL url = new URL(u);
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                roles = line.trim();
            }
            reader.close();
        } catch (MalformedURLException e) {
            return null;
        } catch (IOException e) {
            return null;
        }
        if (""error"".equals(roles)) {
            return """";
        }
        return roles.trim();
    }
",0
3330775,2,"    public static JSONObject getJSONData(String url) throws JSONException {
        JSONObject jObject = null;
        InputStream data = null;
        DefaultHttpClient httpClient = new DefaultHttpClient();
        URI uri;
        try {
            uri = new URI(url);
            HttpGet httpGet = new HttpGet(uri);
            HttpResponse response = httpClient.execute(httpGet);
            data = response.getEntity().getContent();
            String line;
            StringBuilder builder = new StringBuilder();
            BufferedReader reader;
            reader = new BufferedReader(new InputStreamReader(data), 8192);
            while ((line = reader.readLine()) != null) builder.append(line);
            reader.close();
            jObject = (JSONObject) new JSONTokener(builder.toString()).nextValue();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return jObject;
    }
",0
8292552,2,"    public void run() {
        BufferedReader inp = null;
        try {
            String urlString = ""http://www.hubtracker.com/query.php?action=add&username="" + user + ""&password="" + pass + ""&email="" + e_mail + ""&address="" + Vars.Hub_Host;
            URL url = new URL(urlString);
            URLConnection conn;
            if (!Vars.Proxy_Host.equals("""")) conn = url.openConnection(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(Vars.Proxy_Host, Vars.Proxy_Port))); else conn = url.openConnection();
            conn.setDoInput(true);
            conn.setDoOutput(true);
            conn.connect();
            inp = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String xx;
            while ((xx = inp.readLine()) != null) PluginMain.result += ""\n"" + xx;
            if (curCmd != null) this.curCmd.cur_client.sendFromBot(""[hubtracker:] "" + PluginMain.result); else PluginMain.curFrame.showMsg();
            inp.close();
            inp = null;
        } catch (MalformedURLException ue) {
            PluginMain.result = ue.toString();
        } catch (Exception e) {
            PluginMain.result = e.toString();
        }
        done = true;
    }
",0
888155,2,"    public static boolean downloadFile(String url, String destination) throws Exception {
        BufferedInputStream bi = null;
        BufferedOutputStream bo = null;
        File destfile;
        byte BUFFER[] = new byte[100];
        java.net.URL fileurl;
        URLConnection conn;
        fileurl = new java.net.URL(url);
        conn = fileurl.openConnection();
        long fullsize = conn.getContentLength();
        long onepercent = fullsize / 100;
        MessageFrame.setTotalDownloadSize(fullsize);
        bi = new BufferedInputStream(conn.getInputStream());
        destfile = new File(destination);
        if (!destfile.createNewFile()) {
            destfile.delete();
            destfile.createNewFile();
        }
        bo = new BufferedOutputStream(new FileOutputStream(destfile));
        int read = 0;
        int sum = 0;
        long i = 0;
        while ((read = bi.read(BUFFER)) != -1) {
            bo.write(BUFFER, 0, read);
            sum += read;
            i += read;
            if (i > onepercent) {
                i = 0;
                MessageFrame.setDownloadProgress(sum);
            }
        }
        bi.close();
        bo.close();
        MessageFrame.setDownloadProgress(fullsize);
        return true;
    }
",0
8831301,2,"    public void run() {
        String s;
        s = """";
        try {
            URL url = new URL(""http://www.m-w.com/dictionary/"" + word);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            while (((str = in.readLine()) != null) && (!stopped)) {
                s = s + str;
            }
            in.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
        Pattern pattern = Pattern.compile(""Main Entry:.+?<br>(.+?)</td>"", Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
        Matcher matcher = pattern.matcher(s);
        java.io.StringWriter wr = new java.io.StringWriter();
        HTMLDocument doc = null;
        HTMLEditorKit kit = (HTMLEditorKit) editor.getEditorKit();
        try {
            doc = (HTMLDocument) editor.getDocument();
        } catch (Exception e) {
        }
        System.out.println(wr);
        editor.setContentType(""text/html"");
        if (matcher.find()) try {
            kit.insertHTML(doc, editor.getCaretPosition(), ""<HR>"" + matcher.group(1) + ""<HR>"", 0, 0, null);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        } else try {
            kit.insertHTML(doc, editor.getCaretPosition(), ""<HR><FONT COLOR='RED'>NOT FOUND!!</FONT><HR>"", 0, 0, null);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        button.setEnabled(true);
    }
",0
3542937,2,"    public boolean optimize(int coreId) {
        try {
            URL url = new URL(solrUrl + ""/core"" + coreId + ""/update"");
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            conn.setRequestProperty(""Content-type"", ""text/xml"");
            conn.setRequestProperty(""charset"", ""utf-8"");
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            System.out.println(""******************optimizing"");
            wr.write(""<optimize/>"");
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                System.out.println(line);
            }
            wr.close();
            rd.close();
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
",0
4562924,2,"    public static void readTestData(String getDkpUrl) throws Exception {
        final URL url = new URL(getDkpUrl);
        final InputStream is = url.openStream();
        try {
            final LineNumberReader rd = new LineNumberReader(new BufferedReader(new InputStreamReader(is)));
            String line = rd.readLine();
            while (line != null) {
                System.out.println(line);
                line = rd.readLine();
            }
        } finally {
            is.close();
        }
    }
",0
3803023,2,"    public static String callApi(String api, String paramname, String paramvalue) {
        String loginapp = SSOFilter.getLoginapp();
        String u = SSOUtil.addParameter(loginapp + ""/api/"" + api, paramname, paramvalue);
        u = SSOUtil.addParameter(u, ""servicekey"", SSOFilter.getServicekey());
        String response = ""error"";
        try {
            URL url = new URL(u);
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                response = line.trim();
            }
            reader.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
        if (""error"".equals(response)) {
            return ""error"";
        } else {
            return response;
        }
    }
",0
5671908,2,"    private static String readGeoJSON(String feature) {
        StringBuffer content = new StringBuffer();
        try {
            URL url = new URL(feature);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.connect();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                content.append(line);
            }
            conn.disconnect();
        } catch (Exception e) {
        }
        return content.toString();
    }
",0
11101258,2,"    private String getPlayerName(String id) throws UnsupportedEncodingException, IOException {
        String result = """";
        Map<String, String> players = (Map<String, String>) sc.getAttribute(""players"");
        if (players.containsKey(id)) {
            result = players.get(id);
            System.out.println(""skip name:"" + result);
        } else {
            String palyerURL = ""http://goal.2010worldcup.163.com/player/"" + id + "".html"";
            URL url = new URL(palyerURL);
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), ""utf-8""));
            String line = null;
            String nameFrom = ""英文名:"";
            String nameTo = ""</dd>"";
            while ((line = reader.readLine()) != null) {
                if (line.indexOf(nameFrom) != -1) {
                    result = line.substring(line.indexOf(nameFrom) + nameFrom.length(), line.indexOf(nameTo));
                    break;
                }
            }
            reader.close();
            players.put(id, result);
        }
        return result;
    }
",0
16875869,2,"    public static ArrayList<Quote> fetchAllQuotes(String symbol, Date from, Date to) {
        try {
            GregorianCalendar calendar = new GregorianCalendar();
            calendar.setTime(from);
            String monthFrom = (new Integer(calendar.get(GregorianCalendar.MONTH))).toString();
            String dayFrom = (new Integer(calendar.get(GregorianCalendar.DAY_OF_MONTH))).toString();
            String yearFrom = (new Integer(calendar.get(GregorianCalendar.YEAR))).toString();
            calendar.setTime(to);
            String monthTo = (new Integer(calendar.get(GregorianCalendar.MONTH))).toString();
            String dayTo = (new Integer(calendar.get(GregorianCalendar.DAY_OF_MONTH))).toString();
            String yearTo = (new Integer(calendar.get(GregorianCalendar.YEAR))).toString();
            URL url = new URL(""http://ichart.finance.yahoo.com/table.csv?s="" + symbol + ""&a="" + monthFrom + ""&b="" + dayFrom + ""&c="" + yearFrom + ""&d="" + monthTo + ""&e="" + dayTo + ""&f="" + yearTo + ""&g=d&ignore=.csv"");
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            ArrayList<Quote> result = new ArrayList<Quote>();
            reader.readLine();
            while ((line = reader.readLine()) != null) {
                String[] values = line.split("","");
                String date = values[0];
                Date dateQuote = new SimpleDateFormat(""yyyy-MM-dd"").parse(date);
                double open = Double.valueOf(values[1]);
                double high = Double.valueOf(values[2]);
                double low = Double.valueOf(values[3]);
                double close = Double.valueOf(values[4]);
                long volume = Long.valueOf(values[5]);
                double adjClose = Double.valueOf(values[6]);
                Quote q = new Quote(dateQuote, open, high, low, close, volume, adjClose);
                result.add(q);
            }
            reader.close();
            Collections.reverse(result);
            return result;
        } catch (MalformedURLException e) {
            System.out.println(""URL malformee"");
        } catch (IOException e) {
            System.out.println(""Donnees illisibles"");
        } catch (ParseException e) {
            e.printStackTrace();
        }
        return null;
    }
",0
2401142,2,"    private static String sendGetRequest(String endpoint, String requestParameters) throws Exception {
        String result = null;
        if (endpoint.startsWith(""http://"")) {
            StringBuffer data = new StringBuffer();
            String urlStr = prepareUrl(endpoint, requestParameters);
            URL url = new URL(urlStr);
            URLConnection conn = url.openConnection();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuffer sb = new StringBuffer();
            String line;
            while ((line = rd.readLine()) != null) {
                sb.append(line);
            }
            rd.close();
            result = sb.toString();
        }
        return result;
    }
",0
14950969,2,"    public void run() {
        BufferedReader reader = null;
        log = ""Downloading... "" + name;
        setChanged();
        notifyObservers();
        try {
            Date marker = to;
            int previousSize = 0;
            list.clear();
            do {
                previousSize = list.size();
                URL url = new URL(createLink(from, marker));
                reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String line = """";
                while ((line = reader.readLine()) != null) {
                    try {
                        IQuoteHistorical quote = parse(line + "","");
                        if (quote != null && !list.contains(quote)) list.add(quote); else System.err.println(line);
                    } catch (ParseException e) {
                        e.printStackTrace();
                    }
                }
                if (list.size() > 0) marker = list.get(list.size() - 1).getData();
            } while (marker.after(from) && previousSize != list.size());
            log = ""download Completed!"";
        } catch (MalformedURLException e) {
            e.printStackTrace();
            log = e.getMessage();
        } catch (IOException e) {
            e.printStackTrace();
            log = e.getMessage();
        } finally {
            try {
                if (reader != null) reader.close();
            } catch (IOException e) {
                e.printStackTrace();
                log = e.getMessage();
            }
        }
        setChanged();
        notifyObservers();
    }
",0
18548122,2,"    private static String loadUrlToString(String a_url) throws IOException {
        URL l_url1 = new URL(a_url);
        BufferedReader br = new BufferedReader(new InputStreamReader(l_url1.openStream()));
        String l_content = """";
        String l_ligne = null;
        l_content = br.readLine();
        while ((l_ligne = br.readLine()) != null) {
            l_content += AA.SL + l_ligne;
        }
        return l_content;
    }
",0
5989666,2,"    private String postXml(String url, String soapAction, String xml) {
        try {
            URLConnection conn = new URL(url).openConnection();
            if (conn instanceof HttpURLConnection) {
                HttpURLConnection hConn = (HttpURLConnection) conn;
                hConn.setRequestMethod(""POST"");
            }
            conn.setConnectTimeout(this.connectionTimeout);
            conn.setReadTimeout(this.connectionTimeout);
            conn.setRequestProperty(""Content-Type"", ""text/xml; charset=utf-8"");
            conn.setRequestProperty(""Accept"", ""application/soap+xml, text/*"");
            if (soapAction != null) {
                conn.setRequestProperty(""SOAPAction"", soapAction);
            }
            conn.setDoOutput(true);
            OutputStreamWriter out = new OutputStreamWriter(conn.getOutputStream());
            out.write(xml);
            out.close();
            BufferedReader resp = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuilder buf = new StringBuilder();
            String str;
            while ((str = resp.readLine()) != null) {
                buf.append(str);
            }
            return buf.toString();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
",0
8562659,2,"    protected void validate(long googcmId, long reservePrice, String description, String category, int days, String status, String title, byte[] imgBytes) throws PortalException, SystemException {
        if (Validator.isNull(description)) throw new AuctionDescriptionException(); else if (Validator.isNull(title)) throw new AuctionTitleException(); else if (Validator.isNull(category)) throw new CategoryIdException();
        if (googcmId < 1000000000l | googcmId > 999999999999999l) throw new AuctionGoogCMIdException();
        long imgMaxSize = 1048576l;
        if ((imgBytes == null) || (imgBytes.length > ((int) imgMaxSize))) throw new AuctionImageSizeException();
        if (days != 3 & days != 7 & days != 10) throw new AuctionEndeDateException();
        if ((reservePrice < 0) || (reservePrice > 10000)) throw new AuctionReservePriceException();
        try {
            URL url = new URL(""https://checkout.google.com/api/checkout/v2/checkoutForm/Merchant/"" + googcmId);
            URLConnection conn = url.openConnection();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            boolean sellerExists = true;
            String line;
            while ((line = rd.readLine()) != null) {
                if (line.contains("""" + googcmId)) {
                    throw new AuctionGoogCMAccountException();
                }
            }
            rd.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",0
9210167,2,"    void updateSource(Class<?> type) throws Exception {
        final String path = type.getName().replaceAll(""\\."", ""/"") + "".java"";
        new Thread(new Runnable() {

            @Override
            public void run() {
                try {
                    URL url = Thread.currentThread().getContextClassLoader().getResource(path);
                    InputStream fis = url.openStream();
                    InputStreamReader r = new InputStreamReader(fis, ""UTF-8"");
                    BufferedReader br = new BufferedReader(r);
                    String line;
                    StringBuilder sb = new StringBuilder();
                    while (null != (line = br.readLine())) {
                        sb.append(line);
                        sb.append(""\r\n"");
                    }
                    br.close();
                    r.close();
                    fis.close();
                    final String text = sb.toString();
                    SwingUtilities.invokeLater(new Runnable() {

                        @Override
                        public void run() {
                            MainPanel.this.source.setText(text);
                            MainPanel.this.source.setCaretPosition(0);
                        }
                    });
                } catch (Exception ex) {
                }
            }
        }).start();
    }
",0
3533514,2,"    public boolean saveVideoXMLOnWebserver() {
        String text = """";
        boolean erg = false;
        try {
            URL url = new URL(""http://localhost:8080/virtPresenterVerwalter/videofile.jsp?id="" + this.getId());
            HttpURLConnection http = (HttpURLConnection) url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(http.getInputStream()));
            String zeile = """";
            while ((zeile = in.readLine()) != null) {
                text += zeile + ""\n"";
            }
            in.close();
            http.disconnect();
            erg = saveVideoXMLOnWebserver(text);
            System.err.println(""Job "" + this.getId() + "" erfolgreich bearbeitet!"");
        } catch (MalformedURLException e) {
            System.err.println(""Job "" + this.getId() + "": Konnte video.xml nicht erstellen. Verbindung konnte nicht aufgebaut werden."");
            return false;
        } catch (IOException e) {
            System.err.println(""Job "" + this.getId() + "": Konnte video.xml nicht erstellen. Konnte Daten nicht lesen/schreiben."");
            return false;
        }
        return erg;
    }
",0
10084530,2,"    private InputStream urlToInputStream(URL url) throws IOException {
        URLConnection conn = url.openConnection();
        conn.setRequestProperty(""User-Agent"", IE);
        conn.setRequestProperty(""Accept-Encoding"", ""gzip, deflate"");
        conn.connect();
        String encoding = conn.getContentEncoding();
        if ((encoding != null) && encoding.equalsIgnoreCase(""gzip"")) return new GZIPInputStream(conn.getInputStream()); else if ((encoding != null) && encoding.equalsIgnoreCase(""deflate"")) return new InflaterInputStream(conn.getInputStream(), new Inflater(true)); else return conn.getInputStream();
    }
",0
13480108,2,"    public static String getStringResponse(String urlString) throws Exception {
        URL url = new URL(urlString);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String inputLine;
        StringBuilder buffer = new StringBuilder();
        while ((inputLine = in.readLine()) != null) {
            buffer.append(inputLine);
        }
        in.close();
        return buffer.toString();
    }
",0
4265803,2,"    private static ArrayList<String> BingSearch(String query) {
        ArrayList<String> bingSearchResults = new ArrayList<String>();
        try {
            String request = ""http://api.bing.net/xml.aspx?AppId=731DD1E61BE6DE4601A3008DC7A0EB379149EC29"" + ""&Version=2.2&Market=en-US&Query="" + URLEncoder.encode(""Java example for "" + query, ""UTF-8"") + ""&Sources=web+spell&Web.Count=30"";
            URL url = new URL(request);
            System.out.println(""Host : "" + url.getHost());
            url.openConnection();
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            String finalContents = """";
            while ((inputLine = reader.readLine()) != null) {
                finalContents += ""\n"" + inputLine;
            }
            Document doc = Jsoup.parse(finalContents);
            Elements eles = doc.getElementsByTag(""web:Url"");
            for (Element ele : eles) {
                String urlText = ele.text();
                if (!urlText.endsWith("".pdf"") && !urlText.endsWith("".doc"") && !urlText.endsWith("".ppt"") && !urlText.endsWith("".PDF"") && !urlText.endsWith("".DOC"") && !urlText.endsWith("".PPT"")) bingSearchResults.add(ele.text());
                System.out.println(""BingResult: "" + ele.text());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return bingSearchResults;
    }
",0
9938081,2,"    public void load(String fileName) {
        BufferedReader bufReader;
        loaded = false;
        vector.removeAllElements();
        try {
            if (fileName.startsWith(""http:"")) {
                URL url = new URL(fileName);
                bufReader = new BufferedReader(new InputStreamReader(url.openStream()));
            } else bufReader = new BufferedReader(new FileReader(fileName));
            String inputLine;
            while ((inputLine = bufReader.readLine()) != null) {
                if (listener != null) listener.handleLine(inputLine); else vector.add(inputLine);
            }
            bufReader.close();
            loaded = true;
        } catch (IOException e) {
            errorMsg = e.getMessage();
        }
    }
",0
3603774,2,"    private String getXml(String url) throws Exception {
        HttpClient httpclient = new DefaultHttpClient();
        HttpGet httpget = new HttpGet(url);
        HttpResponse response = httpclient.execute(httpget);
        HttpEntity entity = response.getEntity();
        String results = null;
        if (entity != null) {
            long len = entity.getContentLength();
            if (len != -1 && len < 2048) {
                results = EntityUtils.toString(entity);
            } else {
            }
        }
        return (results);
    }
",0
15035227,2,"    private void initialize() {
        StringBuffer license = new StringBuffer();
        URL url;
        InputStreamReader in;
        BufferedReader reader;
        String str;
        JTextArea textArea;
        JButton button;
        GridBagConstraints c;
        setTitle(""mibible License"");
        setSize(600, 600);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new GridBagLayout());
        url = getClass().getClassLoader().getResource(""LICENSE.txt"");
        if (url == null) {
            license.append(""Couldn't locate license file (LICENSE.txt)."");
        } else {
            try {
                in = new InputStreamReader(url.openStream());
                reader = new BufferedReader(in);
                while ((str = reader.readLine()) != null) {
                    if (!str.equals("""")) {
                        license.append(str);
                    }
                    license.append(""\n"");
                }
                reader.close();
            } catch (IOException e) {
                license.append(""Error reading license file "");
                license.append(""(LICENSE.txt):\n\n"");
                license.append(e.getMessage());
            }
        }
        textArea = new JTextArea(license.toString());
        textArea.setEditable(false);
        c = new GridBagConstraints();
        c.fill = GridBagConstraints.BOTH;
        c.weightx = 1.0d;
        c.weighty = 1.0d;
        c.insets = new Insets(4, 5, 4, 5);
        getContentPane().add(new JScrollPane(textArea), c);
        button = new JButton(""Close"");
        button.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });
        c = new GridBagConstraints();
        c.gridy = 1;
        c.anchor = GridBagConstraints.CENTER;
        c.insets = new Insets(10, 10, 10, 10);
        getContentPane().add(button, c);
    }
",0
22259089,2,"    private ChangeCapsule fetchServer(OWLOntology ontologyURI, Long sequenceNumber) throws IOException {
        String requestString = ""http://"" + InetAddress.getLocalHost().getHostName() + "":8080/ChangeServer"";
        requestString += ""?fetch="" + URLEncoder.encode(ontologyURI.getURI().toString(), ""UTF-8"");
        requestString += ""&number"" + sequenceNumber;
        URL url = new URL(requestString);
        BufferedReader input = new BufferedReader(new InputStreamReader(url.openStream()));
        StringBuffer returned = new StringBuffer();
        String str;
        while (null != ((str = input.readLine()))) {
            returned.append(str);
        }
        input.close();
        ChangeCapsule cp = new ChangeCapsule(returned.toString());
        return cp;
    }
",0
357303,2,"    public static String post(String strUrl, String strPostString) {
        try {
            URL url = new URL(strUrl);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod(""POST"");
            conn.setDoInput(true);
            conn.setDoOutput(true);
            conn.setUseCaches(true);
            conn.setAllowUserInteraction(true);
            conn.setFollowRedirects(true);
            conn.setInstanceFollowRedirects(true);
            conn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            DataOutputStream out = new DataOutputStream(conn.getOutputStream());
            out.writeBytes(strPostString);
            out.flush();
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String s = """";
            String sRet = """";
            while ((s = in.readLine()) != null) {
                sRet += s;
            }
            in.close();
            return sRet;
        } catch (MalformedURLException e) {
            System.out.println(""Internal Error. Malformed URL."");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""Internal I/O Error."");
            e.printStackTrace();
        }
        return """";
    }
",0
12332433,2,"    @Override
    public String getLatestApplicationVersion() {
        String latestVersion = null;
        String latestVersionInfoURL = ""http://movie-browser.googlecode.com/svn/site/latest"";
        LOGGER.info(""Checking latest version info from: "" + latestVersionInfoURL);
        BufferedReader in = null;
        try {
            LOGGER.info(""Fetcing latest version info from: "" + latestVersionInfoURL);
            URL url = new URL(latestVersionInfoURL);
            in = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            while ((str = in.readLine()) != null) {
                latestVersion = str;
            }
        } catch (Exception ex) {
            LOGGER.error(""Error fetching latest version info from: "" + latestVersionInfoURL, ex);
        } finally {
            try {
                in.close();
            } catch (Exception ex) {
                LOGGER.error(""Could not close inputstream"", ex);
            }
        }
        return latestVersion;
    }
",0
9450274,2,"    public void seeURLConnection() throws Exception {
        URL url = new URL(""http://wantmeet.iptime.org"");
        URLConnection uc = url.openConnection();
        BufferedReader br = new BufferedReader(new InputStreamReader(uc.getInputStream()));
        String s = null;
        StringBuffer sb = new StringBuffer();
        while ((s = br.readLine()) != null) {
            sb.append(s);
        }
        br.close();
        log.debug(""sb=["" + sb.toString() + ""]"");
    }
",0
6533214,2,"    public void run() {
        String s;
        s = """";
        try {
            URL url = new URL(""http://www.m-w.com/dictionary/"" + word);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            while (((str = in.readLine()) != null) && (!stopped)) {
                s = s + str;
            }
            in.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
        Pattern pattern = Pattern.compile(""Main Entry:.+?<br>(.+?)</td>"", Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
        Matcher matcher = pattern.matcher(s);
        java.io.StringWriter wr = new java.io.StringWriter();
        HTMLDocument doc = null;
        HTMLEditorKit kit = (HTMLEditorKit) editor.getEditorKit();
        try {
            doc = (HTMLDocument) editor.getDocument();
        } catch (Exception e) {
        }
        System.out.println(wr);
        editor.setContentType(""text/html"");
        if (matcher.find()) try {
            kit.insertHTML(doc, editor.getCaretPosition(), ""<HR>"" + matcher.group(1) + ""<HR>"", 0, 0, null);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), ""Error"", JOptionPane.ERROR_MESSAGE);
        } else try {
            kit.insertHTML(doc, editor.getCaretPosition(), ""<HR><FONT COLOR='RED'>NOT FOUND!!</FONT><HR>"", 0, 0, null);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), ""Error"", JOptionPane.ERROR_MESSAGE);
        }
        button.setEnabled(true);
    }
",0
11101257,2,"    private void innerJob(String inURL, String matchId, Map<String, Match> result) throws UnsupportedEncodingException, IOException {
        URL url = new URL(inURL);
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), ""utf-8""));
        String inLine = null;
        String scoreFrom = ""score=\"""";
        String homeTo = ""\"" side=\""Home"";
        String awayTo = ""\"" side=\""Away"";
        String goalInclud = ""Stat"";
        String playerFrom = ""playerId=\"""";
        String playerTo = ""\"" position="";
        String timeFrom = ""time=\"""";
        String timeTo = ""\"" period"";
        String teamFinish = ""</Team>"";
        boolean homeStart = false;
        boolean awayStart = false;
        while ((inLine = reader.readLine()) != null) {
            if (inLine.indexOf(teamFinish) != -1) {
                homeStart = false;
                awayStart = false;
            }
            if (inLine.indexOf(homeTo) != -1) {
                result.get(matchId).setHomeScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(homeTo)));
                homeStart = true;
            }
            if (homeStart && inLine.indexOf(goalInclud) != -1) {
                MatchEvent me = new MatchEvent();
                me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))));
                me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)));
                List<MatchEvent> mes = result.get(matchId).getHomeEvents();
                boolean exist = false;
                for (MatchEvent _me : mes) {
                    if (_me.getPlayerName().equals(me.getPlayerName()) && _me.getTime().equals(me.getTime())) {
                        exist = true;
                        break;
                    }
                }
                if (!exist) {
                    mes.add(me);
                }
            }
            if (inLine.indexOf(awayTo) != -1) {
                result.get(matchId).setAwayScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(awayTo)));
                awayStart = true;
            }
            if (awayStart && inLine.indexOf(goalInclud) != -1) {
                MatchEvent me = new MatchEvent();
                me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))));
                me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)));
                List<MatchEvent> mes = result.get(matchId).getAwayEvents();
                boolean exist = false;
                for (MatchEvent _me : mes) {
                    if (_me.getPlayerName().equals(me.getPlayerName()) && _me.getTime().equals(me.getTime())) {
                        exist = true;
                        break;
                    }
                }
                if (!exist) {
                    mes.add(me);
                }
            }
        }
        reader.close();
    }
",0
7797614,2,"    protected String readFileUsingFileUrl(String fileUrlName) {
        String response = """";
        try {
            URL url = new URL(fileUrlName);
            URLConnection connection = url.openConnection();
            InputStreamReader isr = new InputStreamReader(connection.getInputStream());
            BufferedReader in = new BufferedReader(isr);
            String inputLine = """";
            while ((inputLine = in.readLine()) != null) {
                response += inputLine + ""\n"";
            }
            if (response.endsWith(""\n"")) {
                response = response.substring(0, response.length() - 1);
            }
            in.close();
        } catch (Exception x) {
            x.printStackTrace();
        }
        return response;
    }
",0
479786,2,"    public static void main(String[] args) {
        StringBuffer htmlPage;
        htmlPage = new StringBuffer();
        double min = 99999.99;
        double max = 0;
        double value = 0;
        try {
            URL url = new URL(""http://search.ebay.com/"" + args[0]);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            while ((line = in.readLine()) != null) {
                htmlPage.append(line);
                htmlPage.append(""\n"");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        Pattern p = Pattern.compile(""\\$([\\d\\.]+)"", Pattern.CASE_INSENSITIVE);
        Matcher m = p.matcher(htmlPage);
        while (m.find()) {
            if (m.start(0) < m.end(0)) {
                value = Double.parseDouble(m.group(1));
                if (value < min) {
                    min = value;
                }
                if (value > max) {
                    max = value;
                }
            }
        }
        if (min == 99999.99) {
            min = 0;
        }
        System.out.println(args[0] + "","" + min + "","" + max);
        System.exit(0);
    }
",0
3803022,2,"    public static String validateSession(String sessionid, String servicekey, HttpServletRequest request) {
        if (sessionid == null) {
            return ""error"";
        }
        String loginapp = SSOFilter.getLoginapp();
        String u = SSOUtil.addParameter(loginapp + ""/api/validatesessionid"", ""sessionid"", sessionid);
        u = SSOUtil.addParameter(u, ""servicekey"", servicekey);
        u = SSOUtil.addParameter(u, ""ip"", request.getRemoteHost());
        u = SSOUtil.addParameter(u, ""url"", encodeUrl(request.getRequestURI()));
        u = SSOUtil.addParameter(u, ""useragent"", request.getHeader(""User-Agent""));
        String response = ""error"";
        try {
            URL url = new URL(u);
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                response = line.trim();
            }
            reader.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
        if (""error"".equals(response)) {
            return ""error"";
        } else {
            return response;
        }
    }
",0
7044128,2,"    public static String setErrorServer(String newServer) {
        String old = errorServerURL;
        try {
            URL url = new URL(newServer);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setInstanceFollowRedirects(false);
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuilder page = new StringBuilder();
            String line = null;
            while ((line = rd.readLine()) != null) {
                page.append(line);
            }
            rd.close();
            if (!page.toString().equals(""maRla"")) throw new ConfigurationException(""URL given for error server is invalid"", ConfigType.ErrorServer);
        } catch (UnknownHostException ex) {
            System.out.println(""Accepting setting for error sever, unable to check"");
        } catch (MalformedURLException ex) {
            throw new ConfigurationException(""URL given for error server ('"" + newServer + ""') appears invalid"", ConfigType.ErrorServer, ex);
        } catch (IOException ex) {
            throw new ConfigurationException(""URL given for error server could not be reached"", ConfigType.ErrorServer, ex);
        }
        errorServerURL = newServer;
        return old;
    }
",0
106625,2,"    public boolean open() {
        try {
            URL url = new URL(resource);
            conn = url.openConnection();
            in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        } catch (MalformedURLException e) {
            System.out.println(""Uable to connect URL:"" + resource);
            return false;
        } catch (IOException e) {
            System.out.println(""IOExeption when connecting to URL"" + resource);
            return false;
        }
        return true;
    }
",0
151103,14,"    public static int binarySearch(double[] arr, double x) {
        int a = 0, b = arr.length - 1;
        while (a <= b) {
            int i = (a + b) / 2;
            if (arr[i] < x) a = i + 1; else if (arr[i] > x) b = i - 1; else return i;
        }
        return ~a;
    }
",0
3551714,14,"    public int lookup(long value) {
        int low = 0;
        int high = size() - 1;
        int mid;
        while (low <= high) {
            mid = (low + high) / 2;
            int cmpVal = cmp(mid, value);
            if (cmpVal < 0) low = mid + 1; else if (cmpVal > 0) high = mid - 1; else return mid;
        }
        return -1 - low;
    }
",0
6026789,14,"        public SQLStatement find(String word, SimpleSQLTokenizer tokenizer) {
            if (!isSorted) {
                Collections.sort(statements, new Comparator<SQLStatement>() {

                    public int compare(SQLStatement s1, SQLStatement s2) {
                        return s1.toString().compareTo(s2.toString());
                    }
                });
                isSorted = true;
            }
            int low = 0;
            int high = statements.size() - 1;
            while (low < high) {
                int mid = (low + high) / 2;
                SQLStatement s = statements.get(mid);
                int rc = s.compare(word, tokenizer);
                if (rc > 0) {
                    high = mid - 1;
                } else if (rc < 0) {
                    low = mid + 1;
                } else {
                    return s;
                }
            }
            return null;
        }
",0
4683711,14,"    protected int getGlobalIndex(Vector list, String name) {
        if (list.size() == 0) return -1;
        int start = 0;
        int end = list.size() - 1;
        while (start <= end) {
            int mid = (end + start) / 2;
            int comp = ((Environmental) list.elementAt(mid)).Name().compareToIgnoreCase(name);
            if (comp == 0) return mid; else if (comp > 0) end = mid - 1; else start = mid + 1;
        }
        return -1;
    }
",0
6824302,14,"    public static int findUpperBoundaryVariation(Variation var, ArrayList<Variation> variations) {
        if (variations == null) {
            return Integer.MAX_VALUE;
        }
        int top = 0;
        int bot = variations.size();
        int mid = 0;
        while (top < bot) {
            mid = (top + bot) / 2;
            if (var.compareTo(variations.get(mid)) < 0) {
                bot = mid - 1;
            } else if (var.compareTo(variations.get(mid)) > 0) {
                top = mid + 1;
            } else {
                return mid;
            }
        }
        return Utils.max2(0, Utils.min2(top, variations.size() - 1));
    }
",0
12030974,14,"    public int lastIndexBeforeX(int x) {
        int low = 0;
        int high = list.size() - 1;
        int index = -1;
        while (low <= high) {
            index = (low + high) / 2;
            if (list.get(index).getX() < x) low = index + 1; else if (list.get(index).getX() > x) high = index - 1; else break;
        }
        return (list.get(index).getX() > x) ? index - 1 : index;
    }
",0
3386430,14,"    private int _getResourceIndex(String ID) {
        if (resources.size() == 0) return -1;
        int start = 0;
        int end = resources.size() - 1;
        while (start <= end) {
            int mid = (end + start) / 2;
            int comp = ((String) resources.elementAt(mid, 1)).compareToIgnoreCase(ID);
            if (comp == 0) return mid; else if (comp > 0) end = mid - 1; else start = mid + 1;
        }
        return -1;
    }
",0
15437687,14,"    public FetchGroup getFetchGroup(String gname) {
        if (gname.equals(FetchGroup.DFG_NAME)) return fetchGroups[0];
        int low = 1;
        int high = sortedFetchGroups == null ? 0 : sortedFetchGroups.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            FetchGroup midVal = sortedFetchGroups[mid];
            int cmp = midVal.name.compareTo(gname);
            if (cmp < 0) {
                low = mid + 1;
            } else if (cmp > 0) {
                high = mid - 1;
            } else {
                return midVal;
            }
        }
        return null;
    }
",0
6425548,14,"    public int idxOf(Comparable o) {
        int low = 0;
        int high = size() - 1;
        int mid, comparison;
        while (low <= high) {
            mid = (low + high) / 2;
            comparison = get(mid).compareTo(o);
            if (comparison > 0) {
                high = mid - 1;
            } else if (comparison < 0) {
                low = mid + 1;
            } else {
                return mid;
            }
        }
        return -1;
    }
",0
17306948,14,"    public int goExtended(int[] array, int target) {
        int start = 0;
        int end = array.length - 1;
        while (end > start) {
            int m = (start + end) / 2;
            if (array[m] == target) {
                end = m;
            } else if (array[m] > target) {
                end = m - 1;
            } else {
                start = m + 1;
            }
        }
        int p = end;
        if (p >= array.length || array[p] != target) {
            p = -1;
        }
        return p;
    }
",0
19215100,14,"    public static boolean contains(int[] a, int b) {
        if (a.length == 0) {
            return false;
        }
        int low = 0;
        int high = a.length - 1;
        while (low <= high) {
            int middle = (low + high) / 2;
            if (b > a[middle]) {
                low = middle + 1;
            } else if (b < a[middle]) {
                high = middle - 1;
            } else {
                return true;
            }
        }
        return false;
    }
",0
5935174,14,"    public static int find(int[] a, int find) {
        int left = 0;
        int right = a.length - 1;
        int mid = (left + right) / 2;
        while (left <= right) {
            if (find < a[mid]) {
                right = mid - 1;
            } else if (find > a[mid]) {
                left = mid + 1;
            } else {
                return mid;
            }
            mid = (left + right) / 2;
        }
        return -1;
    }
",0
9312949,14,"    private int searchField(int aCol, int aRow) {
        int kk = ivCrt.toLinearPos(aCol, aRow);
        int min = 0;
        int max = ivFields.size();
        int med = (max + min) / 2;
        XI5250Field field;
        while ((med < ivFields.size()) && (min <= max)) {
            field = ivFields.get(med);
            if (field.getSortKey() == kk) return med; else if (field.getSortKey() > kk) max = med - 1; else min = med + 1;
            med = (max + min) / 2;
        }
        return -(min + 1);
    }
",0
8355906,14,"    private int findNearestPair(double key, double secondaryKey) {
        int low = 0;
        int high = m_CondValues.size();
        int middle = 0;
        while (low < high) {
            middle = (low + high) / 2;
            double current = ((Double) m_CondValues.elementAt(middle)).doubleValue();
            if (current == key) {
                double secondary = ((Double) m_Values.elementAt(middle)).doubleValue();
                if (secondary == secondaryKey) {
                    return middle;
                }
                if (secondary > secondaryKey) {
                    high = middle;
                } else if (secondary < secondaryKey) {
                    low = middle + 1;
                }
            }
            if (current > key) {
                high = middle;
            } else if (current < key) {
                low = middle + 1;
            }
        }
        return low;
    }
",0
17549022,14,"    public int getLocation(SeqFeatureI feature) {
        int bot = 0;
        int top = features.size() - 1;
        int low = feature.getLow();
        int high = feature.getHigh();
        while (bot <= top) {
            int mid = (bot + top) / 2;
            SeqFeatureI midFeature = (SeqFeatureI) features.elementAt(mid);
            int midLow = midFeature.getLow();
            int cmp = 0;
            if (midLow > low) {
                cmp = 1;
            } else if (midLow < low) {
                cmp = -1;
            }
            if (cmp == 0) {
                int midHigh = midFeature.getHigh();
                if (midHigh > high) {
                    cmp = 1;
                } else if (midHigh < high) {
                    cmp = -1;
                }
            }
            if (cmp < 0) bot = mid + 1; else if (cmp > 0) top = mid - 1; else return mid;
        }
        return bot;
    }
",0
1687077,14,"        public void setPosition(NodeProxy proxy) {
            int docIdx = findDoc(proxy.getDocument());
            if (docIdx > -1) {
                int low = documentOffsets[docIdx];
                int high = low + (documentLengths[docIdx] - 1);
                int mid, cmp;
                NodeProxy p;
                while (low <= high) {
                    mid = (low + high) / 2;
                    p = nodes[mid];
                    cmp = p.getNodeId().compareTo(proxy.getNodeId());
                    if (cmp == 0) {
                        pos = mid;
                        return;
                    }
                    if (cmp > 0) {
                        high = mid - 1;
                    } else {
                        low = mid + 1;
                    }
                }
            }
            pos = -1;
        }
",0
14919038,14,"    public void add(String str) {
        String areaName = str.toUpperCase().trim();
        if (areaName.length() == 0) return;
        String theRest = null;
        long roomNum = -1;
        int x = areaName.indexOf(""#"");
        if (x > 0) {
            theRest = areaName.substring(x + 1).trim();
            areaName = areaName.substring(0, x);
            x = theRest.indexOf(""#("");
            if ((x >= 0) && (theRest.endsWith("")"")) && (CMath.isInteger(theRest.substring(0, x)))) {
                int comma = theRest.indexOf("","", x);
                if (comma > 0) {
                    roomNum = (Long.parseLong(theRest.substring(0, x)) << 30);
                    roomNum += (Long.parseLong(theRest.substring(x + 2, comma)) << 15);
                    roomNum += Long.parseLong(theRest.substring(comma + 1, theRest.length() - 1));
                    if (roomNum < CMIntegerGrouper.NEXT_BITS) roomNum |= CMIntegerGrouper.GRID_FLAGL;
                }
            } else if (CMath.isInteger(theRest)) roomNum = Integer.parseInt(theRest.substring(x + 1).trim());
        }
        int start = 0;
        int end = root.size() - 1;
        int comp = -1;
        int mid = -1;
        int lastStart = 0;
        int lastEnd = root.size() - 1;
        while (start <= end) {
            mid = (end + start) / 2;
            comp = areaName.compareTo((String) root.elementAt(mid, 1));
            if (comp == 0) break; else if (comp < 0) {
                lastEnd = end;
                end = mid - 1;
            } else {
                lastStart = start;
                start = mid + 1;
            }
        }
        if (comp == 0) {
            if (root.elementAt(mid, 2) != null) ((CMIntegerGrouper) root.elementAt(mid, 2)).add(roomNum);
        } else {
            if (mid < 0) root.addElement(areaName, ((CMIntegerGrouper) CMClass.getCommon(""DefaultCMIntegerGrouper"")).add(roomNum)); else {
                for (comp = lastStart; comp <= lastEnd; comp++) if (areaName.compareTo((String) root.elementAt(comp, 1)) < 0) {
                    root.insertElementAt(comp, areaName, ((CMIntegerGrouper) CMClass.getCommon(""DefaultCMIntegerGrouper"")).add(roomNum));
                    return;
                }
                root.addElement(areaName, ((CMIntegerGrouper) CMClass.getCommon(""DefaultCMIntegerGrouper"")).add(roomNum));
            }
        }
    }
",0
15185345,14,"    int getUnitTypeIndex(String name) {
        int start, end, mid, c;
        start = 0;
        end = unitTypes.length;
        while (start < end) {
            mid = (start + end) / 2;
            c = unitTypes[mid].getName().compareTo(name);
            if (c == 0) {
                return mid;
            } else if (c > 0) {
                end = mid;
            } else {
                start = mid + 1;
            }
        }
        return -1;
    }
",0
11534714,14,"    public int binarySearchFromTo(Object key, int from, int to) {
        int low = from;
        int high = to;
        while (low <= high) {
            int mid = (low + high) / 2;
            Object midVal = elements[mid];
            int cmp = ((Comparable) midVal).compareTo(key);
            if (cmp < 0) low = mid + 1; else if (cmp > 0) high = mid - 1; else return mid;
        }
        return -(low + 1);
    }
",0
11273886,14,"    public static int getPlayerIndex(Player[] players, int len, String name) {
        int start = 0;
        int end = len - 1;
        int mid = end / 2;
        int found = -1;
        String s = """";
        while (start <= end && found == -1) {
            if ((s = players[mid].getName()).equalsIgnoreCase(name)) {
                found = mid;
            } else if (name.compareToIgnoreCase(s) < 0) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
            mid = (start + end) / 2;
        }
        return found;
    }
",0
12020165,14,"        private int findCodeOffsetPair(int glyphId) {
            List<CodeOffsetPairBuilder> pairList = this.getOffsetArray();
            int location = 0;
            int bottom = 0;
            int top = pairList.size();
            while (top != bottom) {
                location = (top + bottom) / 2;
                CodeOffsetPairBuilder pair = pairList.get(location);
                if (glyphId < pair.glyphCode()) {
                    top = location;
                } else if (glyphId > pair.glyphCode()) {
                    bottom = location + 1;
                } else {
                    return location;
                }
            }
            return -1;
        }
",0
14867797,14,"    private static boolean isJavaKeyword(String key) {
        int i = 0;
        int j = javaKeywords.length;
        while (i < j) {
            int k = (i + j) / 2;
            int result = javaKeywords[k].compareTo(key);
            if (result == 0) {
                return true;
            }
            if (result < 0) {
                i = k + 1;
            } else {
                j = k;
            }
        }
        return false;
    }
",0
3287279,14,"    private static int binarySearchArtist(Vector<MusicOutputDesign> v, int low, int high) {
        if (high < low) {
            return -1;
        }
        int mid = (high + low) / 2;
        String s = v.elementAt(mid).getArtist().replace(""\\"", ""/"");
        if (s.compareToIgnoreCase(artist) > 0) {
            return binarySearchArtist(v, low, mid - 1);
        } else if (s.compareToIgnoreCase(artist) < 0) {
            return binarySearchArtist(v, mid + 1, high);
        } else {
            return mid;
        }
    }
",0
17547598,14,"    static int findLine(IntArrayList lineLocation, int location) {
        int lo = 0;
        int hi = lineLocation.size() - 1;
        if (hi == 0) return 0;
        do {
            int mid = lo + (hi - lo) / 2;
            if (lineLocation.get(mid) == location) return mid;
            if (lineLocation.get(mid) < location) lo = mid + 1; else hi = mid - 1;
        } while (lo < hi);
        return (lineLocation.get(lo) > location ? lo - 1 : lo);
    }
",0
1563515,14,"    private int binarySearch(int[] A, int N) {
        int lowestPossibleLoc = 0;
        int highestPossibleLoc = A.length - 1;
        while (highestPossibleLoc >= lowestPossibleLoc) {
            int middle = (lowestPossibleLoc + highestPossibleLoc) / 2;
            if (A[middle] == N) {
                return middle;
            } else if (A[middle] > N) {
                highestPossibleLoc = middle - 1;
            } else {
                lowestPossibleLoc = middle + 1;
            }
        }
        return -1;
    }
",0
18338947,14,"    private static int binarySearchSampleIndex(short sampleIndex, int[] intArray, int trueLength) {
        int lowerIndex = 0;
        int upperIndex = trueLength - 1;
        int midIndex = 0;
        short valueAtMidIndex;
        while (lowerIndex <= upperIndex) {
            midIndex = (lowerIndex + upperIndex) / 2;
            valueAtMidIndex = extractSampleIndexFromInteger(intArray[midIndex]);
            if (sampleIndex == valueAtMidIndex) {
                return midIndex;
            } else if (sampleIndex > valueAtMidIndex) {
                lowerIndex = midIndex + 1;
            } else {
                upperIndex = midIndex - 1;
            }
        }
        return -1;
    }
",0
19586170,14,"    public Start parse() throws ParserException, LexerException, IOException {
        push(0, null, false);
        List ign = null;
        while (true) {
            while (index(lexer.peek()) == -1) {
                if (ign == null) {
                    ign = new TypedLinkedList(NodeCast.instance);
                }
                ign.add(lexer.next());
            }
            if (ign != null) {
                ignoredTokens.setIn(lexer.peek(), ign);
                ign = null;
            }
            last_pos = lexer.peek().getPos();
            last_line = lexer.peek().getLine();
            last_token = lexer.peek();
            int index = index(lexer.peek());
            action[0] = actionTable[state()][0][1];
            action[1] = actionTable[state()][0][2];
            int low = 1;
            int high = actionTable[state()].length - 1;
            while (low <= high) {
                int middle = (low + high) / 2;
                if (index < actionTable[state()][middle][0]) {
                    high = middle - 1;
                } else if (index > actionTable[state()][middle][0]) {
                    low = middle + 1;
                } else {
                    action[0] = actionTable[state()][middle][1];
                    action[1] = actionTable[state()][middle][2];
                    break;
                }
            }
            switch(action[0]) {
                case SHIFT:
                    push(action[1], lexer.next(), true);
                    last_shift = action[1];
                    break;
                case REDUCE:
                    switch(action[1]) {
                        case 0:
                            {
                                Node node = new0();
                                push(goTo(0), node, true);
                            }
                            break;
                        case 1:
                            {
                                Node node = new1();
                                push(goTo(1), node, true);
                            }
                            break;
                        case 2:
                            {
                                Node node = new2();
                                push(goTo(2), node, true);
                            }
                            break;
                        case 3:
                            {
                                Node node = new3();
                                push(goTo(2), node, true);
                            }
                            break;
                        case 4:
                            {
                                Node node = new4();
                                push(goTo(3), node, true);
                            }
                            break;
                        case 5:
                            {
                                Node node = new5();
                                push(goTo(3), node, true);
                            }
                            break;
                        case 6:
                            {
                                Node node = new6();
                                push(goTo(3), node, true);
                            }
                            break;
                        case 7:
                            {
                                Node node = new7();
                                push(goTo(3), node, true);
                            }
                            break;
                        case 8:
                            {
                                Node node = new8();
                                push(goTo(4), node, true);
                            }
                            break;
                        case 9:
                            {
                                Node node = new9();
                                push(goTo(4), node, true);
                            }
                            break;
                        case 10:
                            {
                                Node node = new10();
                                push(goTo(4), node, true);
                            }
                            break;
                        case 11:
                            {
                                Node node = new11();
                                push(goTo(5), node, true);
                            }
                            break;
                        case 12:
                            {
                                Node node = new12();
                                push(goTo(5), node, true);
                            }
                            break;
                        case 13:
                            {
                                Node node = new13();
                                push(goTo(5), node, true);
                            }
                            break;
                        case 14:
                            {
                                Node node = new14();
                                push(goTo(6), node, true);
                            }
                            break;
                        case 15:
                            {
                                Node node = new15();
                                push(goTo(6), node, true);
                            }
                            break;
                        case 16:
                            {
                                Node node = new16();
                                push(goTo(6), node, true);
                            }
                            break;
                        case 17:
                            {
                                Node node = new17();
                                push(goTo(6), node, true);
                            }
                            break;
                        case 18:
                            {
                                Node node = new18();
                                push(goTo(6), node, true);
                            }
                            break;
                        case 19:
                            {
                                Node node = new19();
                                push(goTo(6), node, true);
                            }
                            break;
                        case 20:
                            {
                                Node node = new20();
                                push(goTo(6), node, true);
                            }
                            break;
                        case 21:
                            {
                                Node node = new21();
                                push(goTo(6), node, true);
                            }
                            break;
                        case 22:
                            {
                                Node node = new22();
                                push(goTo(6), node, true);
                            }
                            break;
                        case 23:
                            {
                                Node node = new23();
                                push(goTo(6), node, true);
                            }
                            break;
                        case 24:
                            {
                                Node node = new24();
                                push(goTo(6), node, true);
                            }
                            break;
                        case 25:
                            {
                                Node node = new25();
                                push(goTo(6), node, true);
                            }
                            break;
                        case 26:
                            {
                                Node node = new26();
                                push(goTo(6), node, true);
                            }
                            break;
                        case 27:
                            {
                                Node node = new27();
                                push(goTo(6), node, true);
                            }
                            break;
                        case 28:
                            {
                                Node node = new28();
                                push(goTo(7), node, true);
                            }
                            break;
                        case 29:
                            {
                                Node node = new29();
                                push(goTo(7), node, true);
                            }
                            break;
                        case 30:
                            {
                                Node node = new30();
                                push(goTo(7), node, true);
                            }
                            break;
                        case 31:
                            {
                                Node node = new31();
                                push(goTo(8), node, true);
                            }
                            break;
                        case 32:
                            {
                                Node node = new32();
                                push(goTo(8), node, true);
                            }
                            break;
                        case 33:
                            {
                                Node node = new33();
                                push(goTo(8), node, true);
                            }
                            break;
                        case 34:
                            {
                                Node node = new34();
                                push(goTo(8), node, true);
                            }
                            break;
                        case 35:
                            {
                                Node node = new35();
                                push(goTo(8), node, true);
                            }
                            break;
                        case 36:
                            {
                                Node node = new36();
                                push(goTo(9), node, true);
                            }
                            break;
                        case 37:
                            {
                                Node node = new37();
                                push(goTo(9), node, true);
                            }
                            break;
                        case 38:
                            {
                                Node node = new38();
                                push(goTo(9), node, true);
                            }
                            break;
                        case 39:
                            {
                                Node node = new39();
                                push(goTo(10), node, true);
                            }
                            break;
                        case 40:
                            {
                                Node node = new40();
                                push(goTo(10), node, true);
                            }
                            break;
                        case 41:
                            {
                                Node node = new41();
                                push(goTo(10), node, true);
                            }
                            break;
                        case 42:
                            {
                                Node node = new42();
                                push(goTo(10), node, true);
                            }
                            break;
                        case 43:
                            {
                                Node node = new43();
                                push(goTo(10), node, true);
                            }
                            break;
                        case 44:
                            {
                                Node node = new44();
                                push(goTo(11), node, true);
                            }
                            break;
                        case 45:
                            {
                                Node node = new45();
                                push(goTo(11), node, true);
                            }
                            break;
                        case 46:
                            {
                                Node node = new46();
                                push(goTo(11), node, true);
                            }
                            break;
                        case 47:
                            {
                                Node node = new47();
                                push(goTo(12), node, true);
                            }
                            break;
                        case 48:
                            {
                                Node node = new48();
                                push(goTo(12), node, true);
                            }
                            break;
                        case 49:
                            {
                                Node node = new49();
                                push(goTo(13), node, true);
                            }
                            break;
                        case 50:
                            {
                                Node node = new50();
                                push(goTo(13), node, true);
                            }
                            break;
                        case 51:
                            {
                                Node node = new51();
                                push(goTo(14), node, true);
                            }
                            break;
                        case 52:
                            {
                                Node node = new52();
                                push(goTo(14), node, true);
                            }
                            break;
                        case 53:
                            {
                                Node node = new53();
                                push(goTo(15), node, true);
                            }
                            break;
                        case 54:
                            {
                                Node node = new54();
                                push(goTo(16), node, true);
                            }
                            break;
                        case 55:
                            {
                                Node node = new55();
                                push(goTo(17), node, true);
                            }
                            break;
                        case 56:
                            {
                                Node node = new56();
                                push(goTo(17), node, true);
                            }
                            break;
                        case 57:
                            {
                                Node node = new57();
                                push(goTo(17), node, true);
                            }
                            break;
                        case 58:
                            {
                                Node node = new58();
                                push(goTo(17), node, true);
                            }
                            break;
                        case 59:
                            {
                                Node node = new59();
                                push(goTo(17), node, true);
                            }
                            break;
                        case 60:
                            {
                                Node node = new60();
                                push(goTo(17), node, true);
                            }
                            break;
                        case 61:
                            {
                                Node node = new61();
                                push(goTo(17), node, true);
                            }
                            break;
                        case 62:
                            {
                                Node node = new62();
                                push(goTo(17), node, true);
                            }
                            break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.next();
                        PEqExpression node1 = (PEqExpression) pop();
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token, ""["" + last_line + "","" + last_pos + ""] "" + errorMessages[errors[action[1]]]);
            }
        }
    }
",0
21489797,14,"    public boolean search(T[] collection, T target) {
        if (target == null) {
            return false;
        }
        int low = 0, high = collection.length - 1;
        while (low <= high) {
            int ix = (low + high) / 2;
            int rc = target.compareTo(collection[ix]);
            if (rc < 0) {
                high = ix - 1;
            } else if (rc > 0) {
                low = ix + 1;
            } else {
                return true;
            }
        }
        return false;
    }
",0
8739382,14,"    private static int binarySearch(int[] a, int val) {
        int low = 0;
        int high = a.length - 1;
        int mid = 0;
        int numnComparisons = 0;
        while (low <= high) {
            mid = (low + high) / 2;
            if (a[mid] > val) {
                high = mid - 1;
                numnComparisons++;
            } else if (a[mid] < val) {
                low = mid + 1;
                numnComparisons++;
            } else return mid;
        }
        return -1;
    }
",0
15150446,14,"    public ExpenditureAccount getElement(int _idExpenditureAccount) {
        int initIndex = 0;
        int endIndex = size() - 1;
        int midIndex = 0;
        while (initIndex <= endIndex) {
            midIndex = (initIndex + endIndex) / 2;
            int idExpType = ((ExpenditureAccount) elementAt(midIndex)).getIDExpenditureAccount();
            if (_idExpenditureAccount == idExpType) {
                break;
            } else if (_idExpenditureAccount > idExpType) {
                initIndex = midIndex + 1;
            } else if (_idExpenditureAccount < idExpType) {
                endIndex = midIndex - 1;
            }
        }
        if (initIndex > endIndex) {
            return null;
        } else {
            indexSelected = midIndex;
            return (ExpenditureAccount) elementAt(midIndex);
        }
    }
",0
2264195,14,"    public static int binarySearch(List pl, Comparator c, Object p) {
        int l = 0;
        int u = pl.size() - 1;
        while (l <= u) {
            int m = (l + u) / 2;
            int v = c.compare(pl.get(m), p);
            if (v > 0) {
                l = m + 1;
            } else if (v < 0) {
                u = m - 1;
            } else {
                return m;
            }
        }
        return -(l + 1);
    }
",0
18745035,14,"    public static int turns(int n, int low, int high) {
        int turns = 0;
        while (high - low >= 2) {
            turns++;
            int mid = (low + high) / 2;
            if (mid == n) {
                return turns;
            } else if (mid < n) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        assert (n == low || n == high);
        return 1 + turns;
    }
",0
13704386,14,"    public static final int binarySearch(int[] a, int key) {
        int x1 = 0;
        int x2 = a.length;
        int i = x2 / 2;
        while (x1 < x2) {
            if (a[i] == key) {
                return i;
            } else if (a[i] < key) {
                x1 = i + 1;
            } else {
                x2 = i;
            }
            i = x1 + (x2 - x1) / 2;
        }
        return -1 * (i + 1);
    }
",0
11058123,14,"    public static FieldBinding binarySearch(char[] name, FieldBinding[] sortedFields) {
        if (sortedFields == null) return null;
        int max = sortedFields.length;
        if (max == 0) return null;
        int left = 0, right = max - 1, nameLength = name.length;
        int mid = 0;
        char[] midName;
        while (left <= right) {
            mid = left + (right - left) / 2;
            int compare = compare(name, midName = sortedFields[mid].name, nameLength, midName.length);
            if (compare < 0) {
                right = mid - 1;
            } else if (compare > 0) {
                left = mid + 1;
            } else {
                return sortedFields[mid];
            }
        }
        return null;
    }
",0
12339573,14,"    public static int binSearch(int data[], int find) {
        int min = 0;
        int max = data.length - 1;
        int pos = -1;
        while (min <= max && pos == -1) {
            int mitt = (min + max) / 2;
            if (find > data[mitt]) {
                min = mitt + 1;
            } else if (find < data[mitt]) {
                max = mitt - 1;
            } else {
                pos = mitt;
            }
        }
        return pos;
    }
",0
6824299,14,"    public static int findUpperBoundary(int start, ArrayList<Tuple<Integer, HashSet<String>>> variations) {
        if (variations == null) {
            return Integer.MAX_VALUE;
        }
        int top = 0;
        int bot = variations.size();
        int mid = 0;
        while (top < bot) {
            mid = (top + bot) / 2;
            if (start < variations.get(mid).get_first()) {
                bot = mid - 1;
            } else if (start > variations.get(mid).get_first()) {
                top = mid + 1;
            } else {
                return mid;
            }
        }
        return Utils.min2(top, variations.size() - 1);
    }
",0
9118217,14,"    private int getIndex(int fromIndex, char c) {
        if (fromIndex + 1 >= mFirstChild.length) return -1;
        int low = mFirstChild[fromIndex];
        int high = mFirstChild[fromIndex + 1] - 1;
        while (low <= high) {
            int mid = (high + low) / 2;
            if (mChars[mid] == c) return mid; else if (mChars[mid] < c) low = (low == mid) ? mid + 1 : mid; else high = (high == mid) ? mid - 1 : mid;
        }
        return -1;
    }
",0
9304127,14,"    public static int findInVector(Vector v, Object objp, Orderable op, Method getter) throws IllegalArgumentException, InvocationTargetException {
        if (v == null || v.isEmpty()) return -1;
        if (v == null || objp == null || op == null) throw new IllegalArgumentException(""null arg in Utils.findInVector(Vector v, Object objp, Orderable op)"");
        int low = 0;
        int high = v.size() - 1;
        try {
            while (low <= high) {
                int mid = (low + high) / 2;
                int c = op.compareTo(objp, getter.invoke(v.elementAt(mid), null));
                if (c < 0) high = mid - 1; else if (c > 0) low = mid + 1; else return mid;
            }
        } catch (InvocationTargetException e) {
            throw new InvocationTargetException(e);
        } catch (IllegalAccessException e) {
            throw new IllegalArgumentException(""IllegalArgumentException in Utils.findInVector"");
        }
        return -1;
    }
",0
18799600,14,"        private double searchMax(double left, double delta, int depth) {
            double right = left + delta;
            mmVar.setVal(left);
            double leftVal = mmExpr.getVal();
            boolean incrLeft = mmDeriv.getVal() > 0;
            mmVar.setVal(right);
            double rightVal = mmExpr.getVal();
            boolean incrRight = mmDeriv.getVal() > 0;
            if (incrLeft && !incrRight) {
                double mid = (left + right) / 2;
                if (depth >= 13) {
                    mmVar.setVal(mid);
                    return mmExpr.getVal();
                }
                double slope = mmDeriv.getVal();
                if (slope > 0) return searchMax(mid, right, depth + 1); else return searchMax(left, mid, depth + 1);
            }
            return Math.max(leftVal, rightVal);
        }
",0
17933212,14,"    private int binarySearch(String keyword) {
        int beg = 0;
        for (int end = keys.length - 1; beg <= end; ) {
            int mid = (beg + end) / 2;
            int res = ignoreCaseComparator.compare(keys[mid], keyword);
            if (res < 0) beg = mid + 1; else if (res > 0) end = mid - 1; else return mid;
        }
        return -beg;
    }
",0
13847747,14,"    private static <T extends Comparable<? super T>> int binaryFind(List<T> list, T element, int start, int end) {
        if (end < start) return start;
        int mid = (start + end) / 2;
        T midObj = list.get(mid);
        int compare = midObj.compareTo(element);
        if (start == end) return compare < 0 ? start + 1 : start;
        if (compare == 0) return mid;
        if (compare > 0) return binaryFind(list, element, start, mid - 1); else return binaryFind(list, element, mid + 1, end);
    }
",0
6642728,14,"    private int findAt(E e) {
        int lower = 0, upper = list.size() - 1;
        int mid, comparison;
        while (lower <= upper) {
            mid = (lower + upper) / 2;
            comparison = comp.compare(e, list.get(mid));
            comparisons++;
            if (comparison < 0) {
                upper = mid - 1;
            } else if (comparison > 0) {
                lower = mid + 1;
            } else {
                return mid;
            }
        }
        return -1;
    }
",0
12404633,14,"    private int binarySearch(LinkedList<Edge> list, float value) {
        int lower = 0, middle, upper = list.size() - 1;
        while (upper >= lower) {
            middle = (upper + lower) / 2;
            int result = Float.compare(value, list.get(middle).getValue());
            if (result > 0) lower = middle + 1; else if (result < 0) upper = middle - 1; else return middle;
        }
        return lower;
    }
",0
3865956,14,"    private int getInsertIndex(DefaultMutableTreeNode parent, Object obj) {
        int childCount = parent.getChildCount();
        int index;
        if (_comparator == null) index = childCount; else {
            int low = 0;
            int high = childCount - 1;
            index = low;
            while (low <= high) {
                int mid = (low + high) / 2;
                Object midVal = parent.getChildAt(mid);
                int cmp = _comparator.compare(midVal, obj);
                if (cmp < 0) {
                    low = mid + 1;
                    index = low;
                } else if (cmp > 0) {
                    high = mid - 1;
                    index = low;
                } else {
                    index = mid;
                    break;
                }
            }
        }
        return index;
    }
",0
13135923,14,"    protected int getProperIndex(Room R) {
        if (properRooms.size() == 0) return -1;
        if (R.roomID().length() == 0) return 0;
        String roomID = R.roomID();
        synchronized (properRooms) {
            int start = 0;
            int end = properRooms.size() - 1;
            int mid = 0;
            while (start <= end) {
                mid = (end + start) / 2;
                int comp = properRooms.elementAt(mid).roomID().compareToIgnoreCase(roomID);
                if (comp == 0) return mid; else if (comp > 0) end = mid - 1; else start = mid + 1;
            }
            if (end < 0) return 0;
            if (start >= properRooms.size()) return properRooms.size() - 1;
            return mid;
        }
    }
",0
11438623,14,"    protected int search(List<Long> v, long t) {
        int low = 0;
        int mid = -1;
        int high = v.size() - 1;
        while (low <= high) {
            mid = (low + high) / 2;
            long c = v.get(mid) - t;
            if (c > 0) high = mid - 1; else if (c < 0) low = mid + 1; else break;
        }
        return mid;
    }
",0
12030975,14,"    public int lastIndexBeforeY(int y) {
        int low = 0;
        int high = list.size() - 1;
        int index = -1;
        while (low <= high) {
            index = (low + high) / 2;
            if (list.get(index).getY() < y) low = index + 1; else if (list.get(index).getY() > y) high = index - 1; else break;
        }
        return (list.get(index).getY() > y) ? index - 1 : index;
    }
",0
2622925,14,"    public int binarySearch(final double key) {
        int low = 0;
        int middle;
        int high = super.size() - 1;
        double middleValue;
        while (low <= high) {
            middle = (low + high) / 2;
            middleValue = this.doubleArray[middle];
            if (middleValue < key) {
                low = middle + 1;
            } else if (middleValue > key) {
                high = middle - 1;
            } else {
                return middle;
            }
        }
        return -(low + 1);
    }
",0
13861563,14,"    public int binarySearchFromTo(byte key, int from, int to) {
        int low = from;
        int high = to;
        while (low <= high) {
            int mid = (low + high) / 2;
            byte midVal = get(mid);
            if (midVal < key) low = mid + 1; else if (midVal > key) high = mid - 1; else return mid;
        }
        return -(low + 1);
    }
",0
16750351,14,"    public static boolean contains(int[] a, int value) {
        int lowerBound = 0;
        int upperBound = a.length - 1;
        while (upperBound - lowerBound >= 0) {
            int i = lowerBound + (upperBound - lowerBound) / 2;
            int v = a[i];
            if (v > value) {
                upperBound = i - 1;
            } else if (v < value) {
                lowerBound = i + 1;
            } else {
                return true;
            }
        }
        return false;
    }
",0
2593267,14,"    protected static final int getNextIdentifier(int table[], long value) throws SnmpStatusException {
        final int[] a = table;
        final int val = (int) value;
        if (a == null) throw noSuchObjectException;
        int low = 0;
        int max = a.length;
        int curr = low + (max - low) / 2;
        int elmt = 0;
        if (max < 1) throw noSuchObjectException;
        if (a[max - 1] <= val) throw noSuchObjectException;
        while (low <= max) {
            elmt = a[curr];
            if (val == elmt) {
                curr++;
                return a[curr];
            }
            if (elmt < val) {
                low = curr + 1;
            } else {
                max = curr - 1;
            }
            curr = low + (max - low) / 2;
        }
        return a[curr];
    }
",0
2555909,14,"    private int binarySearch(ArrayList<Relation> list, Relation rel) {
        int result = -1;
        if (list != null && rel != null) {
            int start = 0;
            int end = list.size() - 1;
            int mid = (end - start) / 2;
            while (start <= end) {
                Relation midRel = list.get(mid);
                if (midRel.getRow() == rel.getRow() && (midRel.getCol() == rel.getCol() || rel.getCol() == -1)) {
                    result = mid;
                    return result;
                } else if (rel.getRow() > midRel.getRow() || rel.getRow() == midRel.getRow() && rel.getCol() > midRel.getCol()) start = mid + 1; else if (rel.getRow() < midRel.getRow() || rel.getRow() == midRel.getRow() && rel.getCol() < midRel.getCol()) end = mid - 1;
                if (start <= end) mid = (start + end) / 2;
            }
            if (mid == 0) {
                result = Integer.MIN_VALUE;
            } else result = -mid;
        }
        return result;
    }
",0
8416570,14,"    private final int findObject(SnmpOid oid) {
        int low = 0;
        int max = size - 1;
        SnmpOid pos;
        int comp;
        int curr = low + (max - low) / 2;
        while (low <= max) {
            pos = tableoids[curr];
            comp = oid.compareTo(pos);
            if (comp == 0) return curr;
            if (oid.equals(pos) == true) {
                return curr;
            }
            if (comp > 0) {
                low = curr + 1;
            } else {
                max = curr - 1;
            }
            curr = low + (max - low) / 2;
        }
        return -1;
    }
",0
16902465,14,"    private int search(int item) {
        int start = 0;
        int end = currentEnd;
        while (end > start) {
            int m = (start + end) / 2;
            if (item == values[m]) {
                return m;
            } else if (item > values[m]) {
                start = m + 1;
            } else {
                end = m - 1;
            }
        }
        return start;
    }
",0
2283613,14,"    public final char mapChar(char c) {
        if (c < 256) {
            return latin1Map[c];
        } else {
            int bot = 0, top = characters.length - 1;
            while (top >= bot) {
                int mid = (bot + top) / 2;
                char mc = characters[mid];
                if (c == mc) return codepoints[mid]; else if (c < mc) top = mid - 1; else bot = mid + 1;
            }
            return 0;
        }
    }
",0
1005093,14,"    private static int binarySearchArtist(Vector<MusicOutputDesign> v, String value, int low, int high) {
        if (high < low) {
            return -1;
        }
        int mid = (high + low) / 2;
        if (mid > v.size()) {
            return -1;
        }
        String s = v.elementAt(mid).getArtist().replace(""\\"", ""/"");
        if (s.compareToIgnoreCase(value) > 0) {
            return binarySearchArtist(v, value, low, mid - 1);
        } else if (s.compareToIgnoreCase(value) < 0) {
            return binarySearchArtist(v, value, mid + 1, high);
        } else {
            return mid;
        }
    }
",0
9777407,14,"    public int binarySearchFromTo(float key, int from, int to) {
        int low = from;
        int high = to;
        while (low <= high) {
            int mid = (low + high) / 2;
            float midVal = get(mid);
            if (midVal < key) low = mid + 1; else if (midVal > key) high = mid - 1; else return mid;
        }
        return -(low + 1);
    }
",0
13203031,14,"    @Override
    public int idxOf(Comparable o) {
        int low = 0;
        int high = size() - 1;
        int mid, comparison;
        while (low <= high) {
            mid = (low + high) / 2;
            comparison = convert(get(mid)).compareTo(convert(o));
            if (comparison > 0) {
                high = mid - 1;
            } else if (comparison < 0) {
                low = mid + 1;
            } else {
                return mid;
            }
        }
        return -1;
    }
",0
19645139,14,"    private int indexOfKey(int key) {
        if (keys.size() == 0) return -1;
        int lowIdx = 0;
        int highIdx = keys.size() - 1;
        while (lowIdx <= highIdx) {
            int idx = (lowIdx + highIdx) / 2;
            int k = keys.get(idx);
            if (k == key) return idx;
            if (key < k) highIdx = idx - 1; else lowIdx = idx + 1;
        }
        return -(lowIdx + 1);
    }
",0
4081466,14,"    public static int SNPbinarySearch(SNPDB[] a, int x) {
        int low = 0;
        int high = a.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (a[mid].start < x) {
                low = mid + 1;
            } else if (a[mid].start > x) {
                high = mid - 1;
            } else {
                return mid;
            }
        }
        return -1;
    }
",0
20836698,14,"    private int nearBinarySearch(Object[] data, int startIndex, int endIndex, Object itemToFind) {
        Comparer order = this.order;
        int lowIndex = startIndex;
        int highIndex = endIndex;
        while ((highIndex - lowIndex) > 3) {
            int midPoint = (highIndex + lowIndex) / 2;
            if (order.lessThan(itemToFind, data[midPoint])) highIndex = midPoint - 1; else if (order.greaterThan(itemToFind, data[midPoint])) lowIndex = midPoint + 1; else return midPoint;
        }
        return highIndex;
    }
",0
5776558,14,"    public int binarySearch(final float key) {
        int low = 0;
        int middle;
        int high = super.size() - 1;
        float middleValue;
        while (low <= high) {
            middle = (low + high) / 2;
            middleValue = this.floatArray[middle];
            if (middleValue < key) {
                low = middle + 1;
            } else if (middleValue > key) {
                high = middle - 1;
            } else {
                return middle;
            }
        }
        return -(low + 1);
    }
",0
8094722,14,"    private int binaryGreaterSearch() {
        int low = 0;
        int high = count;
        int mid = 0;
        int compare = 0;
        while (low < high) {
            mid = (low + high) / 2;
            compare = compare(mid);
            if (compare < 0) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        return low == count ? -1 : low;
    }
",0
3056352,14,"    private int search(BTreeNode cluster, Object keyToSeek, int low, int high, boolean flag) throws DException {
        int cmp = 0;
        int position = -1;
        Object object = null;
        while (low <= high) {
            int mid = (low + high) / 2;
            object = cluster.getKey(mid);
            cmp = comparator.compare(keyToSeek, object);
            if (cmp > 0) low = mid + 1; else if (cmp < 0) high = mid - 1; else {
                if (cmp == 0) position = mid;
                if (flag) high = mid - 1; else low = mid + 1;
            }
        }
        return position == -1 ? -(low - 1) : position;
    }
",0
13445591,14,"    int chopMonday(int key, int array[]) {
        int min = 0;
        int max = array.length - 1;
        while (min <= max) {
            int probe = (min + max) / 2;
            if (key == array[probe]) {
                return probe;
            } else if (key > array[probe]) {
                min = probe + 1;
            } else {
                max = probe - 1;
            }
        }
        return -1;
    }
",0
14425566,14,"    public ExpenditureAccount.CCItem getElement(int _idExpenditureAccount) {
        int initIndex = 0;
        int endIndex = size() - 1;
        int midIndex = 0;
        while (initIndex <= endIndex) {
            midIndex = (initIndex + endIndex) / 2;
            int idExpAcc = ((ExpenditureAccount.CCItem) elementAt(midIndex)).getIDExpenditureAccount();
            if (_idExpenditureAccount == idExpAcc) {
                break;
            } else if (_idExpenditureAccount > idExpAcc) {
                initIndex = midIndex + 1;
            } else if (_idExpenditureAccount < idExpAcc) {
                endIndex = midIndex - 1;
            }
        }
        if (initIndex > endIndex) {
            return null;
        } else {
            indexSelected = midIndex;
            return (ExpenditureAccount.CCItem) elementAt(midIndex);
        }
    }
",0
10408425,14,"    public int findSpawnIndex(double u) {
        if (u == this.knots[this.controlPoints.length + 1]) {
            return this.controlPoints.length;
        }
        int low = this.degree;
        int high = this.controlPoints.length + 1;
        int mid = (low + high) / 2;
        while ((u < this.knots[mid]) || (u >= this.knots[mid + 1])) {
            if (u < this.knots[mid]) {
                high = mid;
            } else {
                low = mid;
            }
            mid = (low + high) / 2;
        }
        return mid;
    }
",0
18587310,14,"    private int binarySearch(Object key, int low, int high) throws DException {
        int position = -1;
        SuperComparator comparator = btree.getComparator();
        while (low <= high) {
            int mid = (low + high) / 2;
            int cmp;
            cmp = comparator.compare(getKey(mid), key);
            if (cmp < 0) low = mid + 1; else if (cmp > 0) high = mid - 1; else {
                position = mid;
                if (!btree.getDuplicateAllowed()) break;
                low = mid + 1;
            }
        }
        return position == -1 ? -(low - 1) : position;
    }
",0
14163937,14,"    static int getStatusByCode(int errcode) {
        if ((errcode & 0xC0000000) == 0xC0000000) {
            return errcode;
        } else {
            int min = 0;
            int max = DOS_ERROR_CODES.length;
            while (max >= min) {
                int mid = (min + max) / 2;
                if (errcode > DOS_ERROR_CODES[mid][0]) {
                    min = mid + 1;
                } else if (errcode < DOS_ERROR_CODES[mid][0]) {
                    max = mid - 1;
                } else {
                    return DOS_ERROR_CODES[mid][1];
                }
            }
        }
        return NT_STATUS_UNSUCCESSFUL;
    }
",0
13847749,14,"    private static <T> int binaryFind(List<T> list, T element, int start, int end, Comparator<? super T> comparer) {
        if (end < start) return start;
        int mid = (start + end) / 2;
        T midObj = list.get(mid);
        int compare = comparer.compare(midObj, element);
        if (start == end) return compare < 0 ? start + 1 : start;
        if (compare == 0) return mid;
        if (compare > 0) return binaryFind(list, element, start, mid - 1, comparer); else return binaryFind(list, element, mid + 1, end, comparer);
    }
",0
22236591,14,"    protected int binarySearchForNearest(int val, int begin, int end) {
        int mid = (begin + end) / 2;
        int midval = array.get(mid);
        if (mid == end) return midval >= val ? mid : -1;
        if (midval < val) {
            if (array.get(mid + 1) >= val) return mid + 1;
            return binarySearchForNearest(val, mid + 1, end);
        } else {
            if (midval == val) return mid;
            return binarySearchForNearest(val, begin, mid);
        }
    }
",0
12555845,14,"    public int binarySearch(final byte key) {
        int low = 0;
        int middle;
        int high = super.size() - 1;
        byte middleValue;
        while (low <= high) {
            middle = (low + high) / 2;
            middleValue = this.byteArray[middle];
            if (middleValue < key) {
                low = middle + 1;
            } else if (middleValue > key) {
                high = middle - 1;
            } else {
                return middle;
            }
        }
        return -(low + 1);
    }
",0
16337942,14,"    private int binarySearch(int[] table, long target, int lowerBound, int upperBound) {
        int currentIndex;
        currentIndex = (lowerBound + upperBound) / 2;
        if (table[currentIndex] == target || ((table[currentIndex] > target && target > (currentIndex != 0 ? table[currentIndex - 1] : 0)))) {
            return currentIndex;
        } else if (lowerBound > upperBound) {
            return -1;
        } else {
            if (table[currentIndex] < target) {
                return binarySearch(table, target, currentIndex + 1, upperBound);
            } else {
                return binarySearch(table, target, lowerBound, currentIndex - 1);
            }
        }
    }
",0
6519458,14,"    public ImportNode search(String name) {
        int low = 0;
        int high = imports.size() - 1;
        int mid, cmp;
        ImportNode node;
        while (low <= high) {
            mid = (low + high) / 2;
            node = (ImportNode) imports.get(mid);
            cmp = node.name.compareTo(name);
            if (cmp < 0) low = mid + 1; else if (cmp > 0) high = mid - 1; else return node;
        }
        return null;
    }
",0
1661464,14,"    protected Integer insert(TreeMap<Integer, Integer> thresh, Integer j, Integer k) {
        if (isNonzero(k) && isGreaterThan(thresh, k, j) && isLessThan(thresh, k - 1, j)) {
            thresh.put(k, j);
        } else {
            int highIndex = -1;
            if (isNonzero(k)) {
                highIndex = k;
            } else if (!thresh.isEmpty()) {
                highIndex = thresh.lastKey();
            }
            if (highIndex == -1 || j.compareTo(thresh.get(thresh.lastKey())) > 0) {
                append(thresh, j);
                k = highIndex + 1;
            } else {
                int lowIndex = 0;
                while (lowIndex <= highIndex) {
                    int index = (highIndex + lowIndex) / 2;
                    Integer val = thresh.get(index);
                    int compareResult = j.compareTo(val);
                    if (compareResult == 0) {
                        return null;
                    } else if (compareResult > 0) {
                        lowIndex = index + 1;
                    } else {
                        highIndex = index - 1;
                    }
                }
                thresh.put(lowIndex, j);
                k = lowIndex;
            }
        }
        return k;
    }
",0
6824301,14,"    public static int findUpperBoundarySNP(SNP s, ArrayList<SNP> variations) {
        if (variations == null) {
            return Integer.MAX_VALUE;
        }
        int top = 0;
        int bot = variations.size();
        int mid = 0;
        while (top < bot) {
            mid = (top + bot) / 2;
            if (s.compareTo(variations.get(mid)) < 0) {
                bot = mid - 1;
            } else if (s.compareTo(variations.get(mid)) > 0) {
                top = mid + 1;
            } else {
                return mid;
            }
        }
        return Utils.max2(0, Utils.min2(top, variations.size() - 1));
    }
",0
12018823,14,"    private boolean binarySearch(int down, int up, Constant searchkey) {
        if (down > up) return false;
        int mid = (down + up) / 2;
        int ans = getData(mid).compareTo(searchkey);
        if (ans == 0) return true;
        if (ans > 0) return binarySearch(down, mid - 1, searchkey); else return binarySearch(mid + 1, up, searchkey);
    }
",0
7007090,14,"    public int binary_search(int idx, char size, char key) {
        int left = 0, right, middle;
        ST_NODE node;
        right = (int) size - 1;
        while (left <= right) {
            middle = (left + right) / 2;
            node = this.nf[middle + idx].node;
            if (key > node.K) left = middle + 1; else if (key < node.K) right = middle - 1; else return (idx + middle);
        }
        return 0;
    }
",0
13847750,14,"    private static <T extends Comparable<? super T>> int binarySearch(List<T> list, T element, int start, int end) {
        if (end < start) return -1;
        int mid = (start + end) / 2;
        T midObj = list.get(mid);
        int compare = midObj.compareTo(element);
        if (compare == 0) return mid;
        if (start == end) return -1;
        if (compare > 0) return binarySearch(list, element, start, mid - 1); else return binarySearch(list, element, mid + 1, end);
    }
",0
17878789,14,"    public static int searchStringCharOffset(String text, Font font, int xPixelOffset) {
        int first = 0;
        int upto = text.length();
        int mid = 0;
        while (first < upto) {
            mid = (first + upto) / 2;
            int charPos1 = font.getWidth(text.substring(0, mid));
            int charPos2 = charPos1 + font.getWidth(text.substring(mid, mid + 1));
            if (xPixelOffset < charPos1) {
                upto = mid;
            } else if (xPixelOffset > charPos2) {
                first = mid + 1;
            } else {
                break;
            }
        }
        return mid;
    }
",0
23573903,14,"    public static CanonFlopDetail containing(int turnCanon) {
        int lo = 0;
        int hi = Flop.CANONS - 1;
        while (lo <= hi) {
            int mid = lo + (hi - lo) / 2;
            CanonRange turnRange = DETAILS.getTurnRange(mid);
            if (turnRange.from() > turnCanon) {
                hi = mid - 1;
            } else if (turnRange.toInclusive() < turnCanon) {
                lo = mid + 1;
            } else {
                return lookup(mid);
            }
        }
        return null;
    }
",0
1687013,14,"    private NodeProxy get(int docIdx, NodeId nodeId) {
        if (!isSorted()) sort();
        int low = documentOffsets[docIdx];
        int high = low + (documentLengths[docIdx] - 1);
        int mid, cmp;
        NodeProxy p;
        while (low <= high) {
            mid = (low + high) / 2;
            p = nodes[mid];
            cmp = p.getNodeId().compareTo(nodeId);
            if (cmp == 0) {
                return p;
            }
            if (cmp > 0) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return null;
    }
",0
3287280,14,"    private static int binarySearchAlbum(Vector<MusicOutputDesign> v, int low, int high) {
        if (high < low) {
            return -1;
        }
        int mid = (high + low) / 2;
        String s = v.elementAt(mid).getAlbum().replace(""\\"", ""/"");
        if (s.compareToIgnoreCase(artist) > 0) {
            return binarySearchAlbum(v, low, mid - 1);
        } else if (s.compareToIgnoreCase(artist) < 0) {
            return binarySearchAlbum(v, mid + 1, high);
        } else {
            return mid;
        }
    }
",0
3056350,14,"    private int search(BTreeNode cluster, _IndexPredicate[] condition, _VariableValues reader, int low, int high, boolean flag) throws DException {
        if (condition == null) return flag ? low : high;
        int cmp = 0;
        int position = -1;
        int length = 0;
        for (int i = 0; i < condition.length && condition[i] != null; i++, length++) ;
        Object object = null;
        while (low <= high) {
            int mid = (low + high) / 2;
            object = cluster.getKey(mid);
            ((BTreeReader) reader).setValue(object);
            cmp = evaluate1(condition, reader, length);
            if (cmp > 0) low = mid + 1; else if (cmp < 0) high = mid - 1; else {
                cmp = evaluate(condition, reader, length);
                if (cmp == 0) position = mid;
                if (flag) high = mid - 1; else low = mid + 1;
            }
        }
        return position == -1 ? -(low - 1) : position;
    }
",0
19853680,14,"    public int findIdx(int ofs) {
        int low, high;
        int idx;
        int tmp;
        low = 0;
        high = instructions.size() - 1;
        while (low <= high) {
            idx = (low + high) / 2;
            tmp = instructions.get(idx).ofs;
            if (tmp < ofs) {
                low = idx + 1;
            } else if (tmp > ofs) {
                high = idx - 1;
            } else {
                return idx;
            }
        }
        throw new RuntimeException(""no such ofs: "" + ofs);
    }
",0
11503532,14,"    static int mostSigFibonacci(long[] fibs, long n) {
        int low = 0;
        int high = fibs.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (fibs[mid] < n) low = (low == mid) ? mid + 1 : mid; else if (fibs[mid] > n) high = (high == mid) ? mid - 1 : mid; else return mid;
        }
        return low - 1;
    }
",0
14431190,14,"    public int binarySearch(String key, String valueToSearch) {
        IndexRow currRow = myIndex.getRow(key);
        int low = 0;
        int high = currRow.getRowSize() - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            int c = valueToSearch.compareTo(currRow.getIndex(mid).getEntryId());
            if (c < 0) high = mid - 1; else if (c > 0) low = mid + 1; else return mid;
        }
        return -1;
    }
",0
16699355,14,"    private int indexOfValue(int val) {
        if (values.size() == 0) return -1;
        int lowIdx = 0;
        int highIdx = values.size() - 1;
        while (lowIdx <= highIdx) {
            int idx = (lowIdx + highIdx) / 2;
            int v = values.get(idx);
            if (v == val) return idx;
            if (val < v) highIdx = idx - 1; else lowIdx = idx + 1;
        }
        return -(lowIdx + 1);
    }
",0
6685506,14,"    private static int binarySearch(int[] array, int leftIndex, int rightIndex, int value) {
        if (leftIndex == rightIndex && array[leftIndex] != value) {
            return -1;
        }
        int middleIndex = (leftIndex + rightIndex) / 2;
        if (array[middleIndex] == value) {
            return middleIndex;
        } else if (array[middleIndex] > value) {
            return binarySearch(array, middleIndex + 1, rightIndex, value);
        } else {
            return binarySearch(array, leftIndex, middleIndex - 1, value);
        }
    }
",0
3298481,14,"    private int binarySearch(long key) {
        int low = 0;
        int high = (rangeCount * 2) - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            long midVal = ranges[mid];
            if (midVal < key) {
                low = mid + 1;
            } else if (midVal > key) {
                high = mid - 1;
            } else {
                return mid;
            }
        }
        return -(low + 1);
    }
",0
21015768,14,"    public final double getMiddle() {
        if (is360()) {
            return angle1 + Math.PI;
        }
        double result = (angle1 + angle2) / 2;
        if (angle2 < angle1) {
            result += Math.PI;
        }
        return result;
    }
",0
757691,14,"    public static int binarySearch(Vector<possibleLayout> layouts, float cost, int low, int high) {
        int middle;
        float costTest;
        while (low <= high) {
            middle = (low + high) / 2;
            costTest = layouts.get(middle).newLayout.stateCost;
            if (costTest == cost) {
                return middle + 1;
            } else if (costTest > cost) {
                high = middle - 1;
            } else {
                low = middle + 1;
            }
        }
        if (low >= (layouts.size() - 1)) {
            costTest = layouts.get(layouts.size() - 1).newLayout.stateCost;
            if (costTest > cost) {
                return (layouts.size());
            } else {
                return layouts.size() - 1;
            }
        } else if (high <= 0) {
            costTest = layouts.get(0).newLayout.stateCost;
            if (costTest > cost) {
                return 0;
            } else {
                return 1;
            }
        } else {
            if (layouts.get(low).newLayout.stateCost < cost) {
                return low + 1;
            } else {
                return low;
            }
        }
    }
",0
1488689,14,"    protected Token getToken() throws IOException, LexerException {
        int dfa_state = 0;
        int start_pos = pos;
        int start_line = line;
        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;
        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);
        while (true) {
            int c = getChar();
            if (c != -1) {
                switch(c) {
                    case 10:
                        if (cr) {
                            cr = false;
                        } else {
                            line++;
                            pos = 0;
                        }
                        break;
                    case 13:
                        line++;
                        pos = 0;
                        cr = true;
                        break;
                    default:
                        pos++;
                        cr = false;
                        break;
                }
                ;
                text.append((char) c);
                do {
                    int oldState = (dfa_state < -1) ? (-2 - dfa_state) : dfa_state;
                    dfa_state = -1;
                    int[][] tmp1 = gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;
                    while (low <= high) {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];
                        if (c < tmp2[0]) {
                            high = middle - 1;
                        } else if (c > tmp2[1]) {
                            low = middle + 1;
                        } else {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                } while (dfa_state < -1);
            } else {
                dfa_state = -1;
            }
            if (dfa_state >= 0) {
                if (accept[dfa_state] != -1) {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            } else {
                if (accept_state != -1) {
                    switch(accept_token) {
                        case 0:
                            {
                                Token token = new0(getText(accept_length), start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 0:
                                        state = State.TICK_STATE;
                                        break;
                                    case 2:
                                        state = State.INIT_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 1:
                            {
                                Token token = new1(start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 0:
                                        state = State.INIT_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 2:
                            {
                                Token token = new2(start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 0:
                                        state = State.INIT_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 3:
                            {
                                Token token = new3(getText(accept_length), start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 0:
                                        state = State.INIT_STATE;
                                        break;
                                    case 1:
                                        state = State.OCL_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 4:
                            {
                                Token token = new4(getText(accept_length), start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 0:
                                        state = State.INIT_STATE;
                                        break;
                                    case 1:
                                        state = State.OCL_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 5:
                            {
                                Token token = new5(start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 0:
                                        state = State.INIT_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 6:
                            {
                                Token token = new6(start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 0:
                                        state = State.INIT_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 7:
                            {
                                Token token = new7(start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 0:
                                        state = State.INIT_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 8:
                            {
                                Token token = new8(start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 0:
                                        state = State.INIT_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 9:
                            {
                                Token token = new9(start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 0:
                                        state = State.INIT_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 10:
                            {
                                Token token = new10(start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 0:
                                        state = State.INIT_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 11:
                            {
                                Token token = new11(getText(accept_length), start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 0:
                                        state = State.INIT_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 12:
                            {
                                Token token = new12(getText(accept_length), start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 0:
                                        state = State.INIT_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 13:
                            {
                                Token token = new13(start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 0:
                                        state = State.INIT_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 14:
                            {
                                Token token = new14(start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 0:
                                        state = State.INIT_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 15:
                            {
                                Token token = new15(start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 0:
                                        state = State.INIT_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 16:
                            {
                                Token token = new16(start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 0:
                                        state = State.INIT_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 17:
                            {
                                Token token = new17(start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 0:
                                        state = State.INIT_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 18:
                            {
                                Token token = new18(start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 0:
                                        state = State.INIT_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 19:
                            {
                                Token token = new19(start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 0:
                                        state = State.INIT_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 20:
                            {
                                Token token = new20(start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 0:
                                        state = State.INIT_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 21:
                            {
                                Token token = new21(start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 0:
                                        state = State.INIT_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 22:
                            {
                                Token token = new22(start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 0:
                                        state = State.INIT_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 23:
                            {
                                Token token = new23(start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 0:
                                        state = State.OCL_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 24:
                            {
                                Token token = new24(getText(accept_length), start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 0:
                                        state = State.INIT_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 25:
                            {
                                Token token = new25(getText(accept_length), start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 0:
                                        state = State.INIT_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 26:
                            {
                                Token token = new26(getText(accept_length), start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 0:
                                        state = State.INIT_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 27:
                            {
                                Token token = new27(getText(accept_length), start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 0:
                                        state = State.INIT_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 28:
                            {
                                Token token = new28(getText(accept_length), start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 0:
                                        state = State.INIT_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 29:
                            {
                                Token token = new29(getText(accept_length), start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 0:
                                        state = State.INIT_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 30:
                            {
                                Token token = new30(getText(accept_length), start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 1:
                                        state = State.INIT_STATE;
                                        break;
                                }
                                return token;
                            }
                        case 31:
                            {
                                Token token = new31(getText(accept_length), start_line + 1, start_pos + 1);
                                pushBack(accept_length);
                                pos = accept_pos;
                                line = accept_line;
                                switch(state.id()) {
                                    case 2:
                                        state = State.TICK_STATE;
                                        break;
                                }
                                return token;
                            }
                    }
                } else {
                    if (text.length() > 0) {
                        throw new LexerException(""["" + (start_line + 1) + "","" + (start_pos + 1) + ""]"" + "" Unknown token: "" + text);
                    } else {
                        EOF token = new EOF(start_line + 1, start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }
",0
2078291,14,"    private static int binarySearch(int[] a, int count, int[] key, int size, Comparator c) {
        int low = 0;
        int high = count;
        while (low <= high) {
            int mid = (low + high) / 2;
            int cmp = c.compare(a, mid * size, key, 0);
            if (cmp < 0) low = mid + 1; else if (cmp > 0) high = mid - 1; else return mid;
        }
        return -(low + 1);
    }
",0
12196283,14,"    private int binarySearch() {
        int low = 0;
        int high = rowCount;
        int mid = 0;
        while (low < high) {
            mid = (low + high) / 2;
            if (rowComparator.greaterThan(mid)) {
                high = mid;
            } else {
                if (rowComparator.lessThan(mid)) {
                    low = mid + 1;
                } else {
                    return mid;
                }
            }
        }
        return -1;
    }
",0
1512641,14,"    protected Integer insert(Integer j, Integer k) {
        if (isNonzero(k) && isGreaterThan(k, j) && isLessThan(k - 1, j)) {
            thresh.put(k, j);
        } else {
            int high = -1;
            if (isNonzero(k)) {
                high = k;
            } else if (thresh.size() > 0) {
                high = thresh.lastKey();
            }
            if (high == -1 || j.compareTo(getLastValue()) > 0) {
                append(j);
                k = high + 1;
            } else {
                int low = 0;
                while (low <= high) {
                    int index = (high + low) / 2;
                    Integer val = thresh.get(index);
                    int cmp = j.compareTo(val);
                    if (cmp == 0) {
                        return null;
                    } else if (cmp > 0) {
                        low = index + 1;
                    } else {
                        high = index - 1;
                    }
                }
                thresh.put(low, j);
                k = low;
            }
        }
        return k;
    }
",0
2091145,14,"    public int locateIndex(int index) {
        int min = 0;
        int max = m_Indices.length - 1;
        while (max >= min) {
            int current = (max + min) / 2;
            if (m_Indices[current] > index) {
                max = current - 1;
            } else if (m_Indices[current] < index) {
                min = current + 1;
            } else {
                return current;
            }
        }
        return max;
    }
",0
17306945,14,"    public int go(int[] array, int target) {
        int start = 0;
        int end = array.length - 1;
        while (end >= start) {
            int currentPosition = (end + start) / 2;
            if (array[currentPosition] == target) return currentPosition; else if (array[currentPosition] > target) {
                end = currentPosition - 1;
            } else {
                start = currentPosition + 1;
            }
        }
        return -1;
    }
",0
1154761,14,"    public static int binarySearch(List list, Object key, Comparator c) {
        if (c == null) return binarySearch(list, key);
        if (list instanceof AbstractSequentialList) {
            ListIterator i = list.listIterator();
            while (i.hasNext()) {
                int cmp = c.compare(i.next(), key);
                if (cmp == 0) return i.previousIndex(); else if (cmp > 0) return -i.nextIndex();
            }
            return -i.nextIndex() - 1;
        }
        int low = 0;
        int high = list.size() - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            Object midVal = list.get(mid);
            int cmp = c.compare(midVal, key);
            if (cmp < 0) low = mid + 1; else if (cmp > 0) high = mid - 1; else return mid;
        }
        return -(low + 1);
    }
",0
6137746,14,"    public static InstructionHandle findHandle(InstructionHandle[] ihs, int[] pos, int count, int target) {
        int l = 0, r = count - 1;
        do {
            int i = (l + r) / 2;
            int j = pos[i];
            if (j == target) {
                return ihs[i];
            } else if (target < j) {
                r = i - 1;
            } else {
                l = i + 1;
            }
        } while (l <= r);
        return null;
    }
",0
9756189,14,"    private void binarySearchForWordAndPartOfSpeechOccurrenceCounterAndUpdateRecipient(Turn t, LexiconEntry lx1) {
        int lowestPossibleLoc = 0;
        int highestPossibleLoc = wordsReceived.size() - 1;
        int middle = (lowestPossibleLoc + highestPossibleLoc) / 2;
        while (highestPossibleLoc >= lowestPossibleLoc) {
            middle = (lowestPossibleLoc + highestPossibleLoc) / 2;
            WordPartOfSpeechOccurrenceCounterRecipient wposoccr = (WordPartOfSpeechOccurrenceCounterRecipient) wordsReceived.elementAt(middle);
            LexiconEntry lxe = wposoccr.getLexEntry();
            int comparator = (lx1.getWord() + lx1.getPartOfSpeech()).compareToIgnoreCase(lxe.getWord() + lxe.getPartOfSpeech());
            if (comparator == 0) {
                wposoccr.update(t);
                return;
            } else if (comparator < 0) {
                highestPossibleLoc = middle - 1;
            } else {
                lowestPossibleLoc = middle + 1;
            }
        }
        WordPartOfSpeechOccurrenceCounterRecipient wposoccr = new WordPartOfSpeechOccurrenceCounterRecipient(t, lx1, this);
        wordsReceived.insertElementAt(wposoccr, lowestPossibleLoc);
    }
",0
1078356,14,"    private int getIndexListPosition(int index) {
        int bottom = 0;
        int top = getSize() - 1;
        int center = (top + bottom) / 2;
        while (indexList[center] != index && bottom < top) {
            if (indexList[center] > index) {
                top = center - 1;
            } else {
                bottom = center + 1;
            }
            center = (top + bottom) / 2;
        }
        return center;
    }
",0
19349064,14,"    public static int binarySearch(int[] array, int value) {
        int low = 0;
        int high = array.length - 1;
        int middle;
        while (low <= high) {
            middle = (low + high) / 2;
            for (int i = 0; i < array.length; i++) {
                System.out.print(array[i]);
                if (i == middle) {
                    System.out.print(""#"");
                }
                System.out.print("" "");
            }
            System.out.println();
            if (array[middle] == value) {
                return middle;
            }
            if (value < array[middle]) {
                high = middle - 1;
            }
            if (value > array[middle]) {
                low = middle + 1;
            }
        }
        return -1;
    }
",0
6824300,14,"    public static int findUpperBoundarySNP(int start, ArrayList<Tuple<SNP, HashSet<String>>> variations) {
        if (variations == null) {
            return Integer.MAX_VALUE;
        }
        int top = 0;
        int bot = variations.size();
        int mid = 0;
        while (top < bot) {
            mid = (top + bot) / 2;
            if (start < variations.get(mid).get_first().get_position()) {
                bot = mid - 1;
            } else if (start > variations.get(mid).get_first().get_position()) {
                top = mid + 1;
            } else {
                return mid;
            }
        }
        return Utils.max2(0, Utils.min2(top, variations.size() - 1));
    }
",0
1005094,14,"    private static int binarySearchAlbum(Vector<MusicOutputDesign> v, String value, int low, int high) {
        if (high < low) {
            return -1;
        }
        int mid = (high + low) / 2;
        String s = v.elementAt(mid).getAlbum().replace(""\\"", ""/"");
        if (s.compareToIgnoreCase(value) > 0) {
            return binarySearchArtist(v, value, low, mid - 1);
        } else if (s.compareToIgnoreCase(value) < 0) {
            return binarySearchArtist(v, value, mid + 1, high);
        } else {
            return mid;
        }
    }
",0
22576645,14,"    public int insertRange(LongRange other) {
        int lo = 0;
        int hi = _ranges.size() - 1;
        while (lo <= hi) {
            int mid = (lo + hi) / 2;
            LongRange r = _ranges.get(mid);
            final int compare = other.compareTo(r);
            if (compare == 0) {
                return -1;
            } else if (compare < 0) {
                hi = mid - 1;
            } else {
                lo = mid + 1;
            }
        }
        _ranges.add(lo, other);
        return lo;
    }
",0
10963701,14,"    public int binarySearch(final long key) {
        int low = 0;
        int middle;
        int high = super.size() - 1;
        long middleValue;
        while (low <= high) {
            middle = (low + high) / 2;
            middleValue = this.longArray[middle];
            if (middleValue < key) {
                low = middle + 1;
            } else if (middleValue > key) {
                high = middle - 1;
            } else {
                return middle;
            }
        }
        return -(low + 1);
    }
",0
6080010,14,"    public int binarySearch(long searchKey) {
        int lowerBound = 0;
        int upperBound = nElems - 1;
        int cruIn;
        while (true) {
            cruIn = (lowerBound + upperBound) / 2;
            if (a[cruIn] == searchKey) {
                return cruIn;
            } else if (lowerBound > upperBound) {
                return -1;
            } else {
                if (a[cruIn] < searchKey) {
                    lowerBound = cruIn + 1;
                } else {
                    upperBound = cruIn - 1;
                }
            }
        }
    }
",0
19291120,14,"    private TrieNode binarySearch(List<TrieNode> subNodes, char c) {
        int start = 0;
        int end = subNodes.size() - 1;
        int mid = 0;
        while (start <= end) {
            mid = (start + end) / 2;
            TrieNode tn = subNodes.get(mid);
            int cmpValue = tn.getCh() - c;
            if (cmpValue == 0) {
                return tn;
            } else if (cmpValue < 0) {
                start = mid + 1;
            } else if (cmpValue > 0) {
                end = mid - 1;
            }
        }
        return null;
    }
",0
21090611,14,"    public int findProbabilityID(int thirdWordID) {
        int mid, start = 0, end = getNumberNGrams();
        int trigram = -1;
        while ((end - start) > 0) {
            mid = (start + end) / 2;
            int midWordID = getWordID(mid);
            if (midWordID < thirdWordID) {
                start = mid + 1;
            } else if (midWordID > thirdWordID) {
                end = mid;
            } else {
                trigram = getProbabilityID(mid);
                break;
            }
        }
        return trigram;
    }
",0
22211156,14,"    public static int binarySearch(long[] data, long key, int low, int high) throws IllegalArgumentException {
        if (data == null) {
            throw new IllegalArgumentException(""null array"");
        }
        if (data.length == 0) {
            return -1;
        }
        if (low <= high && (low < 0 || high < 0)) {
            throw new IllegalArgumentException(""can't search negative indices"");
        }
        if (high > data.length - 1) {
            high = data.length - 1;
        }
        if (low <= high) {
            int mid = (low + high) / 2;
            long midValue = data[mid];
            if (midValue == key) {
                return mid;
            } else if (midValue > key) {
                return binarySearch(data, key, low, mid - 1);
            } else {
                return binarySearch(data, key, mid + 1, high);
            }
        } else {
            return -1;
        }
    }
",0
12628208,14,"    private int binarySearch(Object key) {
        int lower = fromIndex;
        int upper = toIndex - 1;
        while (lower <= upper) {
            int middle = lower + (upper - lower) / 2;
            int c = unsafeCompare(key, elements[middle]);
            if (c < 0) {
                upper = middle - 1;
            } else if (c > 0) {
                lower = middle + 1;
            } else {
                return middle;
            }
        }
        return -lower - 1;
    }
",0
8416572,14,"    private final int getInsertionPoint(SnmpOid oid, boolean fail) throws SnmpStatusException {
        final int failStatus = SnmpStatusException.snmpRspNotWritable;
        int low = 0;
        int max = size - 1;
        SnmpOid pos;
        int comp;
        int curr = low + (max - low) / 2;
        while (low <= max) {
            pos = tableoids[curr];
            comp = oid.compareTo(pos);
            if (comp == 0) {
                if (fail) throw new SnmpStatusException(failStatus, curr); else return curr + 1;
            }
            if (comp > 0) {
                low = curr + 1;
            } else {
                max = curr - 1;
            }
            curr = low + (max - low) / 2;
        }
        return curr;
    }
",0
18272676,14,"    public int getLocation(SeqFeatureI feature, long low, long high) {
        int bot = 0;
        int top = features.size() - 1;
        while (bot <= top) {
            int mid = (bot + top) / 2;
            SeqFeatureI midFeature = (SeqFeatureI) features.elementAt(mid);
            long midLow = midFeature.getLow();
            int cmp = 0;
            if (midLow > low) {
                cmp = 1;
            } else if (midLow < low) {
                cmp = -1;
            }
            if (cmp == 0) {
                long midHigh = midFeature.getHigh();
                if (midHigh > high) {
                    cmp = 1;
                } else if (midHigh < high) {
                    cmp = -1;
                }
            }
            if (cmp < 0) bot = mid + 1; else if (cmp > 0) top = mid - 1; else return mid;
        }
        return bot;
    }
",0
13135933,14,"    public Room getRoom(String roomID) {
        if (properRooms.size() == 0) return null;
        if (roomID.length() == 0) return null;
        synchronized (properRooms) {
            if (roomID.toUpperCase().startsWith(Name().toUpperCase() + ""#"")) roomID = Name() + roomID.substring(Name().length());
            int start = 0;
            int end = properRooms.size() - 1;
            while (start <= end) {
                int mid = (end + start) / 2;
                int comp = properRooms.elementAt(mid).roomID().compareToIgnoreCase(roomID);
                if (comp == 0) return properRooms.elementAt(mid); else if (comp > 0) end = mid - 1; else start = mid + 1;
            }
        }
        return null;
    }
",0
6395519,14,"    private final int indexOf(String stringI) {
        int lo = 0, hi = strings.size() - 1, idx;
        String entry;
        for (idx = (hi + lo) / 2; lo <= hi; idx = (hi + lo) / 2) {
            entry = (String) strings.elementAt(idx);
            int cmpr = entry.compareTo(stringI);
            if (cmpr == 0) {
                return (idx);
            } else if (cmpr < 0) {
                lo = idx + 1;
            } else {
                hi = idx - 1;
            }
        }
        return (-(lo + 1));
    }
",0
8089386,14,"    protected Object getCatalogObject(DVector list, String name, int dim) {
        synchronized (list) {
            try {
                if (list.size() == 0) return null;
                int start = 0;
                int end = list.size() - 1;
                while (start <= end) {
                    int mid = (end + start) / 2;
                    int comp = ((Environmental) list.elementAt(mid, 1)).Name().compareToIgnoreCase(name);
                    if (comp == 0) return list.elementAt(mid, dim); else if (comp > 0) end = mid - 1; else start = mid + 1;
                }
            } catch (Exception e) {
            }
            return null;
        }
    }
",0
18934461,14,"    public VarNode search(String name) {
        int low = 0;
        int high = variables.size() - 1;
        int mid, cmp;
        VarNode node;
        while (low <= high) {
            mid = (low + high) / 2;
            node = (VarNode) variables.get(mid);
            cmp = node.getIdentifier().compareTo(name);
            if (cmp < 0) low = mid + 1; else if (cmp > 0) high = mid - 1; else return node;
        }
        return null;
    }
",0
14519292,14,"    private int binarySearch(Candidate candidate, Vector counterExample, Boolean[] memoized, int low, int high) throws SETException {
        int testPoint1 = (low + high) / 2;
        int testPoint2 = testPoint1 + 1;
        boolean alpha1, alpha2;
        if (memoized[testPoint1] != null) {
            alpha1 = memoized[testPoint1].booleanValue();
        } else {
            alpha1 = getAlpha(candidate, counterExample, testPoint1);
            memoized[testPoint1] = new Boolean(alpha1);
        }
        if (memoized[testPoint2] != null) {
            alpha2 = memoized[testPoint2].booleanValue();
        } else {
            alpha2 = getAlpha(candidate, counterExample, testPoint2);
            memoized[testPoint2] = new Boolean(alpha2);
        }
        if (alpha1 != alpha2) {
            return (testPoint1);
        } else if (alpha1 == memoized[0].booleanValue()) {
            return (binarySearch(candidate, counterExample, memoized, testPoint1 + 1, high));
        } else {
            return (binarySearch(candidate, counterExample, memoized, low, testPoint1 - 1));
        }
    }
",0
11273888,14,"    public int getYearStatIndex(int year) {
        int start = 0;
        int end = yearStatsIdx - 1;
        int mid = end / 2;
        int found = -1;
        int n = -1;
        while (start <= end && found == -1) {
            if ((n = yearStats[mid].getYear()) == year) {
                found = mid;
            } else if (year < n) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
            mid = (start + end) / 2;
        }
        return found;
    }
",0
6771823,14,"    public int findNeighbor(float targetVal, float[] values) {
        int low = 0;
        int high = values.length - 1;
        int middle;
        while (low <= high) {
            middle = (low + high) / 2;
            if (targetVal == values[middle]) return middle; else if (targetVal < values[middle]) high = middle - 1; else low = middle + 1;
        }
        if (Math.abs(targetVal - values[high]) > Math.abs(targetVal - values[low])) return low; else return high;
    }
",0
16335027,14,"    private boolean isELReserved(String id) {
        int i = 0;
        int j = reservedWords.length;
        while (i < j) {
            int k = (i + j) / 2;
            int result = reservedWords[k].compareTo(id);
            if (result == 0) {
                return true;
            }
            if (result < 0) {
                i = k + 1;
            } else {
                j = k;
            }
        }
        return false;
    }
",0
1894837,14,"    private int getChromosomPositionInArray(ArrayList s, String[] values) {
        int low = 0;
        int high = s.size() - 1;
        int pos = low;
        int tmpChr;
        String c = values[2];
        if (c.equalsIgnoreCase(""X"")) tmpChr = Sample.X; else if (c.equalsIgnoreCase(""Y"")) tmpChr = Sample.Y; else tmpChr = (new Integer(c)).intValue();
        tmpChr--;
        while (low <= high) {
            int mid = (low + high) / 2;
            int chromosome = ((Sample) s.get(mid)).getChromosomeID() - 1;
            if (chromosome > tmpChr) {
                high = mid - 1;
            } else if (chromosome < tmpChr) {
                low = mid + 1;
                pos = low;
            } else {
                pos = mid;
                break;
            }
        }
        if (s.size() != 0 && pos > 0) {
            while (pos < s.size() && pos > 0 && ((Sample) s.get(pos - 1)).getChromosomeID() - 1 == tmpChr) pos--;
            while (pos < s.size() && ((Sample) s.get(pos)).getChromosomeID() - 1 == tmpChr) {
                int v = Integer.parseInt(values[3]);
                int map = ((Sample) s.get(pos)).getGeneStart();
                if (v > map) pos++; else return pos;
            }
        }
        return pos;
    }
",0
8547390,14,"    private int insertionPosition(Item[] items, ViewerSorter sorter, int lastInsertion, Object element) {
        int size = items.length;
        if (sorter == null) return size;
        int min = lastInsertion, max = size - 1;
        while (min <= max) {
            int mid = (min + max) / 2;
            Object data = items[mid].getData();
            int compare = sorter.compare(this, data, element);
            if (compare == 0) {
                return mid;
            }
            if (compare < 0) min = mid + 1; else max = mid - 1;
        }
        return min;
    }
",0
9582031,14,"    public static int binarySearch(Comparable[] list, Comparable toFind) {
        int low = 0;
        int high = list.length - 1;
        int mid;
        while (low <= high) {
            mid = (low + high) / 2;
            if (list[mid].compareTo(toFind) < 0) {
                low = mid + 1;
            } else if (list[mid].compareTo(toFind) > 0) {
                high = mid - 1;
            } else {
                return mid;
            }
        }
        lowGlobal = low;
        return NOT_FOUND;
    }
",0
12588156,14,"    private static Comparable binarySearch(Comparable[] a, Comparable x) {
        int low = 0;
        int high = a.length - 1;
        int mid;
        while (low <= high) {
            mid = (low + high) / 2;
            if (a[mid].compareTo(x) < 0) low = mid + 1; else if (a[mid].compareTo(x) > 0) high = mid - 1; else return a[mid];
        }
        return null;
    }
",0
16588114,14,"    public static int binarySearch(int[] arrayOfInts, int intToBeFound) {
        int low = 0;
        int high = arrayOfInts.length - 1;
        int mid;
        while (low <= high) {
            mid = (low + high) / 2;
            if (arrayOfInts[mid] > intToBeFound) {
                low = mid + 1;
            } else if (arrayOfInts[mid] < intToBeFound) {
                high = mid - 1;
            } else {
                return mid;
            }
        }
        return -1;
    }
",0
7916380,14,"    private int bsearch(int bnum) {
        int l = 0, r = size;
        while (l < r) {
            int p = (l + r) / 2;
            if (bnum < offs[p]) r = p; else if (bnum > offs[p]) l = p + 1; else return p;
        }
        CUtility.ASSERT(l == r);
        return l;
    }
",0
12046298,14,"    public int binarySearchFromTo(short key, int from, int to) {
        int low = from;
        int high = to;
        while (low <= high) {
            int mid = (low + high) / 2;
            short midVal = get(mid);
            if (midVal < key) low = mid + 1; else if (midVal > key) high = mid - 1; else return mid;
        }
        return -(low + 1);
    }
",0
6789781,14,"    public int binarySearchFromTo(boolean key, int from, int to) {
        int low = from;
        int high = to;
        int intKey = toInt(key);
        while (low <= high) {
            int mid = (low + high) / 2;
            boolean midVal = get(mid);
            if (toInt(midVal) < intKey) low = mid + 1; else if (toInt(midVal) > intKey) high = mid - 1; else return mid;
        }
        return -(low + 1);
    }
",0
12004086,14,"    private int binsearch(int num) {
        int left = 0;
        int right = dividers.length - 1;
        int index = right - left / 2;
        while (left < right) {
            index = (right + left) / 2;
            if (num == dividers[index]) {
                return num;
            } else if (num > dividers[index]) {
                left = index + 1;
            } else if (num < dividers[index]) {
                right = index - 1;
            }
        }
        return dividers[left];
    }
",0
12970813,14,"    public Room getRoom(Vector rooms, String roomID) {
        if (rooms.size() == 0) return null;
        int start = 0;
        int end = rooms.size() - 1;
        while (start <= end) {
            int mid = (end + start) / 2;
            int comp = ((Room) rooms.elementAt(mid)).roomID().compareToIgnoreCase(roomID);
            if (comp == 0) return (Room) rooms.elementAt(mid); else if (comp > 0) end = mid - 1; else start = mid + 1;
        }
        return null;
    }
",0
20172700,14,"    public String getAttributeValue(String attName) {
        int min = 0;
        int max = attributes.length - 1;
        int curr;
        int cr;
        while (min <= max) {
            curr = (min + max) / 2;
            cr = attName.compareTo(attributes[curr].getKey());
            if (cr == 0) return attributes[curr].getValue(); else if (cr < 0) max = curr - 1; else min = curr + 1;
        }
        return null;
    }
",0
19223875,14,"    long getStartingSummary(long tick) {
        long low = 0, mid = 0, high = summaryStream.getLength() - 1;
        IEvent f = null;
        while (high >= low) {
            mid = (high + low) / 2;
            f = summaryStream.getEvent(mid);
            if (tick == f.getTime()) return mid; else if (tick < f.getTime()) high = mid - 1; else low = mid + 1;
        }
        return high >= 0 ? high : 0;
    }
",0
22443179,14,"    private static int YearFromTime(double t) {
        int lo = (int) Math.floor((t / msPerDay) / 366) + 1970;
        int hi = (int) Math.floor((t / msPerDay) / 365) + 1970;
        int mid;
        if (hi < lo) {
            int temp = lo;
            lo = hi;
            hi = temp;
        }
        while (hi > lo) {
            mid = (hi + lo) / 2;
            if (TimeFromYear(mid) > t) {
                hi = mid - 1;
            } else {
                lo = mid + 1;
                if (TimeFromYear(lo) > t) {
                    return mid;
                }
            }
        }
        return lo;
    }
",0
11847415,14,"    public int find_card(CardInfo[] cardbase, String name) {
        int lo, hi, mid, val;
        lo = 0;
        hi = cardbase.length - 1;
        while (lo <= hi) {
            mid = (lo + hi) / 2;
            val = cardbase[mid].name.compareToIgnoreCase(name);
            if (val == 0) return (mid);
            if (val < 0) lo = mid + 1; else hi = mid - 1;
        }
        return (-1);
    }
",0
1219194,14,"    public int get(String key) {
        int low = 0;
        int high = size - 1;
        int cmp = 0;
        while (low <= high) {
            int mid = (low + high) / 2;
            cmp = keys[mid].compareTo(key);
            if (cmp > 0) {
                high = mid - 1;
            } else if (cmp < 0) {
                low = mid + 1;
            } else {
                return mid;
            }
        }
        return -1 - low;
    }
",0
1595632,14,"    public static int getIdNameIndexSort(final FudaaExec[] _ex, final String _idName) {
        if (_idName == null) {
            return -1;
        }
        int lowIndex = 0;
        int highIndex = _ex.length;
        int temp, tempMid;
        while (lowIndex <= highIndex) {
            tempMid = (lowIndex + highIndex) / 2;
            temp = _ex[tempMid].getIDName().compareTo(_idName);
            if (temp < 0) {
                lowIndex = tempMid + 1;
            } else if (temp > 0) {
                highIndex = tempMid - 1;
            } else {
                return tempMid;
            }
        }
        return -1;
    }
",0
16818652,14,"    private static int findSocketIndex(int localport, boolean match) {
        synchronized (SocketTable) {
            int l = 0;
            int r = SocketTable.size() - 1;
            while (l <= r) {
                int m = (l + r) / 2;
                int p = ((WSocket) SocketTable.elementAt(m)).localport;
                if (localport == p) {
                    return m;
                } else if (localport < p) {
                    r = m - 1;
                } else {
                    l = m + 1;
                }
            }
            if (match) {
                return -1;
            }
            return r + 1;
        }
    }
",0
20299424,14,"    public final double findIntervall(double conf) {
        if (conf == 1.0) return m_midPoints[m_midPoints.length - 1];
        int end = m_midPoints.length - 1;
        int start = 0;
        while (Math.abs(end - start) > 1) {
            int mid = (start + end) / 2;
            if (conf > m_midPoints[mid]) start = mid + 1;
            if (conf < m_midPoints[mid]) end = mid - 1;
            if (conf == m_midPoints[mid]) return m_midPoints[mid];
        }
        if (Math.abs(conf - m_midPoints[start]) <= Math.abs(conf - m_midPoints[end])) return m_midPoints[start]; else return m_midPoints[end];
    }
",0
1154760,14,"    public static int binarySearch(List list, Object key) {
        if (list instanceof AbstractSequentialList) {
            ListIterator i = list.listIterator();
            while (i.hasNext()) {
                int cmp = ((Comparable) (i.next())).compareTo(key);
                if (cmp == 0) return i.previousIndex(); else if (cmp > 0) return -i.nextIndex();
            }
            return -i.nextIndex() - 1;
        }
        int low = 0;
        int high = list.size() - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            Object midVal = list.get(mid);
            int cmp = ((Comparable) midVal).compareTo(key);
            if (cmp < 0) low = mid + 1; else if (cmp > 0) high = mid - 1; else return mid;
        }
        return -(low + 1);
    }
",0
5631483,14,"    private static int binarySearchArray(int f, int[] s) {
        int low = 0;
        int high = s.length - 1;
        int mid;
        while (low <= high) {
            mid = (low + high) / 2;
            if (s[mid] > f) {
                high = mid - 1;
            } else if (s[mid] < f) {
                low = mid + 1;
            } else {
                return mid;
            }
        }
        return -1;
    }
",0
3109532,14,"    public Account getElement(int _idAccount) {
        int initIndex = 0;
        int endIndex = size() - 1;
        int midIndex = 0;
        while (initIndex <= endIndex) {
            midIndex = (initIndex + endIndex) / 2;
            int idAccount = ((Account) elementAt(midIndex)).getIDAccount();
            if (_idAccount == idAccount) {
                break;
            } else if (_idAccount > idAccount) {
                initIndex = midIndex + 1;
            } else if (_idAccount < idAccount) {
                endIndex = midIndex - 1;
            }
        }
        if (initIndex > endIndex) {
            return null;
        } else {
            indexSelected = midIndex;
            return (Account) elementAt(midIndex);
        }
    }
",0
1432750,14,"    private Pixel search(int pixVal) {
        int low = 0;
        int high = length - 1;
        int mid;
        while (low <= high) {
            mid = (low + high) / 2;
            if (arrayCache[mid].intValue > pixVal) {
                high = mid - 1;
            } else if (arrayCache[mid].intValue < pixVal) {
                low = mid + 1;
            } else {
                return arrayCache[mid];
            }
        }
        return null;
    }
",0
15687207,14,"    public int binarySearch(final int key) {
        int low = 0;
        int middle;
        int high = super.size() - 1;
        int middleValue;
        while (low <= high) {
            middle = (low + high) / 2;
            middleValue = this.intArray[middle];
            if (middleValue < key) {
                low = middle + 1;
            } else if (middleValue > key) {
                high = middle - 1;
            } else {
                return middle;
            }
        }
        return -(low + 1);
    }
",0
16145536,14,"    private static int binarySearch(Comparable[] a, Comparable x, int highestValidIndex) {
        int low = 0;
        int high = highestValidIndex;
        int mid;
        while (low <= high) {
            mid = (low + high) / 2;
            if (a[mid].compareTo(x) < 0) low = mid + 1; else if (a[mid].compareTo(x) > 0) high = mid - 1; else return mid;
        }
        return low;
    }
",0
20152107,14,"    public int binarySearchFromTo(long key, int from, int to) {
        int low = from;
        int high = to;
        while (low <= high) {
            int mid = (low + high) / 2;
            long midVal = get(mid);
            if (midVal < key) low = mid + 1; else if (midVal > key) high = mid - 1; else return mid;
        }
        return -(low + 1);
    }
",0
9756188,14,"    private void binarySearchForWordAndPartOfSpeechOccurrenceCounterAndUpdateSender(Turn t, LexiconEntry lx1) {
        int lowestPossibleLoc = 0;
        int highestPossibleLoc = wordsUsed.size() - 1;
        int middle = (lowestPossibleLoc + highestPossibleLoc) / 2;
        while (highestPossibleLoc >= lowestPossibleLoc) {
            middle = (lowestPossibleLoc + highestPossibleLoc) / 2;
            WordPartOfSpeechOccurrenceCounterSender wposocc = (WordPartOfSpeechOccurrenceCounterSender) wordsUsed.elementAt(middle);
            LexiconEntry lxe = wposocc.getLexEntry();
            int comparator = (lx1.getWord() + lx1.getPartOfSpeech()).compareToIgnoreCase(lxe.getWord() + lxe.getPartOfSpeech());
            if (comparator == 0) {
                wposocc.update(t);
                return;
            } else if (comparator < 0) {
                highestPossibleLoc = middle - 1;
            } else {
                lowestPossibleLoc = middle + 1;
            }
        }
        WordPartOfSpeechOccurrenceCounterSender wposoccc = new WordPartOfSpeechOccurrenceCounterSender(t, lx1);
        wordsUsed.insertElementAt(wposoccc, lowestPossibleLoc);
    }
",0
8853764,14,"    public Keyword get(String keywords) {
        int left = 0;
        int right = list.size() - 1;
        while (left <= right) {
            int mid = (left + right) / 2;
            if (getKeywordString(mid).compareTo(keywords) < 0) left = mid + 1; else if (getKeywordString(mid).compareTo(keywords) > 0) right = mid - 1; else return get(mid);
        }
        return null;
    }
",0
17052546,14,"    private int binarySearch() {
        int low = 0;
        int high = size();
        int mid = 0;
        while (low < high) {
            mid = (low + high) / 2;
            if (greaterThan(mid)) {
                high = mid;
            } else {
                if (lessThan(mid)) {
                    low = mid + 1;
                } else {
                    return mid;
                }
            }
        }
        return -1;
    }
",0
21388677,14,"    private int getUpperBound(float time) {
        int lowerBound = 0;
        int upperBound = keyframes.size() - 1;
        while (lowerBound < upperBound - 1) {
            int middle = (lowerBound + upperBound) / 2;
            if (time >= keyframes.get(middle).getTime()) {
                lowerBound = middle;
            } else {
                upperBound = middle;
            }
        }
        return upperBound;
    }
",0
10193805,14,"    public static int getByFullName(TeamLookup[] arrayList, int len, String quarry) {
        if (quarry == null) return -1;
        int start = 0;
        int end = len - 1;
        int mid = end / 2;
        int found = -1;
        String s = """";
        while (start <= end && found == -1) {
            if ((s = arrayList[mid].getFullName()).equalsIgnoreCase(quarry)) {
                found = mid;
            } else if (quarry.compareToIgnoreCase(s) < 0) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
            mid = (start + end) / 2;
        }
        return found;
    }
",0
10193807,14,"    public static int getByTeamName(TeamLookup[] arrayList, int len, String quarry) {
        if (quarry == null) return -1;
        int start = 0;
        int end = len - 1;
        int mid = end / 2;
        int found = -1;
        String s = """";
        while (start <= end && found == -1) {
            if ((s = arrayList[mid].getTeamName()).equalsIgnoreCase(quarry)) {
                found = mid;
            } else if (quarry.compareToIgnoreCase(s) < 0) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
            mid = (start + end) / 2;
        }
        return found;
    }
",0
23375904,14,"    public int binarySearch(final char key) {
        int low = 0;
        int middle;
        int high = super.size() - 1;
        char middleValue;
        while (low <= high) {
            middle = (low + high) / 2;
            middleValue = this.charArray[middle];
            if (middleValue < key) {
                low = middle + 1;
            } else if (middleValue > key) {
                high = middle - 1;
            } else {
                return middle;
            }
        }
        return -(low + 1);
    }
",0
8094724,14,"    private int binaryEmptySlotSearch() {
        int low = 0;
        int high = count;
        int mid = 0;
        int compare = 0;
        while (low < high) {
            mid = (low + high) / 2;
            compare = compare(mid);
            if (compare < 0) {
                high = mid;
            } else if (compare > 0) {
                low = mid + 1;
            } else {
                return -1;
            }
        }
        return low;
    }
",0
21650385,14,"    private static final NodeSet searchRange(ArraySet result, NodeProxy[] items, int low, int high, NodeProxy lower, NodeProxy upper) {
        int mid = 0;
        int max = high;
        int cmp;
        while (low <= high) {
            mid = (low + high) / 2;
            cmp = items[mid].compareTo(lower);
            if (cmp == 0) break;
            if (cmp > 0) high = mid - 1; else low = mid + 1;
        }
        while (mid > 0 && items[mid].compareTo(lower) > 0) mid--;
        if (items[mid].compareTo(lower) < 0) mid++;
        while (mid <= max && items[mid].compareTo(upper) <= 0) result.add(items[mid++]);
        result.setIsSorted(true);
        return result;
    }
",0
2577012,14,"    static int getStatusByCode(int errcode) {
        if ((errcode & 0xC0000000) != 0) {
            return errcode;
        } else {
            int min = 0;
            int max = DOS_ERROR_CODES.length;
            while (max >= min) {
                int mid = (min + max) / 2;
                if (errcode > DOS_ERROR_CODES[mid][0]) {
                    min = mid + 1;
                } else if (errcode < DOS_ERROR_CODES[mid][0]) {
                    max = mid - 1;
                } else {
                    return DOS_ERROR_CODES[mid][1];
                }
            }
        }
        return NT_STATUS_UNSUCCESSFUL;
    }
",0
15638782,14,"    ZLTextElementArea binarySearch(int x, int y) {
        int left = 0;
        int right = size();
        while (left < right) {
            final int middle = (left + right) / 2;
            final ZLTextElementArea candidate = get(middle);
            if (candidate.YStart > y) {
                right = middle;
            } else if (candidate.YEnd < y) {
                left = middle + 1;
            } else if (candidate.XStart > x) {
                right = middle;
            } else if (candidate.XEnd < x) {
                left = middle + 1;
            } else {
                return candidate;
            }
        }
        return null;
    }
",0
3160224,14,"    public int binarySearchFromTo(int key, int from, int to) {
        int low = from;
        int high = to;
        while (low <= high) {
            int mid = (low + high) / 2;
            int midVal = get(mid);
            if (midVal < key) low = mid + 1; else if (midVal > key) high = mid - 1; else return mid;
        }
        return -(low + 1);
    }
",0
5331465,14,"    protected int searchSourcePosition(int id) throws Exception {
        int left = 0;
        int right = dataSourceInfos.size() - 1;
        if (dataSourceInfos.size() == 0) throw new Exception();
        while (left != right) {
            int middle = (left + right) / 2;
            DataSourceInfo dataSourceInfo = (DataSourceInfo) dataSourceInfos.get(middle);
            if (dataSourceInfo.getId() > id) {
                right = middle - 1;
            } else if (dataSourceInfo.getId() < id) {
                left = middle + 1;
            } else {
                return middle;
            }
        }
        DataSourceInfo dataSourceInfo = (DataSourceInfo) dataSourceInfos.get(left);
        if (dataSourceInfo.getId() == id) return left;
        throw new Exception();
    }
",0
23347277,14,"    protected static final int findClosest(CharChunk name, CharEntry[] array, int len) {
        int a = 0;
        int b = len - 1;
        if (b == -1) {
            return -1;
        }
        if (compare(name, array[0].name) < 0) {
            return -1;
        }
        if (b == 0) {
            return 0;
        }
        int i = 0;
        while (true) {
            i = (b + a) / 2;
            int result = compare(name, array[i].name);
            if (result == 1) {
                a = i;
            } else if (result == 0) {
                return i;
            } else {
                b = i;
            }
            if ((b - a) == 1) {
                int result2 = compare(name, array[b].name);
                if (result2 < 0) {
                    return a;
                } else {
                    return b;
                }
            }
        }
    }
",0
8888421,14,"    protected int findIndexOfTupleGreaterThan(double val) {
        int high = this.numTuples, low = -1, probe;
        while (high - low > 1) {
            probe = (high + low) / 2;
            if (this.summary[probe].v > val) {
                high = probe;
            } else {
                low = probe;
            }
        }
        return high;
    }
",0
15180724,14,"    private double searchMin(Function func, Function deriv, double x1, double x2, int depth) {
        double mid = (x1 + x2) / 2;
        param[0] = mid;
        if (depth >= 13) return func.getVal(param);
        double slope = deriv.getVal(param);
        if (slope < 0) return searchMin(func, deriv, mid, x2, depth + 1); else return searchMin(func, deriv, x1, mid, depth + 1);
    }
",0
7825067,14,"    private int binarySearch(double mouseCoord, int[][] pointCoords) {
        int left = 0;
        int right = pointCoords.length;
        while (left < right) {
            int middle = (left + right) / 2;
            if (pointCoords[middle][0] < mouseCoord - size / 2) {
                left = middle + 1;
            } else {
                right = middle;
            }
        }
        if (right < pointCoords.length && isInside(mouseCoord, pointCoords[right][0])) {
            return right;
        }
        return -1;
    }
",0
21808490,14,"    private int rbsearch(int l, int h, int tot, int costs) {
        if (l > h) {
            return l;
        }
        int cur = (l + h) / 2;
        int ot = ((Node) this.nodes.elementAt(cur)).f;
        if ((tot < ot) || (tot == ot && costs >= ((Node) this.nodes.elementAt(cur)).g)) {
            return rbsearch(l, cur - 1, tot, costs);
        }
        return rbsearch(cur + 1, h, tot, costs);
    }
",0
23107698,14,"    public int GetNextBaseAfterSample(int sampleNum) {
        int first, last, mid;
        first = 1;
        last = base.length - 1;
        mid = (last - first) / 2;
        while ((last - first) >= 2) {
            if (sampleNum < basePosition[mid]) {
                last = mid;
            } else if (sampleNum > basePosition[mid]) {
                first = mid;
            } else {
                return (mid);
            }
            mid = first + (last - first) / 2;
        }
        if (sampleNum < basePosition[first]) {
            return (first);
        }
        if ((sampleNum > basePosition[first]) && (sampleNum < basePosition[last])) {
            return (last);
        }
        return (0);
    }
",0
13218990,14,"    private int indexOf(char c) {
        int start = 0;
        int end = intervalls.size() - 1;
        while (start <= end) {
            int check = (start + end) / 2;
            Interval i = (Interval) intervalls.get(check);
            if (start == end) return i.contains(c) ? start : -1;
            if (c < i.start) {
                end = check - 1;
                continue;
            }
            if (c > i.end) {
                start = check + 1;
                continue;
            }
            return check;
        }
        return -1;
    }
",0
14637202,14,"    private void binSearch(int[] cvToFind, IIntList fieldAccessList) {
        int first = 0;
        int last = buffer.length - 1;
        binSearchFound = false;
        binSearchIdx = -1;
        while (first <= last) {
            int middle = (first + last) / 2;
            int[] cvMiddle = buffer[middle];
            int x = CVCmp.compare(cvToFind, cvMiddle, fieldAccessList);
            if (x == 0) {
                binSearchFound = true;
                binSearchIdx = middle;
                return;
            }
            if (x < 0) {
                last = middle - 1;
            } else {
                binSearchIdx = middle;
                first = middle + 1;
            }
        }
    }
",0
21770774,14,"    public int binarySearchFromTo(double key, int from, int to) {
        int low = from;
        int high = to;
        while (low <= high) {
            int mid = (low + high) / 2;
            double midVal = get(mid);
            if (midVal < key) low = mid + 1; else if (midVal > key) high = mid - 1; else return mid;
        }
        return -(low + 1);
    }
",0
159863,14,"    private static int binarySearch(int query, int[] marbles, int i, int j) {
        if (i > j) {
            return -1;
        }
        int medium = (i + j) / 2;
        if (marbles[medium] == query) {
            return medium;
        }
        if (query < marbles[medium]) {
            return binarySearch(query, marbles, i, medium - 1);
        } else {
            return binarySearch(query, marbles, medium + 1, j);
        }
    }
",0
12777197,14,"    private int binarySearch(Object key) {
        int lower = fromIndex;
        int upper = toIndex - 1;
        while (lower <= upper) {
            int middle = lower + (upper - lower) / 2;
            int c = ImmutableSortedSet.unsafeCompare(comparator, key, entries[middle].getKey());
            if (c < 0) {
                upper = middle - 1;
            } else if (c > 0) {
                lower = middle + 1;
            } else {
                return middle;
            }
        }
        return -lower - 1;
    }
",0
9464856,14,"    private static int binarySearchValue(final int value, long[] longArray, final int trueLength, final boolean searchByPosition) {
        int lowerIndex = 0;
        int upperIndex = trueLength - 1;
        int midIndex = 0;
        int valueAtMidIndex;
        while (lowerIndex <= upperIndex) {
            midIndex = (lowerIndex + upperIndex) / 2;
            valueAtMidIndex = searchByPosition ? extractPositionFromCompactForm(longArray[midIndex], false) : extractRsIdFromCompactForm(longArray[midIndex], true);
            if (value == valueAtMidIndex) {
                return midIndex;
            } else if (value > valueAtMidIndex) {
                lowerIndex = midIndex + 1;
            } else {
                upperIndex = midIndex - 1;
            }
        }
        return -1;
    }
",0
2417611,14,"    public static int translate(int unicode) {
        if ((unicode >= 0x20 && unicode <= 0x7e) || (unicode >= 0xa0 && unicode <= 0xff)) return unicode;
        int min = 0;
        int max = table.length - 1;
        int mid;
        while (max >= min) {
            mid = (min + max) / 2;
            if (table[mid][1] < unicode) min = mid + 1; else if (table[mid][1] > unicode) max = mid - 1; else return table[mid][0];
        }
        return -1;
    }
",0
20699694,14,"    public static float getBondingRadiusFloat(int atomicNumber, int charge, short[] table) {
        short ionic = (short) ((atomicNumber << 4) + (charge + 4));
        int iVal = 0, iMid = 0, iMin = 0, iMax = table.length / 2;
        while (iMin != iMax) {
            iMid = (iMin + iMax) / 2;
            iVal = table[iMid << 1];
            if (iVal > ionic) iMax = iMid; else if (iVal < ionic) iMin = iMid + 1; else return table[(iMid << 1) + 1] / 1000f;
        }
        if (iVal > ionic) iMid--;
        iVal = table[iMid << 1];
        if (atomicNumber != (iVal >> 4)) iMid++;
        return table[(iMid << 1) + 1] / 1000f;
    }
",0
18013234,14,"    private int binarySearch(List<File> l, File dir) {
        int low = 0;
        int high = l.size();
        String sdir = dir.getAbsolutePath();
        while (low < high) {
            int mid = (low + high) / 2;
            if (l.get(mid).getAbsolutePath().compareTo(sdir) < 0) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }
",0
22551245,14,"    public C classify(MapEntity entity) {
        C result = null;
        for (RuleGroup<C> rg : rules) {
            String attValue = entity.getAttributeValue(rg.attName);
            if (attValue != null) {
                int min = 0;
                int max = rg.attValueRules.size() - 1;
                int curr;
                int cr;
                Rule<C> currRule;
                while (min <= max) {
                    curr = (min + max) / 2;
                    currRule = rg.attValueRules.get(curr);
                    cr = attValue.compareTo(currRule.attValue);
                    if (cr < 0) max = curr - 1; else if (cr > 0) min = curr + 1; else {
                        result = currRule.subClassifier.classify(entity);
                        break;
                    }
                }
                if (result == null && rg.defaultSubClassifier != null) {
                    result = rg.defaultSubClassifier.classify(entity);
                }
                if (result != null) return result;
            }
        }
        return defaultEntityClass;
    }
",0
9662693,14,"    static char charshape(char s, int which) {
        int l, r, m;
        if ((s >= 0x0621) && (s <= 0x06D3)) {
            l = 0;
            r = chartable.length - 1;
            while (l <= r) {
                m = (l + r) / 2;
                if (s == chartable[m][0]) {
                    return chartable[m][which + 1];
                } else if (s < chartable[m][0]) {
                    r = m - 1;
                } else {
                    l = m + 1;
                }
            }
        } else if (s >= 0xfef5 && s <= 0xfefb) return (char) (s + which);
        return s;
    }
",0
16075438,14,"    public int binarySearch(Date dateTime) {
        long msDate = dateTime.getTime();
        int lo = 0, hi = this.size();
        while (lo < hi) {
            int mid = (lo + hi) / 2;
            long midMsDate = this.get(mid).getDate().getTime();
            if (msDate < midMsDate) hi = mid; else if (msDate > midMsDate) lo = mid + 1; else return mid;
        }
        return ~lo;
    }
",0
17349227,14,"    private LexiconEntry binarySearchForWordAndPartOfSpeechAndUpdate(TaggedWord tw) {
        int lowestPossibleLoc = 0;
        int highestPossibleLoc = lexicon.size() - 1;
        int middle = (lowestPossibleLoc + highestPossibleLoc) / 2;
        while (highestPossibleLoc >= lowestPossibleLoc) {
            middle = (lowestPossibleLoc + highestPossibleLoc) / 2;
            LexiconEntry lxe = (LexiconEntry) lexicon.elementAt(middle);
            int comparator = (tw.word() + tw.tag()).compareToIgnoreCase(lxe.getWord() + lxe.getPartOfSpeech());
            if (comparator == 0) {
                return lxe;
            } else if (comparator < 0) {
                highestPossibleLoc = middle - 1;
            } else {
                lowestPossibleLoc = middle + 1;
            }
        }
        LexiconEntry le = new LexiconEntry(tw.word(), tw.tag());
        lexicon.insertElementAt(le, lowestPossibleLoc);
        return le;
    }
",0
22166031,14,"    public static int binarySearch(final WordList wordList, final String word) {
        final Comparator<String> comparator = wordList.getComparator();
        int low = 0;
        int high = wordList.size() - 1;
        int mid;
        while (low <= high) {
            mid = (low + high) / 2;
            final int cmp = comparator.compare(wordList.get(mid), word);
            if (cmp < 0) {
                low = mid + 1;
            } else if (cmp > 0) {
                high = mid - 1;
            } else {
                return mid;
            }
        }
        return NOT_FOUND;
    }
",0
5935176,14,"    public static int binarySearch(int[] a, int find, int start, int end) {
        if (start > end) {
            return -1;
        }
        int mid = (start + end) / 2;
        if (find > a[mid]) {
            return binarySearch(a, find, mid + 1, end);
        } else if (find < a[mid]) {
            return binarySearch(a, find, start, mid - 1);
        } else {
            return mid;
        }
    }
",0
21808491,14,"    private int bsearch(int l, int h, int tot, int costs) {
        int lo = l;
        int hi = h;
        while (lo <= hi) {
            int cur = (lo + hi) / 2;
            int ot = ((Node) this.nodes.elementAt(cur)).f;
            if ((tot < ot) || (tot == ot && costs >= ((Node) this.nodes.elementAt(cur)).g)) {
                hi = cur - 1;
            } else {
                lo = cur + 1;
            }
        }
        return lo;
    }
",0
4990086,14,"    public int find_globalid(String name) {
        int lo, hi, mid, val;
        CardInfo info;
        lo = 0;
        hi = cards.length - 1;
        while (lo <= hi) {
            mid = (lo + hi) / 2;
            val = cards[mid].name.compareToIgnoreCase(name);
            if (val == 0) return (mid);
            if (val < 0) lo = mid + 1; else hi = mid - 1;
        }
        for (mid = 0; mid < extras.size(); mid++) {
            info = (CardInfo) extras.get(mid);
            if (info.name.equalsIgnoreCase(name)) return (cards.length + mid);
        }
        return (add_extra(name));
    }
",0
11895893,14,"    public static int binarySearch(short[] list, int toFind) {
        int low = 0;
        int high = list.length - 1;
        int mid;
        while (low <= high) {
            mid = (low + high) / 2;
            if (list[mid] < toFind) {
                low = mid + 1;
            } else if (list[mid] > toFind) {
                high = mid - 1;
            } else {
                return mid;
            }
        }
        return NOT_FOUND;
    }
",0
21650383,14,"    private static final int search(NodeProxy[] items, int low, int high, DocumentImpl cmpDoc, long gid) {
        int mid;
        int cmp;
        while (low <= high) {
            mid = (low + high) / 2;
            if (items[mid].getDocument().docId == cmpDoc.docId) {
                if (items[mid].gid == gid) return mid; else if (items[mid].gid > gid) high = mid - 1; else low = mid + 1;
            } else if (items[mid].getDocument().docId > cmpDoc.docId) high = mid - 1; else low = mid + 1;
        }
        return -1;
    }
",0
7555740,14,"    public static int getByLastName(PlayerFileManager[] arrayList, int len, String quarry, boolean startsWith) {
        if (quarry == null) return -1;
        quarry = quarry.toLowerCase();
        int start = 0;
        int end = len - 1;
        int mid = end / 2;
        int found = -1;
        String s = """";
        while (start <= end && found == -1) {
            s = combineNames(arrayList[mid], false).toLowerCase();
            if ((startsWith && s.startsWith(quarry)) || s.equalsIgnoreCase(quarry)) {
                found = mid;
            } else if (quarry.compareToIgnoreCase(s) < 0) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
            mid = (start + end) / 2;
        }
        return found;
    }
",0
1687088,14,"        public void setPosition(NodeProxy node) {
            next = null;
            docIdx = findDoc(node.getDocument());
            if (docIdx > -1) {
                int low = documentOffsets[docIdx];
                int high = low + (documentLengths[docIdx] - 1);
                int mid, cmp;
                NodeProxy p;
                while (low <= high) {
                    mid = (low + high) / 2;
                    p = nodes[mid];
                    cmp = p.getNodeId().compareTo(node.getNodeId());
                    if (cmp == 0) {
                        pos = mid - documentOffsets[docIdx];
                        return;
                    }
                    if (cmp > 0) {
                        high = mid - 1;
                    } else {
                        low = mid + 1;
                    }
                }
            }
        }
",0
12018805,14,"    private int binarySearchGet(int down, int up, Constant searchkey) {
        if (getData(getRecordNum() - 1).compareTo(searchkey) < 0) {
            return getRecordNum() - 1;
        }
        int mid = (down + up) / 2;
        int ans = getData(mid).compareTo(searchkey);
        if (ans == 0) return mid;
        if (ans > 0) {
            if (getData(up).compareTo(searchkey) <= 0) return mid; else return binarySearchGet(down, mid - 1, searchkey);
        } else {
            if (getData(down).compareTo(searchkey) >= 0) return mid; else return binarySearchGet(mid + 1, up, searchkey);
        }
    }
",0
20103855,14,"    private long search(LongArrayList matches, long value, boolean onReverse) {
        int left = 0;
        int right = matches.size() - 1;
        int middle = right / 2;
        long distance;
        while (left <= right) {
            if (onReverse) {
                distance = matches.getQuick(middle) + readLength - value;
            } else {
                distance = value + readLength - matches.getQuick(middle);
            }
            if (distance >= minDistance && distance <= maxDistance) {
                return matches.getQuick(middle);
            }
            if (distance < minDistance) {
                left = middle + 1;
            } else {
                right = middle - 1;
            }
            middle = (left + right) / 2;
        }
        return Constants.INVALID;
    }
",0
19239351,14,"    protected int findUpperChildPosition(int position) {
        int start = 0, end = fChildren.size() - 1;
        while (start < end) {
            int middlePosition = start + (end - start) / 2;
            T middle = fChildren.get(middlePosition);
            if (position < middle.fOffset) {
                end = middlePosition;
            } else if (position >= middle.fOffset + middle.fLength) {
                start = middlePosition + 1;
            } else return middlePosition;
        }
        if (end < start || position > fChildren.get(start).getEnd()) return -1; else return start;
    }
",0
12576759,14,"    private int search(long time, List<Interval> intervals) {
        boolean success = false;
        int first = 0;
        int last = intervals.size();
        int middle = 0;
        int index = 0;
        if (time >= Long.MAX_VALUE) {
            time = Long.MAX_VALUE - 1;
        }
        while (!success && first <= last) {
            middle = (first + last) / 2;
            Interval midd = (Interval) intervals.get(middle);
            if (midd.contains(time)) {
                index = middle;
                success = true;
                break;
            }
            if (midd.isLess(time)) {
                last = middle - 1;
            }
            if (midd.isGreater(time)) {
                first = middle + 1;
            }
        }
        return index;
    }
",0
21006514,14,"    private static int binarySearch(char x) {
        int low = 0;
        int high = pinyinVoy.length - 1;
        int mid;
        while (low <= high) {
            mid = (low + high) / 2;
            if (pinyinVoy[mid] < x) low = mid + 1; else if (pinyinVoy[mid] > x) high = mid - 1; else return mid;
        }
        return NOT_FOUND;
    }
",0
9519321,14,"    public int lookupToken(int base, String key) {
        int start = fa.getSpecialCasesIndexes()[base][0];
        int end = fa.getSpecialCasesIndexes()[base][1] - 1;
        if (!sensitive) key = key.toUpperCase();
        while (start <= end) {
            int half = (start + end) / 2;
            int comp = fa.getSpecialCases()[half].key.compareTo(key);
            if (comp == 0) return fa.getSpecialCases()[half].value; else if (comp < 0) start = half + 1; else end = half - 1;
        }
        return base;
    }
",0
11956028,14,"    public int find(int p) {
        int start = 0;
        int end;
        int mid;
        int midpos;
        if (!scanning) {
            moveGap((gap + tokens.length) - endgap);
        }
        end = gap - 1;
        if (p > tokens[end].position) {
            return end;
        }
        while (end > (start + 1)) {
            mid = (start + end) / 2;
            midpos = tokens[mid].position;
            if (p > midpos) {
                start = mid;
            } else {
                end = mid;
            }
        }
        return start;
    }
",0
13847748,14,"    private static <T> int binarySearch(List<T> list, T element, int start, int end, Comparator<? super T> comparer) {
        if (end < start) return -1;
        int mid = (start + end) / 2;
        T midObj = list.get(mid);
        int compare = comparer.compare(midObj, element);
        if (compare == 0) return mid;
        if (start == end) return -1;
        if (compare > 0) return binarySearch(list, element, start, mid - 1, comparer); else return binarySearch(list, element, mid + 1, end, comparer);
    }
",0
15677987,14,"    public static int search(String[] array, String token, int start, int end) {
        if (start >= end) return 0;
        int midPos = (start + end) / 2;
        int compRes = token.compareTo(array[midPos]);
        if (compRes == 0) {
            return midPos + 1;
        } else if (compRes < 0) {
            return search(array, token, start, midPos);
        } else {
            return search(array, token, midPos + 1, end);
        }
    }
",0
18799599,14,"        private double searchMin(double left, double delta, int depth) {
            double right = left + delta;
            mmVar.setVal(left);
            double leftVal = mmExpr.getVal();
            boolean incrLeft = mmDeriv.getVal() > 0;
            mmVar.setVal(right);
            double rightVal = mmExpr.getVal();
            boolean incrRight = mmDeriv.getVal() > 0;
            if (!incrLeft && incrRight) {
                double mid = (left + right) / 2;
                if (depth >= 13) {
                    mmVar.setVal(mid);
                    return mmExpr.getVal();
                }
                double slope = mmDeriv.getVal();
                if (slope < 0) return searchMin(mid, right, depth + 1); else return searchMin(left, mid, depth + 1);
            }
            return Math.min(leftVal, rightVal);
        }
",0
15149715,14,"    public int binarySearchFromTo(char key, int from, int to) {
        int low = from;
        int high = to;
        while (low <= high) {
            int mid = (low + high) / 2;
            char midVal = get(mid);
            if (midVal < key) low = mid + 1; else if (midVal > key) high = mid - 1; else return mid;
        }
        return -(low + 1);
    }
",0
15437686,14,"    public FieldMetaData getFieldMetaData(String fname) {
        int low = 0;
        int high = realFieldCount - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            FieldMetaData midVal = fields[mid];
            int cmp = midVal.name.compareTo(fname);
            if (cmp < 0) {
                low = mid + 1;
            } else if (cmp > 0) {
                high = mid - 1;
            } else {
                return midVal;
            }
        }
        if (horizontalCMD != null) {
            low = 0;
            high = horizontalFields.length - 1;
            while (low <= high) {
                int mid = (low + high) / 2;
                FieldMetaData midVal = horizontalFields[mid];
                int cmp = midVal.name.compareTo(fname);
                if (cmp < 0) {
                    low = mid + 1;
                } else if (cmp > 0) {
                    high = mid - 1;
                } else {
                    return midVal;
                }
            }
        }
        if (horizontalCMD != null) {
            low = 0;
            high = horizontalFields.length - 1;
            while (low <= high) {
                int mid = (low + high) / 2;
                FieldMetaData midVal = horizontalFields[mid];
                int cmp = midVal.origName.compareTo(fname);
                if (cmp < 0) {
                    low = mid + 1;
                } else if (cmp > 0) {
                    high = mid - 1;
                } else {
                    return midVal;
                }
            }
            return null;
        }
        if (pcSuperMetaData == null) return null;
        return pcSuperMetaData.getFieldMetaData(fname);
    }
",0
18434457,14,"    static int shapecount(char s) {
        int l, r, m;
        if ((s >= 0x0621) && (s <= 0x06D3) && !isVowel(s)) {
            l = 0;
            r = chartable.length - 1;
            while (l <= r) {
                m = (l + r) / 2;
                if (s == chartable[m][0]) {
                    return chartable[m].length - 1;
                } else if (s < chartable[m][0]) {
                    r = m - 1;
                } else {
                    l = m + 1;
                }
            }
        } else if (s == ZWJ) {
            return 4;
        }
        return 1;
    }
",0
18112951,14,"    private int findInCumulativeProb(double num) {
        int min = 0;
        int max = cumulativeProb.length - 1;
        int ptr;
        while (true) {
            ptr = (max + min) / 2;
            if (num >= cumulativeProb[ptr]) {
                if (max - min == 1) return max;
                min = ptr;
            } else if (ptr != 0 && num < cumulativeProb[ptr - 1]) {
                max = ptr;
            } else return ptr;
        }
    }
",0
11387518,14,"    private static boolean _contains(PowerDenotator p, Denotator d) {
        ArrayList<Denotator> factors = p.getListMorphismMap().getFactors();
        int i = 0;
        int j = factors.size() - 1;
        while (i <= j) {
            int t = (i + j) / 2;
            Denotator s = factors.get(t);
            int c = d.compareTo(s);
            if (c == 0) {
                return true;
            } else if (c < 0) {
                j = t - 1;
            } else {
                i = t + 1;
            }
        }
        return false;
    }
",0
14163936,14,"    static String getMessageByCode(int errcode) {
        if ((errcode & 0xC0000000) == 0xC0000000) {
            int min = 0;
            int max = NT_STATUS_CODES.length;
            while (max >= min) {
                int mid = (min + max) / 2;
                if (errcode > NT_STATUS_CODES[mid]) {
                    min = mid + 1;
                } else if (errcode < NT_STATUS_CODES[mid]) {
                    max = mid - 1;
                } else {
                    return NT_STATUS_MESSAGES[mid];
                }
            }
        } else {
            int min = 0;
            int max = DOS_ERROR_CODES.length;
            while (max >= min) {
                int mid = (min + max) / 2;
                if (errcode > DOS_ERROR_CODES[mid][0]) {
                    min = mid + 1;
                } else if (errcode < DOS_ERROR_CODES[mid][0]) {
                    max = mid - 1;
                } else {
                    return DOS_ERROR_MESSAGES[mid];
                }
            }
        }
        return ""0x"" + com.knowgate.misc.Gadgets.toHexString(errcode, 8);
    }
",0
17857162,14,"    private int findIndexBySize(long key) {
        int lo = 0;
        int hi = itemsBySize.size() - 1;
        while (lo <= hi) {
            int mid = lo + (hi - lo) / 2;
            if (key < ((HeapItem) itemsBySize.get(mid)).size) hi = mid - 1; else if (key > ((HeapItem) itemsBySize.get(mid)).size) lo = mid + 1; else return mid;
        }
        HeapItem item = getLargestItem();
        if (item == null || key > item.size) return -1;
        return lo;
    }
",0
23672254,20,"    public int fibonacci(int num) {
        if (num == 0) {
            return 0;
        } else if (num == 1) {
            return 1;
        } else {
            processor.getAlgData().setRecursiveCalls(processor.getAlgData().getRecursiveCalls() + 2);
            return fibonacci(num - 1) + fibonacci(num - 2);
        }
    }
",0
15910370,20,"    int seqFib(int n) {
        if (n <= 1) return n; else return seqFib(n - 1) + seqFib(n - 2);
    }
",0
14617132,20,"    private static int fib(int a_index) {
        if (a_index == 0 || a_index == 1) {
            return 1;
        }
        return fib(a_index - 1) + fib(a_index - 2);
    }
",0
489128,20,"    public int fib(int n) {
        if (n == 0 || n == 1) return n; else return fib(n - 1) + fib(n - 2);
    }
",0
824556,20,"    public int fib(int x) {
        int test = this.prevX;
        this.prevX = x;
        System.out.println(""fib("" + x + "")"");
        if (x <= 2) {
            return 1;
        }
        return fib(x - 1) + fib(x - 2);
    }
",0
6119301,20,"    private static int fib(int x) {
        if (x < 3) {
            return 1;
        } else {
            return fib(x - 1) + fib(x - 2);
        }
    }
",0
2159732,20,"    public static int fib(int n) throws Exception {
        if (n <= 1) {
            return 1;
        } else {
            return fib(n - 1) + fib(n - 2);
        }
    }
",0
7352931,20,"    public static int f(int n) {
        if (n == 1) {
            return 1;
        } else if (n == 2) {
            return 1;
        } else {
            return f(n - 1) + f(n - 2);
        }
    }
",0
7346182,20,"        public int fib(int n) {
            if (n == 0 || n == 1) return 1;
            return fib(n - 1) + fib(n - 2);
        }
",0
349937,20,"    public int fib(int x) {
        System.out.println(""fib("" + x + "")"");
        if (x <= 2) {
            return 1;
        }
        return fib(x - 1) + fib(x - 2);
    }
",0
779831,20,"    public static int fib(int i) {
        if (i <= 2) return 1;
        return fib(i - 1) + fib(i - 2);
    }
",0
8722827,20,"    static int calcSequential(int n) {
        if (n <= 1) {
            return n;
        } else {
            return calcSequential(n - 1) + calcSequential(n - 2);
        }
    }
",0
6905699,20,"    @Migratory
    public int f(int n) throws MalformedURLException, MigrationException {
        if (n == 0) {
            PadMig.migrate(getDest());
            return 1;
        } else if (n == 1) {
            return 1;
        } else {
            return f(n - 1) + f(n - 2);
        }
    }
",0
10062151,20,"    @Migratory
    public int fib(int n) throws MalformedURLException, MigrationException {
        if (n == 0) {
            if (!moved) {
                PadMig.migrate(new URL(""pp://localhost:7100/first""));
                moved = true;
            }
            return 1;
        } else if (n == 1) return 1; else return fib(n - 1) + fib(n - 2);
    }
",0
377032,20,"        public int fib(int value) {
            if (value == 0) {
                return 0;
            }
            if (value == 1) {
                return 1;
            }
            logger.log(""Calling fib("" + (value - 1) + "") + fib("" + (value - 2) + "")..."");
            return fib(value - 1) + fib(value - 2);
        }
",0
8401284,20,"    public static int fib(int a) {
        if (a <= 0) {
            return 0;
        }
        if (a == 1 || a == 2) {
            return 1;
        } else {
            return fib(a - 1) + fib(a - 2);
        }
    }
",0
448077,20,"    public static long fib(int n) {
        if (n <= 2) {
            return 1;
        }
        return fib(n - 1) + fib(n - 2);
    }
",0
15471725,20,"    public int compute(int n) {
        if (1 == n || 2 == n) {
            return 1;
        } else {
            return compute(n - 1) + compute(n - 2);
        }
    }
",0
18897847,20,"    public int getFibonacci(int n) {
        if (n < 2) return 1; else return getFibonacci(n - 1) + getFibonacci(n - 2);
    }
",0
4328783,20,"    public int fib(int x) {
        if (x == 0) return 0;
        if (x == 1) return 1;
        return fib(x - 1) + fib(x - 2);
    }
",0
4766433,20,"    public int fib(int n) {
        if (n == 0 || n == 1) return 1; else return fib(n - 1) + fib(n - 2);
    }
",0
6494291,20,"    private Integer slowFib(int i) {
        if (i <= 0) return 0;
        if (i == 1) return 1;
        return slowFib(i - 1) + slowFib(i - 2);
    }
",0
4973099,20,"    public int calculate(int x) {
        if (x < 0) throw new IllegalArgumentException(""positive numbers only"");
        if (x <= 1) return x;
        return calculate(x - 1) + calculate(x - 2);
    }
",0
17484947,20,"    public static final double lucasNumber(int n) {
        if (n < 0) return Double.NaN;
        if (n == 0) return 2;
        if (n == 1) return 1;
        return lucasNumber(n - 1) + lucasNumber(n - 2);
    }
",0
17484945,20,"    public static final double fibonacciNumber(int n) {
        if (n < 0) return Double.NaN;
        if (n == 0) return 0;
        if (n == 1) return 1;
        return fibonacciNumber(n - 1) + fibonacciNumber(n - 2);
    }
",0
889055,20,"    public static int fibo(int n) {
        if (n <= 1) {
            return 1;
        }
        return fibo(n - 1) + fibo(n - 2);
    }
",0
241891,20,"        private int fib(int n) {
            if (n < 2) return 1; else return fib(n - 1) + fib(n - 2);
        }
",0
8766039,20,"    public static int fibonacci(int broj) {
        if (broj <= 1) return broj; else return fibonacci(broj - 1) + fibonacci(broj - 2);
    }
",0
23677183,26,"	public static int gcd1(int a, int b) {
		while (b != 0) {
			int t = b;
			b = a % b;
			a = t;
		}
		return a;
	}
",0
23677184,26,"	public static int gcd2(int a, int b) {
		while (a != b) {
			if (a > b)
				a = a - b;
			else
				b = b - a;
		}
		return a;
	}
",0
2271360,26,"    public static long gcd(long n, long m) {
        if (n == 0 || m == 0) return 0;
        while (n != m) if (n > m) n = n - m; else m = m - n;
        return n;
    }
",0
3535630,26,"    public static int gcd(int m, int n) {
        if (0 == n) {
            return m;
        } else {
            return gcd(n, m % n);
        }
    }
",0
3811158,26,"    public static long gcd(long a, long b) {
        long x;
        long y;
        if (a < 0) a = -a;
        if (b < 0) b = -b;
        if (a >= b) {
            x = a;
            y = b;
        } else {
            x = b;
            y = a;
        }
        while (y != 0) {
            long t = x % y;
            x = y;
            y = t;
        }
        return x;
    }
",0
3278067,26,"    private int NOD(int x, int y) {
        if (y == 0) {
            return x;
        } else {
            return NOD(y, x % y);
        }
    }
",0
3210858,26,"    public static int greatestCommonDivisor(int a, int b) {
        if (b == 0) return a; else return greatestCommonDivisor(b, a % b);
    }
",0
428867,26,"    public static int GCD(int a, int b) {
        if (b == 0) return a;
        return GCD(b, a % b);
    }
",0
2915089,26,"    @Override
    public long gcd(long x, long y) {
        if (y == 0) return x; else return gcd(y, x % y);
    }
",0
3398727,26,"    private int gcd(int m, int n) {
        if (0 == n) {
            return m;
        } else {
            return gcd(n, m % n);
        }
    }
",0
351485,26,"    public static int ggT(int x, int y) {
        while (x != y) {
            if (x < y) y = y - x; else x = x - y;
        }
        return x;
    }
",0
2586916,26,"    private Long getGCD(Long a, Long b) {
        if (b == 0) return a; else return getGCD(b, a % b);
    }
",0
1422508,26,"    public static int gongYue(int a, int b) {
        int m = 1;
        if (a < b) {
            m = a;
            a = b;
            b = m;
        }
        while (m != 0) {
            m = a % b;
            a = b;
            b = m;
        }
        return a;
    }
",0
3608406,26,"    public static int calculateGCD(int a, int b) {
        while (b != 0) {
            int t = a;
            a = b;
            b = t % b;
        }
        return a;
    }
",0
556871,26,"    private int getGCD(int a, int b) {
        while (b != 0) {
            System.out.println(""a="" + a + ""  b="" + b);
            int temp = b;
            b = a % b;
            a = temp;
        }
        System.out.println(""a="" + a + ""  b="" + b);
        return a;
    }
",0
28840,26,"    private long gcd(long a, long b) {
        while (b != 0) {
            long t = a % b;
            a = b;
            b = t;
        }
        return a;
    }
",0
234006,26,"    private static int gcd(int a, int b) {
        while (b != 0) {
            int tmp = a % b;
            a = b;
            b = tmp;
        }
        return a;
    }
",0
1143673,26,"    private static int gcd(int a, int b) {
        int tmp;
        while (b != 0) {
            tmp = b;
            b = a % b;
            a = tmp;
        }
        return a;
    }
",0
2050237,26,"    public static int gcd(int a, int b) {
        while (b != 0) {
            int c = a % b;
            a = b;
            b = c;
        }
        return a;
    }
",0
322926,26,"    public int maximumCommonDenominator(int number) {
        int copyA = absoluteValue();
        int copyB = (new IntegerNumber(number)).absoluteValue();
        int temp = 0;
        while (copyB != 0) {
            temp = copyA % copyB;
            copyA = copyB;
            copyB = temp;
        }
        return copyA;
    }
",0
14440577,2,"    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String cacheName = req.getParameter(""cacheName"");
        if (cacheName == null || cacheName.equals("""")) {
            resp.getWriter().println(""parameter cacheName required"");
            return;
        } else {
            StringBuffer urlStr = new StringBuffer();
            urlStr.append(BASE_URL);
            urlStr.append(""?"");
            urlStr.append(""cacheName="");
            urlStr.append(""rpcwc.bo.cache."");
            urlStr.append(cacheName);
            URL url = new URL(urlStr.toString());
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = null;
            StringBuffer output = new StringBuffer();
            while ((line = reader.readLine()) != null) {
                output.append(line);
                output.append(System.getProperty(""line.separator""));
            }
            reader.close();
            resp.getWriter().println(output.toString());
        }
    }
",0
11710005,2,"    public static void main(String[] args) {
        try {
            URL url = new URL(""http://www.lineadecodigo.com"");
            BufferedReader in = null;
            try {
                in = new BufferedReader(new InputStreamReader(url.openStream()));
            } catch (Throwable t) {
            }
            String inputLine;
            String inputText = """";
            while ((inputLine = in.readLine()) != null) {
                inputText = inputText + inputLine;
            }
            System.out.println(""El contenido de la URL es: "" + inputText);
            in.close();
        } catch (MalformedURLException me) {
            System.out.println(""URL erronea"");
        } catch (IOException ioe) {
            System.out.println(""Error IO"");
        }
    }
",0
4530695,2,"    private String doExecute(AbortableHttpRequest method) throws Throwable {
        HttpClient client = CLIENT.newInstance();
        HttpResponse rsp = client.execute((HttpUriRequest) method);
        HttpEntity entity = rsp.getEntity();
        if (entity == null) throw new RequestError(""No entity in method"");
        InputStream in = null;
        try {
            in = entity.getContent();
            BufferedReader reader = new BufferedReader(new InputStreamReader(in));
            StringBuilder inStr = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                inStr.append(line).append(""\r\n"");
            }
            entity.consumeContent();
            return inStr.toString();
        } catch (IOException ex) {
            LOG.error(""IO exception: "" + ex.getMessage());
            throw ex;
        } catch (RuntimeException ex) {
            method.abort();
            throw ex;
        } finally {
            if (in != null) in.close();
        }
    }
",0
8139665,2,"    public ActionResponse executeAction(ActionRequest request) throws Exception {
        BufferedReader in = null;
        try {
            CurrencyEntityManager em = new CurrencyEntityManager();
            String id = (String) request.getProperty(""ID"");
            CurrencyMonitor cm = getCurrencyMonitor(em, Long.valueOf(id));
            String code = cm.getCode();
            if (code == null || code.length() == 0) code = DEFAULT_SYMBOL;
            String tmp = URL.replace(""@"", code);
            ActionResponse resp = new ActionResponse();
            URL url = new URL(tmp);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            int status = conn.getResponseCode();
            if (status == 200) {
                in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                StringBuilder value = new StringBuilder();
                while (true) {
                    String line = in.readLine();
                    if (line == null) break;
                    value.append(line);
                }
                cm.setLastUpdateValue(new BigDecimal(value.toString()));
                cm.setLastUpdateTs(new Date());
                em.updateCurrencyMonitor(cm);
                resp.addResult(""CURRENCYMONITOR"", cm);
            } else {
                resp.setErrorCode(ActionResponse.GENERAL_ERROR);
                resp.setErrorMessage(""HTTP Error ["" + status + ""]"");
            }
            return resp;
        } catch (Exception e) {
            String st = MiscUtils.stackTrace2String(e);
            logger.error(st);
            throw e;
        } finally {
            if (in != null) {
                in.close();
            }
        }
    }
",0
18748953,2,"    private static String appletLoad(String file, Output OUT) {
        if (!urlpath.endsWith(""/"")) {
            urlpath += '/';
        }
        if (!urlpath.startsWith(""http://"")) {
            urlpath = ""http://"" + urlpath;
        }
        String url = """";
        if (file.equals(""languages.txt"")) {
            url = urlpath + file;
        } else {
            url = urlpath + ""users/"" + file;
        }
        try {
            StringBuffer sb = new StringBuffer(2000);
            BufferedReader br = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
            String a;
            while ((a = br.readLine()) != null) {
                sb.append(a).append('\n');
            }
            return sb.toString();
        } catch (Exception e) {
            OUT.println(""load failed for file->"" + file);
        }
        return """";
    }
",0
15464715,2,"    private String sendQuery(String query) {
        File xmlServerResponse = null;
        String serverResponse = """";
        try {
            long start = Calendar.getInstance().getTimeInMillis();
            System.out.println(""\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++"");
            System.out.println(""    consulta de busqueda -> "" + query);
            URL url = new URL(query);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = """";
            while ((line = in.readLine()) != null) {
                serverResponse += line;
            }
            long ahora = (Calendar.getInstance().getTimeInMillis() - start);
            System.out.println("" Tiempo transcurrido en la consulta (en milesimas) -> "" + ahora);
            System.out.println(""++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n"");
        } catch (IOException e) {
            e.printStackTrace();
        }
        return serverResponse;
    }
",0
21756553,2,"    public static List<String> list() throws IOException {
        List<String> providers = new ArrayList<String>();
        Enumeration<URL> urls = ClassLoader.getSystemResources(""sentrick.classifiers"");
        while (urls.hasMoreElements()) {
            URL url = urls.nextElement();
            String provider = null;
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((provider = in.readLine()) != null) {
                provider = provider.trim();
                if (provider.length() > 0) providers.add(provider);
            }
            in.close();
        }
        return providers;
    }
",0
21792245,2,"    public static String[] retrieveFasta(String id) throws Exception {
        URL url = new URL(""http://www.uniprot.org/uniprot/"" + id + "".fasta"");
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
        String header = reader.readLine();
        StringBuffer seq = new StringBuffer();
        String line = """";
        while ((line = reader.readLine()) != null) {
            seq.append(line);
        }
        reader.close();
        String[] first = header.split(""OS="");
        return new String[] { id, first[0].split(""\\s"")[1], first[1].split(""GN="")[0], seq.toString() };
    }
",0
15311521,2,"    public String buscaCDA() {
        Properties prop = new CargaProperties().Carga();
        URL url;
        BufferedReader in;
        String inputLine;
        String miLinea = null;
        try {
            url = new URL(prop.getProperty(""CDA""));
            in = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.contains(""cda-TRUNK-"")) {
                    miLinea = inputLine;
                    miLinea = miLinea.substring(miLinea.indexOf(""lastSuccessfulBuild/artifact/dist/cda-TRUNK""));
                    miLinea = miLinea.substring(0, miLinea.indexOf(""\"">""));
                    miLinea = url + miLinea;
                }
            }
        } catch (Throwable t) {
        }
        log.debug(""Detetectado last build CDA: "" + miLinea);
        return miLinea;
    }
",0
13207439,2,"    public String sendRequestAndGetNormalStringOutPut(java.lang.String servletName, java.lang.String request) {
        String myurl = java.util.prefs.Preferences.systemRoot().get(""serverurl"", """");
        String myport = java.util.prefs.Preferences.systemRoot().get(""portno"", ""8080"");
        if (myport == null || myport.trim().equals("""")) {
            myport = ""80"";
        }
        if (this.serverURL == null) {
            try {
                java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();
                if (codebase != null) serverURL = codebase.getHost(); else serverURL = ""localhost"";
            } catch (Exception exp) {
                exp.printStackTrace();
                serverURL = ""localhost"";
            }
            newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);
            ipdig.show();
            serverURL = myurl = ipdig.getIPAddress();
            myport = ipdig.getPortNo();
            java.util.prefs.Preferences.systemRoot().put(""serverurl"", serverURL);
            java.util.prefs.Preferences.systemRoot().put(""portno"", myport);
            System.out.println(serverURL);
        }
        String response = """";
        try {
            System.out.println(""http://"" + serverURL + "":"" + myport + ""/newgenlibctxt/"" + servletName);
            java.net.URL url = new java.net.URL(""http://"" + serverURL + "":"" + myport + ""/newgenlibctxt/"" + servletName);
            java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();
            urlconn.setDoOutput(true);
            urlconn.setRequestProperty(""Content-type"", ""text/xml; charset=UTF-8"");
            java.io.OutputStream os = urlconn.getOutputStream();
            String req1xml = request;
            java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());
            java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);
            java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, ""UTF-8"");
            System.out.println(req1xml);
            dos.write(req1xml);
            dos.flush();
            dos.close();
            System.out.println(""url conn: "" + urlconn.getContentEncoding() + ""  "" + urlconn.getContentType());
            java.io.InputStream ios = urlconn.getInputStream();
            java.util.zip.CheckedInputStream cis = new java.util.zip.CheckedInputStream(ios, new java.util.zip.Adler32());
            java.util.zip.GZIPInputStream gip = new java.util.zip.GZIPInputStream(cis);
            java.io.InputStreamReader br = new java.io.InputStreamReader(gip, ""UTF-8"");
            int n = -1;
            while ((n = br.read()) != -1) response += (char) n;
        } catch (java.net.ConnectException conexp) {
            javax.swing.JOptionPane.showMessageDialog(null, ""<html>Could not establish connection with the NewGenLib server, "" + ""<br>These might be the possible reasons."" + ""<br><li>Check the network connectivity between this machine and the server."" + ""<br><li>Check whether NewGenLib server is running on the server machine."" + ""<br><li>NewGenLib server might not have initialized properly. In this case"" + ""<br>go to server machine, open NewGenLibDesktop Application,"" + ""<br> utility ->Send log to NewGenLib Customer Support</html>"", ""Critical error"", javax.swing.JOptionPane.ERROR_MESSAGE);
        } catch (Exception exp) {
            exp.printStackTrace(System.out);
            TroubleShootConnectivity troubleShoot = new TroubleShootConnectivity();
        }
        return response;
    }
",0
17804386,2,"    public void refreshStatus() {
        if (!enabledDisplay) return;
        try {
            String url = getServerFortURL();
            BufferedReader reader = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
            String data = null;
            int counter = 0;
            while ((data = reader.readLine()) != null && counter < 9) {
                status[counter] = UNKNOWN;
                if (data.matches("".*_alsius.gif.*"")) {
                    status[counter] = ALSIUS;
                    counter++;
                }
                if (data.matches("".*_syrtis.gif.*"")) {
                    status[counter] = SYRTIS;
                    counter++;
                }
                if (data.matches("".*_ignis.gif.*"")) {
                    status[counter] = IGNIS;
                    counter++;
                }
            }
        } catch (Exception exc) {
            for (int i = 0; i < status.length; i++) status[i] = UNKNOWN;
        }
    }
",0
23496080,2,"    private void fillTemplate(String resource, OutputStream outputStream, Map<String, String> replacements) throws IOException {
        URL url = Tools.getResource(resource);
        if (url == null) {
            throw new IOException(""could not find resource"");
        }
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(outputStream, Charset.forName(""UTF-8"")));
        String line = null;
        do {
            line = reader.readLine();
            if (line != null) {
                for (String key : replacements.keySet()) {
                    String value = replacements.get(key);
                    if (key != null) {
                        line = line.replace(key, value);
                    }
                }
                writer.write(line);
                writer.newLine();
            }
        } while (line != null);
        reader.close();
        writer.close();
    }
",0
17545948,2,"    public void run() {
        try {
            URL url = new URL(""http://pokedev.org/time.php"");
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            StringTokenizer s = new StringTokenizer(in.readLine());
            m_day = Integer.parseInt(s.nextToken());
            m_hour = Integer.parseInt(s.nextToken());
            m_minutes = Integer.parseInt(s.nextToken());
            in.close();
        } catch (Exception e) {
            System.out.println(""ERROR: Cannot reach time server, reverting to local time"");
            Calendar cal = Calendar.getInstance();
            m_hour = cal.get(Calendar.HOUR_OF_DAY);
            m_minutes = 0;
            m_day = 0;
        }
        while (m_isRunning) {
            m_minutes = m_minutes == 59 ? 0 : m_minutes + 1;
            if (m_minutes == 0) {
                if (m_hour == 23) {
                    incrementDay();
                    m_hour = 0;
                } else {
                    m_hour += 1;
                }
            }
            m_hour = m_hour == 23 ? 0 : m_hour + 1;
            if (System.currentTimeMillis() - m_lastWeatherUpdate >= 3600000) {
                generateWeather();
                m_lastWeatherUpdate = System.currentTimeMillis();
            }
            try {
                Thread.sleep(60000);
            } catch (Exception e) {
            }
        }
        System.out.println(""INFO: Time Service stopped"");
    }
",0
15223732,2,"    @Test(dataProvider = Arquillian.ARQUILLIAN_DATA_PROVIDER)
    public void shouldGreetUser(@ArquillianResource URL baseURL) throws IOException {
        final String name = ""Earthlings"";
        final URL url = new URL(baseURL, ""Foo.action"");
        StringBuilder builder = new StringBuilder();
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
        String line;
        while ((line = reader.readLine()) != null) {
            builder.append(line);
        }
        reader.close();
        LOGGER.info(""Returned response: "" + builder.toString());
        Assert.assertEquals(builder.toString(), FooService.GREETING + name);
    }
",0
8043909,2,"    public static void main(String[] args) {
        try {
            String data = URLEncoder.encode(""page"", ""UTF-8"") + ""="" + URLEncoder.encode(""admin"", ""UTF-8"");
            data += ""&"" + URLEncoder.encode(""nick"", ""UTF-8"") + ""="" + URLEncoder.encode(""k"", ""UTF-8"");
            data += ""&"" + URLEncoder.encode(""key"", ""UTF-8"") + ""="" + URLEncoder.encode(""asdf"", ""UTF-8"");
            data += ""&"" + URLEncoder.encode(""login"", ""UTF-8"") + ""="" + URLEncoder.encode(""1"", ""UTF-8"");
            URL url = new URL(""http://localhost:80/test/index.php"");
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(data);
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                System.out.println(line);
            }
            wr.close();
            rd.close();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
",0
21822158,2,"    private void loadObject(URL url) throws IOException {
        InputStream is = url.openStream();
        BufferedReader br = new BufferedReader(new InputStreamReader(is));
        int linecounter = 0;
        try {
            String line;
            boolean firstpass = true;
            String[] coordstext;
            Material material = null;
            while (((line = br.readLine()) != null)) {
                linecounter++;
                line = line.trim();
                if (line.length() > 0) {
                    if (line.startsWith(""mtllib"")) {
                        String mtlfile = line.substring(6).trim();
                        loadMtlFile(new URL(url, mtlfile));
                    } else if (line.startsWith(""usemtl"")) {
                        String mtlname = line.substring(6).trim();
                        material = (Material) materials.get(mtlname);
                    } else if (line.charAt(0) == 'v' && line.charAt(1) == ' ') {
                        float[] coords = new float[4];
                        coordstext = line.split(""\\s+"");
                        for (int i = 1; i < coordstext.length; i++) {
                            coords[i - 1] = Float.valueOf(coordstext[i]).floatValue();
                        }
                        if (firstpass) {
                            rightpoint = coords[0];
                            leftpoint = coords[0];
                            toppoint = coords[1];
                            bottompoint = coords[1];
                            nearpoint = coords[2];
                            farpoint = coords[2];
                            firstpass = false;
                        }
                        if (coords[0] > rightpoint) {
                            rightpoint = coords[0];
                        }
                        if (coords[0] < leftpoint) {
                            leftpoint = coords[0];
                        }
                        if (coords[1] > toppoint) {
                            toppoint = coords[1];
                        }
                        if (coords[1] < bottompoint) {
                            bottompoint = coords[1];
                        }
                        if (coords[2] > nearpoint) {
                            nearpoint = coords[2];
                        }
                        if (coords[2] < farpoint) {
                            farpoint = coords[2];
                        }
                        vertexsets.add(coords);
                    } else if (line.charAt(0) == 'v' && line.charAt(1) == 't') {
                        float[] coords = new float[4];
                        coordstext = line.split(""\\s+"");
                        for (int i = 1; i < coordstext.length; i++) {
                            coords[i - 1] = Float.valueOf(coordstext[i]).floatValue();
                        }
                        vertexsetstexs.add(coords);
                    } else if (line.charAt(0) == 'v' && line.charAt(1) == 'n') {
                        float[] coords = new float[4];
                        coordstext = line.split(""\\s+"");
                        for (int i = 1; i < coordstext.length; i++) {
                            coords[i - 1] = Float.valueOf(coordstext[i]).floatValue();
                        }
                        vertexsetsnorms.add(coords);
                    } else if (line.charAt(0) == 'f' && line.charAt(1) == ' ') {
                        coordstext = line.split(""\\s+"");
                        int[] v = new int[coordstext.length - 1];
                        int[] vt = new int[coordstext.length - 1];
                        int[] vn = new int[coordstext.length - 1];
                        for (int i = 1; i < coordstext.length; i++) {
                            String fixstring = coordstext[i].replaceAll(""//"", ""/0/"");
                            String[] tempstring = fixstring.split(""/"");
                            v[i - 1] = Integer.valueOf(tempstring[0]).intValue();
                            if (tempstring.length > 1) {
                                vt[i - 1] = Integer.valueOf(tempstring[1]).intValue();
                            } else {
                                vt[i - 1] = 0;
                            }
                            if (tempstring.length > 2) {
                                vn[i - 1] = Integer.valueOf(tempstring[2]).intValue();
                            } else {
                                vn[i - 1] = 0;
                            }
                        }
                        Face face = new Face(v, vt, vn, material);
                        faces.add(face);
                    }
                }
            }
        } catch (IOException e) {
            System.out.println(""Failed to read file: "" + br.toString());
        } catch (NumberFormatException e) {
            System.out.println(""Malformed OBJ (on line "" + linecounter + ""): "" + br.toString() + ""\r \r"" + e.getMessage());
        }
    }
",0
22442269,2,"    public static void checkAndUpdateGameData() {
        new ErrThread() {

            @Override
            public void handledRun() throws Throwable {
                try {
                    URL url = new URL(ONLINE_CLIENT_DATA + ""gamedata.xml"");
                    BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
                    int lastversion = 0;
                    String readHeader1 = br.readLine();
                    String readHeader2 = br.readLine();
                    String[] parts = readHeader2.split("" "");
                    lastversion = new Integer(parts[1]);
                    GameDatabase.loadVersion();
                    if (GameDatabase.version < lastversion) {
                        Logger.log(LogTypes.LOG, ""Downloading new gamedata"");
                        BufferedOutputStream bo = null;
                        File destfile = new File(GameDatabase.dataFilePath);
                        if (!destfile.createNewFile()) {
                            destfile.delete();
                            destfile.createNewFile();
                        }
                        bo = new BufferedOutputStream(new FileOutputStream(destfile));
                        bo.write((readHeader1 + ""\n"").getBytes());
                        bo.write((readHeader2 + ""\n"").getBytes());
                        int readedbyte;
                        while ((readedbyte = br.read()) != -1) {
                            bo.write(readedbyte);
                        }
                        bo.flush();
                        try {
                            br.close();
                            bo.close();
                        } catch (Exception ex) {
                            Logger.log(ex);
                        }
                    }
                } catch (java.net.UnknownHostException unknownHost) {
                    Logger.log(""Sourceforge is down, cannot update gamedata"");
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(FrameOrganizer.getClientFrame(), ""The gamedata is outdated, but Coopnet couldn't update it!"", ""Gamedata outdated"", JOptionPane.INFORMATION_MESSAGE);
                    throw e;
                } finally {
                    GameDatabase.loadVersion();
                    GameDatabase.load("""", GameDatabase.dataFilePath);
                    GameDatabase.detectGames();
                }
            }
        }.start();
    }
",0
22556622,2,"    public void run() {
        int requestCount = 0;
        long i0 = System.currentTimeMillis();
        while (requestCount != maxRequests) {
            long r0 = System.currentTimeMillis();
            try {
                url = new URL(requestedUrl);
                logger.debug(""Requesting Url, "" + url.toString());
                BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
                while ((httpResponse = in.readLine()) != null) {
                    logger.trace(""Http Response = "" + httpResponse);
                }
            } catch (Exception e) {
                logger.fatal(""Exception thrown retrievng Url = "" + requestedUrl + "", "" + e);
                notification.setNotification(e.toString());
            }
            long r1 = System.currentTimeMillis();
            requestedElapsedTime = r1 - r0;
            logger.debug(""Request("" + this.getName() + ""/"" + this.getId() + "") #"" + requestCount + "" processed, took "" + requestedElapsedTime + ""ms"");
            requestCount++;
        }
        long i1 = System.currentTimeMillis();
        iterationElapsedTime = i1 - i0;
        logger.trace(""Iteration elapsed time is "" + iterationElapsedTime + ""ms for thread ID "" + this.getId());
        status.incrementIterationsComplete();
        logger.info(""Iteration for Url = "" + requestedUrl + "", ("" + this.getName() + ""/"" + this.getId() + "") took "" + iterationElapsedTime + ""ms"");
        try {
            logger.debug(""Joining thread("" + this.getId() + "")"");
            this.join(100);
        } catch (Exception e) {
            logger.fatal(e);
            notification.setNotification(e.toString());
        }
    }
",0
8330518,2,"    public void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException {
        wabclient.Attributes prop = new wabclient.Attributes(attributes);
        try {
            if (tag.equals(""window"")) startWindow(prop); else if (tag.equals(""splitpanel"")) startSplitPanel(prop); else if (tag.equals(""desktoppane"")) startDesktopPane(prop); else if (tag.equals(""tabcontrol"")) startTabcontrol(prop); else if (tag.equals(""panel"")) startPanel(prop); else if (tag.equals(""statusbar"")) startStatusbar(prop); else if (tag.equals(""toolbar"")) startToolbar(prop); else if (tag.equals(""toolbarbutton"")) startToolbarbutton(prop); else if (tag.equals(""menu"")) startMenu(prop); else if (tag.equals(""menuitem"")) startMenuitem(prop); else if (tag.equals(""separator"")) menu.addSeparator(); else if (tag.equals(""choice"")) startChoice(prop); else if (tag.equals(""list"")) startList(prop); else if (tag.equals(""option"")) startOption(prop); else if (tag.equals(""label"")) startLabel(prop); else if (tag.equals(""button"")) startButton(prop); else if (tag.equals(""groupbox"")) startGroupbox(prop); else if (tag.equals(""radiobutton"")) startRadioButton(prop); else if (tag.equals(""checkbox"")) startCheckbox(prop); else if (tag.equals(""image"")) startImage(prop); else if (tag.equals(""textarea"")) startTextArea(prop); else if (tag.equals(""singlelineedit"")) startSingleLineEdit(prop); else if (tag.equals(""treeview"")) startTreeview(prop); else if (tag.equals(""treeitem"")) startTreeitem(prop); else if (tag.equals(""table"")) startTable(prop); else if (tag.equals(""header"")) startHeader(prop); else if (tag.equals(""row"")) {
                rowNumber++;
                columnNumber = 0;
                model.addRow();
            } else if (tag.equals(""column"")) {
                columnNumber++;
                if (prop == null) {
                    System.err.println(""table.column without properties"");
                    return;
                }
                String value = prop.getValue(""value"", """");
                model.setValueAt(value, rowNumber - 1, columnNumber - 1);
            } else if (tag.equals(""rmbmenuitem"")) {
                if (prop == null) {
                    System.err.println(""datawindow.menuitem without properties"");
                    return;
                }
                String action = prop.getValue(""action"", """");
                String label = prop.getValue(""label"", """");
                JMenuItem mi = new JMenuItem(label);
                mi.setActionCommand(action);
                mi.addActionListener(win);
                rmbmenu.add(mi);
            } else if (tag.equals(""rmbseparator"")) {
                rmbmenu.addSeparator();
            } else if (tag.equals(""script"")) {
                win.beginScript();
                String url = prop.getValue(""src"");
                if (url.length() > 0) {
                    try {
                        BufferedReader r = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
                        String buffer;
                        while (true) {
                            buffer = r.readLine();
                            if (buffer == null) break;
                            win.script += buffer + ""\n"";
                        }
                        r.close();
                        win.endScript();
                    } catch (IOException ioe) {
                        System.err.println(""[IOError] "" + ioe.getMessage());
                        System.exit(0);
                    }
                }
            } else System.err.println(""[win] unparsed tag: "" + tag);
        } catch (Exception e) {
            e.printStackTrace(System.err);
        }
    }
",0
13176901,2,"    public boolean refresh() {
        try {
            synchronized (text) {
                stream = (new URL(url)).openStream();
                BufferedReader reader = new BufferedReader(new InputStreamReader(stream));
                String line;
                StringBuilder sb = new StringBuilder();
                while ((line = reader.readLine()) != null) {
                    sb.append(line);
                    sb.append(""\n"");
                }
                text = sb.toString();
            }
            price = 0;
            date = null;
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        } finally {
            if (stream != null) try {
                stream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return true;
    }
",0
17141933,2,"    public static InputSource getInputSource(URL url) throws IOException {
        String proto = url.getProtocol().toLowerCase();
        if (!(""http"".equals(proto) || ""https"".equals(proto))) throw new IllegalArgumentException(""OAI-PMH only allows HTTP(S) as network protocol!"");
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        StringBuilder ua = new StringBuilder(""Java/"");
        ua.append(System.getProperty(""java.version""));
        ua.append("" ("");
        ua.append(OAIHarvester.class.getName());
        ua.append(')');
        conn.setRequestProperty(""User-Agent"", ua.toString());
        conn.setRequestProperty(""Accept-Encoding"", ""gzip, deflate, identity;q=0.3, *;q=0"");
        conn.setRequestProperty(""Accept-Charset"", ""utf-8, *;q=0.1"");
        conn.setRequestProperty(""Accept"", ""text/xml, application/xml, *;q=0.1"");
        conn.setUseCaches(false);
        conn.setFollowRedirects(true);
        log.debug(""Opening connection..."");
        InputStream in = null;
        try {
            conn.connect();
            in = conn.getInputStream();
        } catch (IOException ioe) {
            int after, code;
            try {
                after = conn.getHeaderFieldInt(""Retry-After"", -1);
                code = conn.getResponseCode();
            } catch (IOException ioe2) {
                after = -1;
                code = -1;
            }
            if (code == HttpURLConnection.HTTP_UNAVAILABLE && after > 0) throw new RetryAfterIOException(after, ioe);
            throw ioe;
        }
        String encoding = conn.getContentEncoding();
        if (encoding == null) encoding = ""identity"";
        encoding = encoding.toLowerCase();
        log.debug(""HTTP server uses "" + encoding + "" content encoding."");
        if (""gzip"".equals(encoding)) in = new GZIPInputStream(in); else if (""deflate"".equals(encoding)) in = new InflaterInputStream(in); else if (!""identity"".equals(encoding)) throw new IOException(""Server uses an invalid content encoding: "" + encoding);
        String contentType = conn.getContentType();
        String charset = null;
        if (contentType != null) {
            contentType = contentType.toLowerCase();
            int charsetStart = contentType.indexOf(""charset="");
            if (charsetStart >= 0) {
                int charsetEnd = contentType.indexOf("";"", charsetStart);
                if (charsetEnd == -1) charsetEnd = contentType.length();
                charsetStart += ""charset="".length();
                charset = contentType.substring(charsetStart, charsetEnd).trim();
            }
        }
        log.debug(""Charset from Content-Type: '"" + charset + ""'"");
        InputSource src = new InputSource(in);
        src.setSystemId(url.toString());
        src.setEncoding(charset);
        return src;
    }
",0
12678045,2,"    private void addQDInformation() {
        try {
            long qdDate = System.currentTimeMillis();
            if (_local == true) {
                File qdFile = new File(""qdinfo.dat"");
                if (!qdFile.exists()) {
                    return;
                }
                qdDate = qdFile.lastModified();
            }
            if (qdDate > this._qdFileDate) {
                this._qdFileDate = qdDate;
                for (int ii = 0; ii < this._projectInfo.size(); ii++) {
                    Information info = getInfo(ii);
                    if (info != null) {
                        info._qdValue = null;
                    }
                }
                Reader reader = null;
                if (_local == true) {
                    reader = new FileReader(""qdinfo.dat"");
                } else {
                    StringBuffer urlName = new StringBuffer();
                    urlName.append(""http://boston.quik.com/rph/"");
                    urlName.append(""qdinfo.dat"");
                    try {
                        URL url = new URL(urlName.toString());
                        InputStream stream = url.openStream();
                        reader = new InputStreamReader(stream);
                    } catch (MalformedURLException mue) {
                        mue.printStackTrace();
                    }
                }
                BufferedReader file = new BufferedReader(reader);
                try {
                    String line = null;
                    while ((line = file.readLine()) != null) {
                        if (line.startsWith(""pg "")) {
                            this._qdDate = Long.parseLong(line.substring(3), 16);
                            this._qdDate = (this._qdDate + 946684800) * 1000;
                        } else if (line.startsWith(""pt "")) {
                            line = line.substring(3).trim();
                            int pos = -1;
                            while ((line.length() > 0) && ((pos = line.indexOf(' ')) > 0)) {
                                int projectNum = 0;
                                Double value = null;
                                if (pos > 0) {
                                    projectNum = Integer.parseInt(line.substring(0, pos));
                                    line = line.substring(pos).trim();
                                }
                                pos = line.indexOf(' ');
                                if (pos > 0) {
                                    value = new Double((double) Integer.parseInt(line.substring(0, pos)) / 100);
                                    line = line.substring(pos).trim();
                                }
                                Information info = getInfo(projectNum);
                                if (info == null) {
                                    info = createInfo(projectNum);
                                }
                                if (info._qdValue == null) {
                                    info._qdValue = value;
                                }
                            }
                        }
                    }
                } finally {
                    file.close();
                }
            }
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
        }
    }
",0
18263904,2,"    private void uploadConfiguration(URL url, IUser iUser) throws IOException, ContributionServiceException {
        StringBuilder sb = new StringBuilder();
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));
        String line;
        while ((line = reader.readLine()) != null) {
            sb.append(line).append(System.getProperty(""line.separator""));
        }
        SYSTEM_SETTINGS_SVC.setElementMetadata(sb.toString(), iUser);
        GetSystemScriptServlet.resetScript();
    }
",0
15988143,2,"    public static List getUrlData(URL url) throws IOException {
        List beans = new ArrayList(256);
        System.out.println(""Retreiving content for: "" + url);
        StringBuffer content = new StringBuffer(4096);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String str;
        while ((str = in.readLine()) != null) {
            if (str.startsWith(""#"")) {
                continue;
            }
            StringTokenizer stringTokenizer = new StringTokenizer(str, ""\t"");
            String InteractionAc = stringTokenizer.nextToken();
            String reactomeId = stringTokenizer.nextToken();
            ReactomeBean reactomeBean = new ReactomeBean();
            reactomeBean.setReactomeID(reactomeId);
            reactomeBean.setInteractionAC(InteractionAc);
            beans.add(reactomeBean);
        }
        in.close();
        return beans;
    }
",0
17785594,2,"    public void handler(List<GoldenBoot> gbs, TargetPage target) {
        try {
            URL url = new URL(target.getUrl());
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = null;
            String include = ""Top Scorers"";
            while ((line = reader.readLine()) != null) {
                if (line.indexOf(include) != -1) {
                    buildGildenBoot(line, gbs);
                    break;
                }
            }
            reader.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
    }
",0
14319557,2,"    public InstanceMonitor(String awsAccessId, String awsSecretKey, String bucketName, boolean first) throws IOException {
        this.awsAccessId = awsAccessId;
        this.awsSecretKey = awsSecretKey;
        props = new Properties();
        while (true) {
            try {
                s3 = new RestS3Service(new AWSCredentials(awsAccessId, awsSecretKey));
                bucket = new S3Bucket(bucketName);
                S3Object obj = s3.getObject(bucket, EW_PROPERTIES);
                props.load(obj.getDataInputStream());
                break;
            } catch (S3ServiceException ex) {
                logger.error(""problem fetching props from bucket, retrying"", ex);
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException iex) {
                }
            }
        }
        URL url = new URL(""http://169.254.169.254/latest/meta-data/hostname"");
        hostname = new BufferedReader(new InputStreamReader(url.openStream())).readLine();
        url = new URL(""http://169.254.169.254/latest/meta-data/instance-id"");
        instanceId = new BufferedReader(new InputStreamReader(url.openStream())).readLine();
        url = new URL(""http://169.254.169.254/latest/meta-data/public-ipv4"");
        externalIP = new BufferedReader(new InputStreamReader(url.openStream())).readLine();
        this.dns = new NetticaAPI(props.getProperty(NETTICA_USER), props.getProperty(NETTICA_PASS));
        this.userData = awsAccessId + "" "" + awsSecretKey + "" "" + bucketName;
        this.first = first;
        logger.info(""InstanceMonitor initialized, first="" + first);
    }
",0
20020133,2,"    private boolean loadSymbol(QuoteCache quoteCache, Symbol symbol, TradingDate startDate, TradingDate endDate) {
        boolean success = true;
        String URLString = constructURL(symbol, startDate, endDate);
        PreferencesManager.ProxyPreferences proxyPreferences = PreferencesManager.loadProxySettings();
        try {
            URL url;
            url = new URL(URLString);
            InputStreamReader input = new InputStreamReader(url.openStream());
            BufferedReader bufferedInput = new BufferedReader(input);
            String line;
            while ((line = bufferedInput.readLine()) != null) {
                Class cl = null;
                Constructor cnst = null;
                QuoteFilter filter = null;
                try {
                    cl = Class.forName(""org.mov.quote."" + name + ""QuoteFilter"");
                    try {
                        cnst = cl.getConstructor(new Class[] { Symbol.class });
                    } catch (SecurityException e2) {
                        e2.printStackTrace();
                    } catch (NoSuchMethodException e2) {
                        e2.printStackTrace();
                    }
                    try {
                        filter = (QuoteFilter) cnst.newInstance(new Object[] { symbol });
                    } catch (IllegalArgumentException e3) {
                        e3.printStackTrace();
                    } catch (InstantiationException e3) {
                        e3.printStackTrace();
                    } catch (IllegalAccessException e3) {
                        e3.printStackTrace();
                    } catch (InvocationTargetException e3) {
                        e3.printStackTrace();
                    }
                } catch (ClassNotFoundException e1) {
                    e1.printStackTrace();
                }
                Quote quote = filter.toQuote(line);
                if (quote != null) quoteCache.load(quote);
            }
            bufferedInput.close();
        } catch (BindException e) {
            DesktopManager.showErrorMessage(Locale.getString(""UNABLE_TO_CONNECT_ERROR"", e.getMessage()));
            success = false;
        } catch (ConnectException e) {
            DesktopManager.showErrorMessage(Locale.getString(""UNABLE_TO_CONNECT_ERROR"", e.getMessage()));
            success = false;
        } catch (UnknownHostException e) {
            DesktopManager.showErrorMessage(Locale.getString(""UNKNOWN_HOST_ERROR"", e.getMessage()));
            success = false;
        } catch (NoRouteToHostException e) {
            DesktopManager.showErrorMessage(Locale.getString(""DESTINATION_UNREACHABLE_ERROR"", e.getMessage()));
            success = false;
        } catch (MalformedURLException e) {
            DesktopManager.showErrorMessage(Locale.getString(""INVALID_PROXY_ERROR"", proxyPreferences.host, proxyPreferences.port));
            success = false;
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
            DesktopManager.showErrorMessage(Locale.getString(""ERROR_DOWNLOADING_QUOTES""));
            success = false;
        }
        return success;
    }
",0
19747820,2,"    public String parse(String term) throws OntologyAdaptorException {
        try {
            String sUrl = getUrl(term);
            if (sUrl.length() > 0) {
                URL url = new URL(sUrl);
                InputStream in = url.openStream();
                StringBuilder sb = new StringBuilder();
                BufferedReader r = new BufferedReader(new InputStreamReader(in));
                String line = null;
                while ((line = r.readLine()) != null) {
                    if (sb.length() > 0) {
                        sb.append(""\r\n"");
                    }
                    sb.append(line);
                }
                return sb.toString();
            } else {
                return """";
            }
        } catch (Exception ex) {
            throw new OntologyAdaptorException(""Convertion to lucene failed."", ex);
        }
    }
",0
18366943,2,"    protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException {
        String proto = url.getProtocol().toLowerCase(Locale.ENGLISH);
        if (!(""http"".equals(proto) || ""https"".equals(proto))) throw new IllegalArgumentException(""OAI only allows HTTP(S) as network protocol!"");
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setConnectTimeout(timeout * 1000);
        conn.setReadTimeout(timeout * 1000);
        StringBuilder ua = new StringBuilder(""Java/"").append(System.getProperty(""java.version"")).append("" ("").append(de.pangaea.metadataportal.Package.getProductName()).append('/').append(de.pangaea.metadataportal.Package.getVersion()).append(""; OAI downloader)"");
        conn.setRequestProperty(""User-Agent"", ua.toString());
        conn.setRequestProperty(""Accept-Encoding"", ""gzip, deflate, identity;q=0.3, *;q=0"");
        conn.setRequestProperty(""Accept-Charset"", ""utf-8, *;q=0.1"");
        conn.setRequestProperty(""Accept"", ""text/xml, application/xml, *;q=0.1"");
        if (checkModifiedDate != null && checkModifiedDate.get() != null) conn.setIfModifiedSince(checkModifiedDate.get().getTime());
        conn.setUseCaches(false);
        conn.setFollowRedirects(true);
        log.debug(""Opening connection..."");
        InputStream in = null;
        try {
            conn.connect();
            in = conn.getInputStream();
        } catch (IOException ioe) {
            int after, code;
            try {
                after = conn.getHeaderFieldInt(""Retry-After"", -1);
                code = conn.getResponseCode();
            } catch (IOException ioe2) {
                after = -1;
                code = -1;
            }
            if (code == HttpURLConnection.HTTP_UNAVAILABLE && after > 0) throw new RetryAfterIOException(after, ioe);
            throw ioe;
        }
        if (checkModifiedDate != null) {
            if (conn.getResponseCode() == HttpURLConnection.HTTP_NOT_MODIFIED) {
                log.debug(""File not modified since "" + checkModifiedDate.get());
                if (in != null) in.close();
                return null;
            }
            long d = conn.getLastModified();
            checkModifiedDate.set((d == 0L) ? null : new Date(d));
        }
        String encoding = conn.getContentEncoding();
        if (encoding == null) encoding = ""identity"";
        encoding = encoding.toLowerCase(Locale.ENGLISH);
        log.debug(""HTTP server uses "" + encoding + "" content encoding."");
        if (""gzip"".equals(encoding)) in = new GZIPInputStream(in); else if (""deflate"".equals(encoding)) in = new InflaterInputStream(in); else if (!""identity"".equals(encoding)) throw new IOException(""Server uses an invalid content encoding: "" + encoding);
        String contentType = conn.getContentType();
        String charset = null;
        if (contentType != null) {
            contentType = contentType.toLowerCase(Locale.ENGLISH);
            int charsetStart = contentType.indexOf(""charset="");
            if (charsetStart >= 0) {
                int charsetEnd = contentType.indexOf("";"", charsetStart);
                if (charsetEnd == -1) charsetEnd = contentType.length();
                charsetStart += ""charset="".length();
                charset = contentType.substring(charsetStart, charsetEnd).trim();
            }
        }
        log.debug(""Charset from Content-Type: '"" + charset + ""'"");
        InputSource src = new InputSource(in);
        src.setSystemId(url.toString());
        src.setEncoding(charset);
        return src;
    }
",0
17515284,2,"    public String readBaseLib() throws Exception {
        if (_BASE_LIB_JS == null) {
            StringBuffer js = new StringBuffer();
            try {
                URL url = AbstractRunner.class.getResource(_BASELIB_FILENAME);
                if (url != null) {
                    InputStream is = url.openStream();
                    InputStreamReader reader = new InputStreamReader(is);
                    BufferedReader bfReader = new BufferedReader(reader);
                    String tmp = null;
                    do {
                        tmp = bfReader.readLine();
                        if (tmp != null) {
                            js.append(tmp).append('\n');
                        }
                    } while (tmp != null);
                    bfReader.close();
                    reader.close();
                    is.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
                throw e;
            }
            _BASE_LIB_JS = js.toString();
        }
        return _BASE_LIB_JS;
    }
",0
21461878,2,"    private boolean verifyAppId(String appid) {
        try {
            String urlstr = ""http://"" + appid + "".appspot.com"";
            URL url = new URL(urlstr);
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer buf = new StringBuffer();
            String line;
            while ((line = reader.readLine()) != null) {
                buf.append(line);
            }
            reader.close();
            return buf.toString().contains(""hyk-proxy"");
        } catch (Exception e) {
        }
        return false;
    }
",0
22337078,2,"    private List getPluginClassList(List pluginFileList) {
        ArrayList l = new ArrayList();
        for (Iterator i = pluginFileList.iterator(); i.hasNext(); ) {
            URL url = (URL) i.next();
            log.debug(""Trying file "" + url.toString());
            try {
                BufferedReader r = new BufferedReader(new InputStreamReader(url.openStream(), ""utf-8""));
                String line;
                while ((line = r.readLine()) != null) {
                    line = line.trim();
                    if (line.length() == 0 || line.charAt(0) == '#') continue;
                    l.add(line);
                }
            } catch (Exception e) {
                log.warn(""Could not load "" + url, e);
            }
        }
        return l;
    }
",0
23482443,2,"    public static String getDocumentAsString(URL url) throws IOException {
        StringBuffer result = new StringBuffer();
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF8""));
        String line = """";
        while (line != null) {
            result.append(line);
            line = in.readLine();
        }
        return result.toString();
    }
",0
11511985,2,"    public static void test() {
        try {
            Pattern pattern = Pattern.compile(""[0-9]{3}\\. <a href='(.*)\\.html'>(.*)</a><br />"");
            URL url = new URL(""http://farmfive.com/"");
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            int count = 0;
            while ((line = br.readLine()) != null) {
                Matcher match = pattern.matcher(line);
                if (match.matches()) {
                    System.out.println(match.group(1) + "" "" + match.group(2));
                    count++;
                }
            }
            System.out.println(count + "" counted"");
            br.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",0
22222255,2,"    public void doQuery(String keyword, final int page) {
        this.keyword = keyword;
        keyword = keyword.replace(' ', '+');
        commentText = new JTextArea(10, 80);
        final Vector commentVector = new Vector();
        int matchingDocCount = 0;
        int hitCount = 0;
        getContentPane().removeAll();
        Vector linkVector = new Vector();
        try {
            String featureid = keyword;
            URL connectURL = new URL(""http://www.ensembl.org/Homo_sapiens/textview?idx=External&q="" + keyword + ""&page="" + page);
            InputStream urlStream = connectURL.openStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(urlStream));
            String line, link, content, label, head = null;
            Box tabBox = null;
            String linkstr;
            String comment = """";
            int EnsExtCount;
            int EnsGeneCount;
            while ((line = reader.readLine()) != null) {
                if (line.indexOf(""documents match your query"") != -1) {
                    matchingDocCount = Integer.parseInt(line.substring(line.indexOf(""<B>"") + 3, line.indexOf(""</B>"")));
                    continue;
                }
                if (line.indexOf(""matches in the Ensembl External index"") != -1) {
                }
                if (line.indexOf(""matches in the Ensembl Gene index:"") != -1) {
                }
                if (line.indexOf(""Homo_sapiens/geneview?gene"") != -1) {
                    if (line.indexOf(""www.ensembl.org"") != -1) {
                        line = line.substring(line.indexOf(""www.ensembl.org""));
                        line = line.substring(line.indexOf(""</A>"") + 4);
                    }
                    int linkStart = line.indexOf(""Homo_sapiens/geneview?gene"");
                    if (linkStart == -1) break;
                    linkstr = ""http://www.ensembl.org/"" + line.substring(linkStart, line.indexOf(""\"">""));
                    line = line.substring(line.indexOf(""</A>"") + 4);
                    StringBuffer chars = new StringBuffer(line.length());
                    boolean inTag = false;
                    boolean inEntity = false;
                    boolean firstBRTossed = false;
                    line = line.substring(line.indexOf(""<""));
                    for (int ch = 0; ch < line.length(); ch++) {
                        if (line.charAt(ch) == '<') {
                            inTag = true;
                            if ((line.charAt(ch + 1) == 'b' || line.charAt(ch + 1) == 'B') && (line.charAt(ch + 2) == 'r' || line.charAt(ch + 2) == 'R')) {
                                if (firstBRTossed) {
                                    chars.append(""\n"");
                                } else {
                                    firstBRTossed = true;
                                }
                            }
                        }
                        if (line.charAt(ch) == '&') inEntity = true;
                        if (!inTag && !inEntity) chars.append(line.charAt(ch));
                        if (line.charAt(ch) == ';') inEntity = false;
                        if (line.charAt(ch) == '>') inTag = false;
                    }
                    comment = chars.toString();
                    commentVector.add(comment);
                    linkVector.add(linkstr);
                    hitCount++;
                }
            }
            if (hitCount == 0) commentText.setText(""No Matches Found for "" + keyword);
            commentText.setLineWrap(true);
            commentText.setWrapStyleWord(true);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, ""No Matches Found for "" + keyword);
            return;
        }
        final JList lst = new JList(linkVector);
        lst.addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent e) {
                int ind = lst.getSelectedIndex();
                commentText.setText((String) commentVector.elementAt(ind));
                commentText.select(0, 0);
            }
        });
        MouseListener mouseListener = new MouseAdapter() {

            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    int index = lst.locationToIndex(e.getPoint());
                    extractEnsemblCoords((String) lst.getModel().getElementAt(index));
                }
            }
        };
        lst.addMouseListener(mouseListener);
        lst.setSelectedIndex(0);
        scrollPane = new JScrollPane(commentText);
        JPanel pagePanel = new JPanel();
        final JButton prevBttn = new JButton(""<="");
        final JButton nextBttn = new JButton(""=>"");
        prevBttn.setEnabled(page > 1);
        nextBttn.setEnabled(page + hitCount < matchingDocCount);
        ActionListener pageHandler = new ActionListener() {

            public void actionPerformed(ActionEvent ae) {
                if (ae.getSource() == prevBttn) {
                    doQuery(EnsemblLookup.this.keyword, page - 20);
                } else {
                    doQuery(EnsemblLookup.this.keyword, page + 20);
                }
            }
        };
        pagePanel.add(prevBttn);
        prevBttn.addActionListener(pageHandler);
        pagePanel.add(nextBttn);
        nextBttn.addActionListener(pageHandler);
        JPanel hitsAndTextPanel = new JPanel();
        hitsAndTextPanel.setLayout(new GridLayout(2, 1));
        hitsAndTextPanel.add(new JScrollPane(lst));
        hitsAndTextPanel.add(scrollPane);
        getContentPane().setLayout(new BorderLayout());
        getContentPane().add(hitsAndTextPanel, BorderLayout.CENTER);
        getContentPane().add(pagePanel, BorderLayout.SOUTH);
        setTitle(""Results for "" + keyword + ""  Displaying "" + (page + 1) + ((hitCount > 1) ? ("" - "" + (page + hitCount)) : """") + "" of "" + matchingDocCount);
        show();
    }
",0
19332849,2,"    public String getResponse(String URLstring) {
        String str = """";
        try {
            URL url = new URL(URLstring);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String st = """";
            while ((st = in.readLine()) != null) {
                str += ""\n"" + st;
            }
            in.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
        return str;
    }
",0
19660893,2,"    private String load(URL url) {
        BufferedReader r = null;
        try {
            r = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer buf = new StringBuffer();
            while (r.ready()) {
                buf.append(r.readLine()).append('\n');
            }
            r.close();
            return buf.toString();
        } catch (IOException e) {
            logger.severe(""Could not load shader program: "" + e);
            logger.logp(Level.SEVERE, getClass().getName(), ""load(URL)"", ""Exception"", e);
            return null;
        }
    }
",0
14038399,2,"    private void run(String[] args) throws Throwable {
        ArgParser parser = new ArgParser(""Run an experiment"");
        parser.addOptions(this, true);
        args = parser.matchAllArgs(args, 0, ArgParserOption.EXIT_ON_ERROR, ArgParserOption.STOP_FIRST_UNMATCHED);
        if (log4jFile != null) {
            logger.info(""Using another log4j configuration: %s"", log4jFile);
            PropertyConfigurator.configure(log4jFile.getAbsolutePath());
        }
        final TreeMap<TaskName, Class<Task>> tasks = GenericHelper.newTreeMap();
        final Enumeration<URL> e = About.class.getClassLoader().getResources(EXPERIMENT_PACKAGES);
        while (e.hasMoreElements()) {
            final URL url = e.nextElement();
            logger.debug(""Got URL %s"", url);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            while ((line = in.readLine()) != null) {
                String packageName = line;
                getTasks(url, tasks, packageName);
            }
        }
        getTasks(null, tasks, getClass().getPackage().getName());
        if (tasks.isEmpty()) {
            logger.fatal(""I did not find any valid experiment (service bpiwowar.experiments.ExperimentListProvider)"");
            System.exit(1);
        }
        if (args.length == 0 || args[0].equals(""list"")) {
            System.out.format(""Available experiments:%n"");
            TreeMapArray<PackageName, String> map = TreeMapArray.newInstance();
            for (Entry<TaskName, Class<Task>> entry : tasks.entrySet()) {
                TaskName task = entry.getKey();
                if (showClassNames) map.add(task.packageName, String.format(""%s (%s)"", task.name, entry.getValue().toString())); else map.add(task.packageName, task.name);
            }
            Stack<PackageName> ancestors = new Stack<PackageName>();
            for (Entry<PackageName, ArrayList<String>> entry : map.entrySet()) {
                final PackageName key = entry.getKey();
                while (!ancestors.isEmpty() && key.commonPrefixLength(ancestors.peek()) != ancestors.peek().getLength()) ancestors.pop();
                int nbAncestors = ancestors.size();
                int c = nbAncestors > 0 ? ancestors.peek().getLength() : 0;
                StringBuilder s = new StringBuilder();
                for (int i = 0; i < c; i++) s.append(""|"");
                for (int i = c; i < key.getLength(); i++) {
                    s.append(""|"");
                    ancestors.add(new PackageName(key, i + 1));
                    System.out.format(""%s%n"", s);
                    System.out.format(""%s+ [%s]%n"", s, ancestors.peek());
                    nbAncestors++;
                }
                String prefix = s.toString();
                for (String task : entry.getValue()) System.out.format(""%s|- %s%n"", prefix, task);
                ancestors.add(key);
            }
            return;
        } else if (args[0].equals(SEARCH_COMMAND)) {
            final class Options {

                @OrderedArgument(required = true)
                String search;
            }
            Options options = new Options();
            ArgParser ap = new ArgParser(SEARCH_COMMAND);
            ap.addOptions(options);
            ap.matchAllArgs(args, 1);
            logger.info(""Searching for %s"", options.search);
            for (Entry<TaskName, Class<Task>> entry : tasks.entrySet()) {
                TaskName taskname = entry.getKey();
                if (taskname.name.contains(options.search)) {
                    System.err.format(""[*] %s - %s%n   %s%n"", taskname, entry.getValue(), entry.getValue().getAnnotation(TaskDescription.class).description());
                }
            }
            return;
        }
        String taskName = args[0];
        args = Arrays.copyOfRange(args, 1, args.length);
        ArrayList<Class<Task>> matching = GenericHelper.newArrayList();
        for (Entry<TaskName, Class<Task>> entry : tasks.entrySet()) {
            if (entry.getKey().name.equals(taskName)) matching.add(entry.getValue());
        }
        if (matching.isEmpty()) {
            System.err.println(""No task match "" + taskName);
            System.exit(1);
        }
        if (matching.size() > 1) {
            System.err.println(""Too many tasks match "" + taskName);
            System.exit(1);
        }
        Class<Task> taskClass = matching.get(0);
        logger.info(""Running experiment "" + taskClass.getCanonicalName());
        Task task = taskClass.newInstance();
        int errorCode = 0;
        try {
            task.init(args);
            if (xstreamOutput != null) {
                OutputStream out;
                if (xstreamOutput.toString().equals(""-"")) out = System.out; else out = new FileOutputStream(xstreamOutput);
                logger.info(""Serializing the object into %s"", xstreamOutput);
                new XStream().toXML(task, out);
                out.close();
            } else {
                errorCode = task.run();
            }
            logger.info(""Finished task"");
        } catch (Throwable t) {
            if (t instanceof InvocationTargetException && t.getCause() != null) {
                t = t.getCause();
            }
            logger.error(""Exception thrown while executing the action:%n%s%n"", t);
            errorCode = 2;
        }
        System.exit(errorCode);
    }
",0
17635420,2,"    public static void verifierSiDerniereVersionDesPluginsMenus(ControleurDeMenu i) {
        if (i.getURLFichierInfoDerniereVersion() == null || i.getURLFichierInfoDerniereVersion() == """") {
            System.err.println(""Evenements.java:verifierSiDerniereVersionDesPluginsMenus impossible:\n"" + ""pour le plugin chargeur de menu :"" + i.getNomPlugin());
        }
        if (i.getVersionPlugin() == 0) {
            System.err.println(""version non renseignee pour :"" + i.getNomPlugin() + "" on continue sur le plugin suivant"");
            return;
        }
        URL url;
        try {
            url = new URL(i.getURLFichierInfoDerniereVersion());
        } catch (MalformedURLException e1) {
            System.err.println(""impossible d'ouvrir l'URL (url mal formee)"" + i.getURLFichierInfoDerniereVersion() + ""\n lors de la recuperation des informations de version sur "" + i.getNomPlugin());
            return;
        }
        InputStream is;
        try {
            is = url.openStream();
        } catch (IOException e1) {
            System.err.println(""impossible d'ouvrir l'URL (destination inaccessible)"" + i.getURLFichierInfoDerniereVersion() + ""\n lors de la recuperation des informations de version sur "" + i.getNomPlugin());
            return;
        }
        File destination;
        try {
            destination = File.createTempFile(""SimplexeReseau"" + compteurDeFichiersTemporaires, "".buf"");
        } catch (IOException e1) {
            System.err.println(""impossible de creer le fichier temporaire\n lors de la recuperation des informations de version sur "" + i.getNomPlugin());
            return;
        }
        compteurDeFichiersTemporaires++;
        destination.deleteOnExit();
        java.io.InputStream sourceFile = null;
        java.io.FileOutputStream destinationFile = null;
        try {
            destination.createNewFile();
        } catch (IOException e) {
            System.err.println(""impossible de creer un fichier temporaire\n lors de la recuperation des informations de version sur "" + i.getNomPlugin());
            return;
        }
        sourceFile = is;
        try {
            destinationFile = new FileOutputStream(destination);
        } catch (FileNotFoundException e) {
            System.err.println(""impossible d'ouvrir le flux reseau\n lors de la recuperation des informations de version sur "" + i.getNomPlugin());
            return;
        }
        byte buffer[] = new byte[512 * 1024];
        int nbLecture;
        try {
            while ((nbLecture = sourceFile.read(buffer)) != -1) {
                destinationFile.write(buffer, 0, nbLecture);
            }
        } catch (IOException e) {
            System.err.println(""impossible d'ecrire dans le fichier temporaire\n lors de la recuperation des informations de version sur "" + i.getNomPlugin());
            return;
        }
        try {
            sourceFile.close();
            destinationFile.close();
        } catch (IOException e) {
            System.err.println(""impossible de fermer le fichier temporaire ou le flux reseau\n lors de la recuperation des informations de version sur "" + i.getNomPlugin());
            return;
        }
        BufferedReader lecteurAvecBuffer = null;
        String ligne;
        try {
            lecteurAvecBuffer = new BufferedReader(new FileReader(destination));
        } catch (FileNotFoundException e) {
            System.err.println(""impossible d'ouvrir le fichier temporaire apres sa creation (contacter un developpeur)\n lors de la recuperation des informations de version sur "" + i.getNomPlugin());
            return;
        }
        try {
            boolean estLaDerniereVersion = true;
            String URLRecupererDerniereVersion = null;
            while ((ligne = lecteurAvecBuffer.readLine()) != null) {
                if (ligne.startsWith(""version:"")) {
                    if (ligne.equals(""version:"" + i.getVersionPlugin())) {
                    } else {
                        System.err.println(""la version pour "" + i.getNomPlugin() + "" est depassee ("" + i.getVersionPlugin() + "" alors que la "" + ligne + ""est disponible)"");
                        estLaDerniereVersion = false;
                    }
                }
                if (ligne.startsWith(""url:"")) {
                    URLRecupererDerniereVersion = ligne.substring(4, ligne.length());
                }
            }
            if (!estLaDerniereVersion && URLRecupererDerniereVersion != null) {
                TelechargerPluginEtCharger(i, URLRecupererDerniereVersion);
            } else {
                System.out.println(""on est a la derniere version du plugin "" + i.getNomPlugin());
            }
        } catch (IOException e) {
            System.err.println(""impossible de lire le fichier temporaire apres sa creation\n lors de la recuperation des informations de version sur "" + i.getNomPlugin());
            return;
        }
        try {
            lecteurAvecBuffer.close();
        } catch (IOException e) {
            return;
        }
    }
",0
2646424,2,"    public String downloadFromUrl(URL url) {
        BufferedReader dis;
        String content = """";
        HttpURLConnection urlConn = null;
        try {
            urlConn = (HttpURLConnection) url.openConnection();
            urlConn.setDoInput(true);
            urlConn.setUseCaches(false);
            urlConn.setAllowUserInteraction(false);
            dis = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
            String line;
            while ((line = dis.readLine()) != null) {
                content = content.concat(line);
                content = content.concat(""\n"");
            }
        } catch (MalformedURLException ex) {
            System.err.println(ex + "" (downloadFromUrl)"");
        } catch (java.io.IOException iox) {
            System.out.println(iox + "" (downloadFromUrl)"");
        } catch (Exception generic) {
            System.out.println(generic.toString() + "" (downloadFromUrl)"");
        } finally {
        }
        return content;
    }
",0
17580775,2,"        public void runInternal() {
            connection = null;
            boolean itemsLoadedPartially = false;
            boolean loadNext = false;
            HashSet<String> visited = new HashSet<String>();
            do {
                try {
                    setProgressMessage(url.toString(), -1);
                    visited.add(url.toString());
                    long startTimeStamp = System.currentTimeMillis();
                    delayedProgress = coolReader.getEngine().showProgressDelayed(0, progressMessage, PROGRESS_DELAY_MILLIS);
                    URLConnection conn = url.openConnection();
                    if (conn instanceof HttpsURLConnection) {
                        onError(""HTTPs is not supported yet"");
                        return;
                    }
                    if (!(conn instanceof HttpURLConnection)) {
                        onError(""Only HTTP supported"");
                        return;
                    }
                    connection = (HttpURLConnection) conn;
                    connection.setRequestProperty(""User-Agent"", ""CoolReader/3(Android)"");
                    if (referer != null) connection.setRequestProperty(""Referer"", referer);
                    connection.setInstanceFollowRedirects(true);
                    connection.setAllowUserInteraction(false);
                    connection.setConnectTimeout(CONNECT_TIMEOUT);
                    connection.setReadTimeout(READ_TIMEOUT);
                    connection.setDoInput(true);
                    String fileName = null;
                    String disp = connection.getHeaderField(""Content-Disposition"");
                    if (disp != null) {
                        int p = disp.indexOf(""filename="");
                        if (p > 0) {
                            fileName = disp.substring(p + 9);
                        }
                    }
                    int response = -1;
                    response = connection.getResponseCode();
                    L.d(""Response: "" + response);
                    if (response != 200) {
                        onError(""Error "" + response);
                        return;
                    }
                    String contentType = connection.getContentType();
                    String contentEncoding = connection.getContentEncoding();
                    int contentLen = connection.getContentLength();
                    L.d(""Entity content length: "" + contentLen);
                    L.d(""Entity content type: "" + contentType);
                    L.d(""Entity content encoding: "" + contentEncoding);
                    setProgressMessage(url.toString(), contentLen);
                    InputStream is = connection.getInputStream();
                    delayedProgress.cancel();
                    is = new ProgressInputStream(is, startTimeStamp, progressMessage, contentLen, 80);
                    final int MAX_CONTENT_LEN_TO_BUFFER = 256 * 1024;
                    boolean isZip = contentType != null && contentType.equals(""application/zip"");
                    if (expectedType != null) contentType = expectedType; else if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) {
                        byte[] buf = new byte[contentLen];
                        if (is.read(buf) != contentLen) {
                            onError(""Wrong content length"");
                            return;
                        }
                        is.close();
                        is = null;
                        is = new ByteArrayInputStream(buf);
                        if (findSubstring(buf, ""<?xml version="") >= 0 && findSubstring(buf, ""<feed"") >= 0) contentType = ""application/atom+xml"";
                    }
                    if (contentType.startsWith(""application/atom+xml"")) {
                        L.d(""Parsing feed"");
                        parseFeed(is);
                        itemsLoadedPartially = true;
                        if (handler.docInfo.nextLink != null && handler.docInfo.nextLink.type.startsWith(""application/atom+xml;profile=opds-catalog"")) {
                            if (handler.entries.size() < MAX_OPDS_ITEMS) {
                                url = new URL(handler.docInfo.nextLink.href);
                                loadNext = !visited.contains(url.toString());
                                L.d(""continue with next part: "" + url);
                            } else {
                                L.d(""max item count reached: "" + handler.entries.size());
                                loadNext = false;
                            }
                        } else {
                            loadNext = false;
                        }
                    } else {
                        if (fileName == null) fileName = defaultFileName;
                        L.d(""Downloading book: "" + contentEncoding);
                        downloadBook(contentType, url.toString(), is, contentLen, fileName, isZip);
                        if (progressShown) coolReader.getEngine().hideProgress();
                        loadNext = false;
                        itemsLoadedPartially = false;
                    }
                } catch (Exception e) {
                    L.e(""Exception while trying to open URI "" + url.toString(), e);
                    if (progressShown) coolReader.getEngine().hideProgress();
                    onError(""Error occured while reading OPDS catalog"");
                    break;
                } finally {
                    if (connection != null) try {
                        connection.disconnect();
                    } catch (Exception e) {
                    }
                }
            } while (loadNext);
            if (progressShown) coolReader.getEngine().hideProgress();
            if (itemsLoadedPartially) BackgroundThread.guiExecutor.execute(new Runnable() {

                @Override
                public void run() {
                    L.d(""Parsing is finished successfully. "" + handler.entries.size() + "" entries found"");
                    callback.onFinish(handler.docInfo, handler.entries);
                }
            });
        }
",0
13862568,2,"    private String getShaderIncludeSource(String path) throws Exception {
        URL url = this.getClass().getResource(path);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        boolean run = true;
        String str;
        String ret = new String();
        while (run) {
            str = in.readLine();
            if (str != null) ret += str + ""\n""; else run = false;
        }
        in.close();
        return ret;
    }
",0
23647738,2,"    public static String[] listFilesInJar(String resourcesLstName, String dirPath, String ext) {
        try {
            dirPath = Tools.subString(dirPath, ""\\"", ""/"");
            if (!dirPath.endsWith(""/"")) {
                dirPath = dirPath + ""/"";
            }
            if (dirPath.startsWith(""/"")) {
                dirPath = dirPath.substring(1, dirPath.length());
            }
            URL url = ResourceLookup.getClassResourceUrl(Tools.class, resourcesLstName);
            if (url == null) {
                String msg = ""File not found "" + resourcesLstName;
                Debug.signal(Debug.ERROR, null, msg);
                return new String[0];
            }
            InputStream is = url.openStream();
            BufferedReader in = new BufferedReader(new InputStreamReader(is));
            String name = in.readLine();
            HashSet<String> list = new HashSet<String>(10);
            while (name != null) {
                name = in.readLine();
                if (name == null) {
                    continue;
                }
                if (ext != null && !name.endsWith(ext)) {
                    continue;
                }
                if (name.indexOf('.') == -1 && !name.endsWith(""/"")) {
                    name = name + ""/"";
                }
                int index = name.indexOf(dirPath);
                if (index < 0) {
                    continue;
                }
                index += dirPath.length();
                if (index >= name.length() - 1) {
                    continue;
                }
                index = name.indexOf(""/"", index);
                if (ext != null && (name.endsWith(""/"") || index >= 0)) {
                    continue;
                } else if (ext == null && (index < 0 || index < name.length() - 1)) {
                    continue;
                }
                list.add(""/"" + name);
            }
            is.close();
            String[] toReturn = {};
            return list.toArray(toReturn);
        } catch (IOException ioe) {
            String msg = ""Error reading file "" + resourcesLstName + "" caused by "" + ioe;
            Debug.signal(Debug.ERROR, null, msg);
            return new String[0];
        }
    }
",0
19063414,2,"    public void readData() throws IOException {
        i = 0;
        j = 0;
        URL url = getClass().getResource(""resources/Chrom_623_620.dat"");
        InputStream is = url.openStream();
        InputStreamReader isr = new InputStreamReader(is);
        BufferedReader br = new BufferedReader(isr);
        s = br.readLine();
        StringTokenizer st = new StringTokenizer(s);
        s = br.readLine();
        st = new StringTokenizer(s);
        chrom_x[i][j] = Double.parseDouble(st.nextToken());
        temp_prev = chrom_x[i][j];
        chrom_y[i][j] = Double.parseDouble(st.nextToken());
        gridmin = chrom_x[i][j];
        gridmax = chrom_x[i][j];
        sext1[i][j] = Double.parseDouble(st.nextToken());
        sext2[i][j] = Double.parseDouble(st.nextToken());
        sext3[i][j] = Double.parseDouble(st.nextToken());
        sext4[i][j] = Double.parseDouble(st.nextToken());
        j++;
        while ((s = br.readLine()) != null) {
            st = new StringTokenizer(s);
            temp_new = Double.parseDouble(st.nextToken());
            if (temp_new != temp_prev) {
                temp_prev = temp_new;
                i++;
                j = 0;
            }
            chrom_x[i][j] = temp_new;
            chrom_y[i][j] = Double.parseDouble(st.nextToken());
            sext1[i][j] = Double.parseDouble(st.nextToken());
            sext2[i][j] = Double.parseDouble(st.nextToken());
            sext3[i][j] = Double.parseDouble(st.nextToken());
            sext4[i][j] = Double.parseDouble(st.nextToken());
            imax = i;
            jmax = j;
            j++;
            if (chrom_x[i][j] <= gridmin) gridmin = chrom_x[i][j];
            if (chrom_x[i][j] >= gridmax) gridmax = chrom_x[i][j];
        }
    }
",0
12082137,2,"    public static Set<Municipality> getMunicipios(String pURL) {
        Set<Municipality> result = new HashSet<Municipality>();
        String iniCuerr = ""<cuerr>"";
        String finCuerr = ""</cuerr>"";
        String iniDesErr = ""<des>"";
        String finDesErr = ""</des>"";
        String iniMun = ""<muni>"";
        String finMun = ""</muni>"";
        String iniNomMun = ""<nm>"";
        String finNomMun = ""</nm>"";
        String iniCarto = ""<carto>"";
        String iniCodDelMEH = ""<cd>"";
        String finCodDelMEH = ""</cd>"";
        String iniCodMunMEH = ""<cmc>"";
        String finCodMunMEH = ""</cmc>"";
        String iniCodProvINE = ""<cp>"";
        String finCodProvINE = ""</cp>"";
        String iniCodMunINE = ""<cm>"";
        String finCodMunINE = ""</cm>"";
        boolean error = false;
        int ini, fin;
        try {
            URL url = new URL(pURL);
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            Municipality municipio;
            while ((str = br.readLine()) != null) {
                if (str.contains(iniCuerr)) {
                    ini = str.indexOf(iniCuerr) + iniCuerr.length();
                    fin = str.indexOf(finCuerr);
                    if (Integer.parseInt(str.substring(ini, fin)) > 0) error = true;
                }
                if (error) {
                    if (str.contains(iniDesErr)) {
                        ini = str.indexOf(iniDesErr) + iniDesErr.length();
                        fin = str.indexOf(finDesErr);
                        throw (new Exception(str.substring(ini, fin)));
                    }
                } else {
                    if (str.contains(iniMun)) {
                        municipio = new Municipality();
                        municipio.setCodemunicipalityine(0);
                        municipio.setCodemunicipalitydgc(0);
                        while ((str = br.readLine()) != null && !str.contains(finMun)) {
                            if (str.contains(iniNomMun)) {
                                ini = str.indexOf(iniNomMun) + iniNomMun.length();
                                fin = str.indexOf(finNomMun);
                                municipio.setMuniName(str.substring(ini, fin).trim());
                            }
                            if (str.contains(iniCarto)) {
                                if (str.contains(""URBANA"")) municipio.setIsurban(true);
                                if (str.contains(""RUSTICA"")) municipio.setIsrustic(true);
                            }
                            if (str.contains(iniCodDelMEH)) {
                                ini = str.indexOf(iniCodDelMEH) + iniCodDelMEH.length();
                                fin = str.indexOf(finCodDelMEH);
                                municipio.setCodemunicipalitydgc(municipio.getCodemunicipalitydgc() + Integer.parseInt(str.substring(ini, fin)) * 1000);
                            }
                            if (str.contains(iniCodMunMEH)) {
                                ini = str.indexOf(iniCodMunMEH) + iniCodMunMEH.length();
                                fin = str.indexOf(finCodMunMEH);
                                municipio.setCodemunicipalitydgc(municipio.getCodemunicipalitydgc() + Integer.parseInt(str.substring(ini, fin)));
                            }
                            if (str.contains(iniCodProvINE)) {
                                ini = str.indexOf(iniCodProvINE) + iniCodProvINE.length();
                                fin = str.indexOf(finCodProvINE);
                                municipio.setCodemunicipalityine(municipio.getCodemunicipalityine() + Integer.parseInt(str.substring(ini, fin)) * 1000);
                            }
                            if (str.contains(iniCodMunINE)) {
                                ini = str.indexOf(iniCodMunINE) + iniCodMunINE.length();
                                fin = str.indexOf(finCodMunINE);
                                municipio.setCodemunicipalityine(municipio.getCodemunicipalityine() + Integer.parseInt(str.substring(ini, fin)));
                            }
                            municipio.setDescription();
                        }
                        result.add(municipio);
                    }
                }
            }
            br.close();
        } catch (Exception e) {
            System.err.println(e);
        }
        return result;
    }
",0
18796914,2,"    public String getPloidy(String source) {
        StringBuilder ploidyHtml = new StringBuilder();
        String hyperdiploidyUrl = customParameters.getHyperdiploidyUrl();
        String urlString = hyperdiploidyUrl + ""?source="" + source;
        URL url = null;
        try {
            url = new URL(urlString);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = """";
            while ((line = in.readLine()) != null) {
                ploidyHtml.append(line);
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return ploidyHtml.toString();
    }
",0
20862695,2,"    public HashMap parseFile(File newfile) throws IOException {
        String s;
        String[] tokens;
        int nvalues = 0;
        double num1, num2, num3;
        boolean baddata = false;
        URL url = newfile.toURL();
        InputStream is = url.openStream();
        InputStreamReader isr = new InputStreamReader(is);
        BufferedReader br = new BufferedReader(isr);
        HashMap data = new HashMap();
        while ((s = br.readLine()) != null) {
            tokens = s.split(""\\s+"");
            nvalues = tokens.length;
            if (nvalues == 2) {
                data.put(new String(tokens[0]), new Double(Double.parseDouble(tokens[1])));
            } else {
                System.out.println(""Sorry, trouble reading reference file."");
            }
        }
        return data;
    }
",0
19053519,2,"    protected String getManualDownloadURL() {
        if (_newestVersionString.indexOf(""weekly"") > 0) {
            return ""http://www.cs.rice.edu/~javaplt/drjavarice/weekly/"";
        }
        final String DRJAVA_FILES_PAGE = ""http://sourceforge.net/project/showfiles.php?group_id=44253"";
        final String LINK_PREFIX = ""<a href=\""/project/showfiles.php?group_id=44253"";
        final String LINK_SUFFIX = ""\"">"";
        BufferedReader br = null;
        try {
            URL url = new URL(DRJAVA_FILES_PAGE);
            InputStream urls = url.openStream();
            InputStreamReader is = new InputStreamReader(urls);
            br = new BufferedReader(is);
            String line;
            int pos;
            while ((line = br.readLine()) != null) {
                if ((pos = line.indexOf(_newestVersionString)) >= 0) {
                    int prePos = line.indexOf(LINK_PREFIX);
                    if ((prePos >= 0) && (prePos < pos)) {
                        int suffixPos = line.indexOf(LINK_SUFFIX, prePos);
                        if ((suffixPos >= 0) && (suffixPos + LINK_SUFFIX.length() == pos)) {
                            String versionLink = edu.rice.cs.plt.text.TextUtil.xmlUnescape(line.substring(prePos + LINK_PREFIX.length(), suffixPos));
                            return DRJAVA_FILES_PAGE + versionLink;
                        }
                    }
                }
            }
            ;
        } catch (IOException e) {
            return DRJAVA_FILES_PAGE;
        } finally {
            try {
                if (br != null) br.close();
            } catch (IOException e) {
            }
        }
        return DRJAVA_FILES_PAGE;
    }
",0
13680437,2,"    public static void writeFromURL(String urlstr, String filename) throws Exception {
        URL url = new URL(urlstr);
        InputStream in = url.openStream();
        BufferedReader bf = null;
        StringBuffer sb = new StringBuffer();
        try {
            bf = new BufferedReader(new InputStreamReader(in, ""latin1""));
            String s;
            while (true) {
                s = bf.readLine();
                if (s != null) {
                    sb.append(s);
                } else {
                    break;
                }
            }
        } catch (Exception e) {
            throw e;
        } finally {
            bf.close();
        }
        writeRawBytes(sb.toString(), filename);
    }
",0
8523656,2,"    public String getRssFeedUrl(boolean searchWeb) {
        String rssFeedUrl = null;
        if (entity.getNewsFeedUrl() != null & !entity.getUrl().equals("""")) {
            return entity.getNewsFeedUrl();
        } else if (entity.getUrl() == null || entity.getUrl().equals("""")) {
            return entity.getNewsFeedUrl();
        } else if (searchWeb) {
            HttpURLConnection con = null;
            InputStream is = null;
            try {
                URL url = new URL(entity.getUrl());
                con = (HttpURLConnection) url.openConnection();
                con.connect();
                is = con.getInputStream();
                InputStreamReader sr = new InputStreamReader(is);
                BufferedReader br = new BufferedReader(sr);
                String ln;
                StringBuffer sb = new StringBuffer();
                while ((ln = br.readLine()) != null) {
                    sb.append(ln + ""\n"");
                }
                rssFeedUrl = extractRssFeedUrl(sb.toString());
            } catch (Exception e) {
                log.error(e);
            } finally {
                if (is != null) {
                    try {
                        is.close();
                    } catch (IOException e) {
                        log.error(e);
                    }
                }
                if (con != null) {
                    con.disconnect();
                }
            }
        }
        return rssFeedUrl;
    }
",0
6634379,2,"    @Deprecated
    public static void getAndProcessContents(String videoPageURL, int bufsize, String charset, Closure<String> process) throws IOException {
        URL url = null;
        HttpURLConnection connection = null;
        InputStream is = null;
        InputStreamReader isr = null;
        BufferedReader br = null;
        try {
            url = new URL(videoPageURL);
            connection = (HttpURLConnection) url.openConnection();
            is = connection.getInputStream();
            isr = new InputStreamReader(is, charset);
            br = new BufferedReader(isr);
            for (String line = br.readLine(); line != null; line = br.readLine()) {
                process.exec(line);
            }
        } finally {
            Closeables.closeQuietly(br);
            Closeables.closeQuietly(isr);
            Closeables.closeQuietly(is);
            HttpUtils.disconnect(connection);
        }
    }
",0
21110104,2,"    public static SimpleDataTable loadDataFromFile(URL urlMetadata, URL urlData) throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(urlMetadata.openStream()));
        List<String> columnNamesList = new ArrayList<String>();
        String[] lineParts = null;
        String line;
        in.readLine();
        while ((line = in.readLine()) != null) {
            lineParts = line.split("","");
            columnNamesList.add(lineParts[0]);
        }
        String[] columnNamesArray = new String[columnNamesList.size()];
        int index = 0;
        for (String s : columnNamesList) {
            columnNamesArray[index] = s;
            index++;
        }
        SimpleDataTable table = new SimpleDataTable(""tabulka s daty"", columnNamesArray);
        in = new BufferedReader(new InputStreamReader(urlData.openStream()));
        lineParts = null;
        line = null;
        SimpleDataTableRow tableRow;
        double[] rowData;
        while ((line = in.readLine()) != null) {
            lineParts = line.split("","");
            rowData = new double[columnNamesList.size()];
            for (int i = 0; i < columnNamesArray.length; i++) {
                rowData[i] = Double.parseDouble(lineParts[i + 1]);
            }
            tableRow = new SimpleDataTableRow(rowData, lineParts[0]);
            table.add(tableRow);
        }
        return table;
    }
",0
7542015,2,"    public static String[] parseM3U(String strURL, Context c) {
        URL url;
        URLConnection urlConn = null;
        String TAG = ""parseM3U"";
        Vector<String> radio = new Vector<String>();
        final String filetoken = ""http"";
        try {
            url = new URL(strURL);
            urlConn = url.openConnection();
            Log.d(TAG, ""Got data"");
        } catch (IOException ioe) {
            Log.e(TAG, ""Could not connect to "" + strURL);
        }
        try {
            DataInputStream in = new DataInputStream(urlConn.getInputStream());
            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            String strLine;
            while ((strLine = br.readLine()) != null) {
                String temp = strLine.toLowerCase();
                Log.d(TAG, strLine);
                if (temp.startsWith(filetoken)) {
                    radio.add(temp);
                    Log.d(TAG, ""Found audio "" + temp);
                }
            }
            br.close();
            in.close();
        } catch (Exception e) {
            Log.e(TAG, ""Trouble reading file: "" + e.getMessage());
        }
        String[] t = new String[0];
        String[] r = null;
        if (radio.size() != 0) {
            r = (String[]) radio.toArray(t);
            Log.d(TAG, ""Found total: "" + String.valueOf(r.length));
        }
        return r;
    }
",0
9210168,2,"            @Override
            public void run() {
                try {
                    URL url = Thread.currentThread().getContextClassLoader().getResource(path);
                    InputStream fis = url.openStream();
                    InputStreamReader r = new InputStreamReader(fis, ""UTF-8"");
                    BufferedReader br = new BufferedReader(r);
                    String line;
                    StringBuilder sb = new StringBuilder();
                    while (null != (line = br.readLine())) {
                        sb.append(line);
                        sb.append(""\r\n"");
                    }
                    br.close();
                    r.close();
                    fis.close();
                    final String text = sb.toString();
                    SwingUtilities.invokeLater(new Runnable() {

                        @Override
                        public void run() {
                            MainPanel.this.source.setText(text);
                            MainPanel.this.source.setCaretPosition(0);
                        }
                    });
                } catch (Exception ex) {
                }
            }
",0
21905202,2,"    private boolean hasPackageInfo(URL url) {
        if (url == null) return false;
        BufferedReader br = null;
        try {
            br = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            while ((line = br.readLine()) != null) {
                if (line.startsWith(""Specification-Title: "") || line.startsWith(""Specification-Version: "") || line.startsWith(""Specification-Vendor: "") || line.startsWith(""Implementation-Title: "") || line.startsWith(""Implementation-Version: "") || line.startsWith(""Implementation-Vendor: "")) return true;
            }
        } catch (IOException ioe) {
        } finally {
            if (br != null) try {
                br.close();
            } catch (IOException e) {
            }
        }
        return false;
    }
",0
16931472,2,"    public void handler(Map<String, String> result, TargetPage target) {
        try {
            URL url = new URL(target.getUrl());
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = null;
            while ((line = reader.readLine()) != null) {
                for (Map.Entry<String, String> entry : result.entrySet()) {
                    if (line.indexOf(target.getInclude()) != -1) {
                        int fromIndex = line.indexOf(target.getFromStr());
                        String r = line.substring(fromIndex + target.getFromStr().length(), line.indexOf(target.getToStr(), fromIndex));
                        entry.setValue(r);
                        line = line.substring(line.indexOf(target.getToStr()) + target.getToStr().length());
                    }
                }
            }
            reader.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
    }
",0
23299951,2,"    private void readFromFile1() throws DException {
        URL url1 = null;
        if (url == null) {
            url = getClass().getResource(""/com/daffodilwoods/daffodildb/utils/parser/parser.schema"");
            try {
                url = new URL(url.getProtocol() + "":"" + url.getPath().substring(0, url.getPath().indexOf(""/parser.schema"")));
            } catch (MalformedURLException ex2) {
                ex2.printStackTrace();
                throw new DException(""DSE0"", new Object[] { ex2 });
            }
            try {
                url1 = new URL(url.getProtocol() + "":"" + url.getPath() + ""/parser.schema"");
            } catch (MalformedURLException ex) {
                throw new DException(""DSE0"", new Object[] { ex });
            }
            if (url1 == null) {
                throw new DException(""DSE0"", new Object[] { ""Parser.schema file is missing in classpath."" });
            }
        } else {
            try {
                url1 = new URL(url.getProtocol() + "":"" + url.getPath() + ""/parser.schema"");
            } catch (MalformedURLException ex) {
                throw new DException(""DSE0"", new Object[] { ex });
            }
        }
        ArrayList arr1 = null;
        StringBuffer rule = null;
        try {
            LineNumberReader raf = new LineNumberReader(new BufferedReader(new InputStreamReader(url1.openStream())));
            arr1 = new ArrayList();
            rule = new StringBuffer("""");
            while (true) {
                String str1 = raf.readLine();
                if (str1 == null) {
                    break;
                }
                String str = str1.trim();
                if (str.length() == 0) {
                    if (rule.length() > 0) {
                        arr1.add(rule.toString());
                    }
                    rule = new StringBuffer("""");
                } else {
                    rule.append("" "").append(str);
                }
            }
            raf.close();
        } catch (IOException ex1) {
            ex1.printStackTrace();
            throw new DException(""DSE0"", new Object[] { ex1 });
        }
        if (rule.length() > 0) arr1.add(rule.toString());
        for (int i = 0; i < arr1.size(); i++) {
            String str = (String) arr1.get(i);
            int index = str.indexOf(""::="");
            if (index == -1) {
                P.pln(""Error "" + str);
                throw new DException(""DSE0"", new Object[] { ""Rule is missing from parser.schema"" });
            }
            String key = str.substring(0, index).trim();
            String value = str.substring(index + 3).trim();
            Object o = fileEntries.put(key, value);
            if (o != null) {
                new Exception(""Duplicate Defination for Rule ["" + key + ""] Value ["" + value + ""] Is Replaced By  ["" + o + ""]"").printStackTrace();
            }
        }
    }
",0
20425837,2,"    public static String loadSite(String spec) throws IOException {
        URL url = new URL(spec);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String output = """";
        String str;
        while ((str = in.readLine()) != null) {
            output += str + ""\n"";
        }
        in.close();
        return output;
    }
",0
20519261,2,"    public String readReferenceText(final String ident) throws NoContentException {
        try {
            String name = getFilename(ident);
            URL url = new URL(FreqAnalysisPlugin.getDefault().getBundle().getEntry(""/""), name);
            InputStream in = url.openStream();
            InputStreamReader isr = new InputStreamReader(in, ""UTF-8"");
            BufferedReader br = new BufferedReader(isr);
            StringBuffer buffer = new StringBuffer();
            String line = br.readLine();
            while (null != line) {
                buffer.append(line + ""\n"");
                line = br.readLine();
            }
            return buffer.toString();
        } catch (MalformedURLException muEx) {
            logError(muEx);
        } catch (UnsupportedEncodingException ueEx) {
            logError(ueEx);
        } catch (IOException ioEx) {
            logError(ioEx);
        }
        throw new NoContentException(""Unable to find or read reference text."");
    }
",0
14488295,2,"    public static synchronized void loadConfig(String configFile) {
        if (properties != null) {
            return;
        }
        URL url = null;
        InputStream is = null;
        try {
            String configProperty = null;
            try {
                configProperty = System.getProperty(""dspace.configuration"");
            } catch (SecurityException se) {
                log.warn(""Unable to access system properties, ignoring."", se);
            }
            if (loadedFile != null) {
                log.info(""Reloading current config file: "" + loadedFile.getAbsolutePath());
                url = loadedFile.toURI().toURL();
            } else if (configFile != null) {
                log.info(""Loading provided config file: "" + configFile);
                loadedFile = new File(configFile);
                url = loadedFile.toURI().toURL();
            } else if (configProperty != null) {
                log.info(""Loading system provided config property (-Ddspace.configuration): "" + configProperty);
                loadedFile = new File(configProperty);
                url = loadedFile.toURI().toURL();
            } else {
                url = ConfigurationManager.class.getResource(""/dspace.cfg"");
                if (url != null) {
                    log.info(""Loading from classloader: "" + url);
                    loadedFile = new File(url.getPath());
                }
            }
            if (url == null) {
                log.fatal(""Cannot find dspace.cfg"");
                throw new IllegalStateException(""Cannot find dspace.cfg"");
            } else {
                properties = new Properties();
                moduleProps = new HashMap<String, Properties>();
                is = url.openStream();
                properties.load(is);
                for (Enumeration<?> pe = properties.propertyNames(); pe.hasMoreElements(); ) {
                    String key = (String) pe.nextElement();
                    String value = interpolate(key, properties.getProperty(key), 1);
                    if (value != null) {
                        properties.setProperty(key, value);
                    }
                }
            }
        } catch (IOException e) {
            log.fatal(""Can't load configuration: "" + url, e);
            throw new IllegalStateException(""Cannot load configuration: "" + url, e);
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException ioe) {
                }
            }
        }
        File licenseFile = new File(getProperty(""dspace.dir"") + File.separator + ""config"" + File.separator + ""default.license"");
        FileInputStream fir = null;
        InputStreamReader ir = null;
        BufferedReader br = null;
        try {
            fir = new FileInputStream(licenseFile);
            ir = new InputStreamReader(fir, ""UTF-8"");
            br = new BufferedReader(ir);
            String lineIn;
            license = """";
            while ((lineIn = br.readLine()) != null) {
                license = license + lineIn + '\n';
            }
            br.close();
        } catch (IOException e) {
            log.fatal(""Can't load license: "" + licenseFile.toString(), e);
            throw new IllegalStateException(""Cannot load license: "" + licenseFile.toString(), e);
        } finally {
            if (br != null) {
                try {
                    br.close();
                } catch (IOException ioe) {
                }
            }
            if (ir != null) {
                try {
                    ir.close();
                } catch (IOException ioe) {
                }
            }
            if (fir != null) {
                try {
                    fir.close();
                } catch (IOException ioe) {
                }
            }
        }
    }
",0
22401746,2,"    public String sendRequest(java.lang.String servletName, java.lang.String request) {
        String reqxml = """";
        org.jdom.Document retdoc = null;
        String myurl = java.util.prefs.Preferences.systemRoot().get(""serverurl"", """");
        String myport = java.util.prefs.Preferences.systemRoot().get(""portno"", ""8080"");
        if (this.serverURL == null) {
            try {
                java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();
                if (codebase != null) serverURL = codebase.getHost(); else serverURL = ""localhost"";
            } catch (Exception exp) {
                exp.printStackTrace();
                serverURL = ""localhost"";
            }
            newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);
            ipdig.show();
            serverURL = myurl = ipdig.getIPAddress();
            myport = ipdig.getPortNo();
            java.util.prefs.Preferences.systemRoot().put(""serverurl"", serverURL);
            java.util.prefs.Preferences.systemRoot().put(""portno"", myport);
            System.out.println(serverURL);
        }
        try {
            System.out.println(""http://"" + serverURL + "":"" + myport + ""/newgenlibctxt/"" + servletName);
            java.net.URL url = new java.net.URL(""http://"" + serverURL + "":"" + myport + ""/newgenlibctxt/"" + servletName);
            java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();
            urlconn.setDoOutput(true);
            urlconn.setRequestProperty(""Content-type"", ""text/xml; charset=UTF-8"");
            java.io.OutputStream os = urlconn.getOutputStream();
            String req1xml = request;
            java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());
            java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);
            java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, ""UTF-8"");
            System.out.println(req1xml);
            dos.write(req1xml);
            dos.flush();
            dos.close();
            System.out.println(""url conn: "" + urlconn.getContentEncoding() + ""  "" + urlconn.getContentType());
            java.io.InputStream ios = urlconn.getInputStream();
            java.util.zip.CheckedInputStream cis = new java.util.zip.CheckedInputStream(ios, new java.util.zip.Adler32());
            java.util.zip.GZIPInputStream gip = new java.util.zip.GZIPInputStream(cis);
            java.io.InputStreamReader br = new java.io.InputStreamReader(gip, ""UTF-8"");
            retdoc = (new org.jdom.input.SAXBuilder()).build(br);
        } catch (java.net.ConnectException conexp) {
            javax.swing.JOptionPane.showMessageDialog(null, newgen.presentation.NewGenMain.getAppletInstance().getMyResource().getString(""ConnectExceptionMessage""), ""Critical error"", javax.swing.JOptionPane.ERROR_MESSAGE);
        } catch (Exception exp) {
            exp.printStackTrace(System.out);
        }
        System.out.println(reqxml);
        return """";
    }
",0
22948678,2,"    public void load() throws ResourceInstantiationException, InvalidFormatException {
        if (null == url) {
            throw new ResourceInstantiationException(""URL not set (null)."");
        }
        try {
            BufferedReader mapReader = new BomStrippingInputStreamReader((url).openStream(), ENCODING);
            String line;
            MappingNode node;
            while (null != (line = mapReader.readLine())) {
                if (0 != line.trim().length()) {
                    node = new MappingNode(line);
                    this.add(node);
                }
            }
            mapReader.close();
        } catch (InvalidFormatException ife) {
            throw new InvalidFormatException(url, ""on load"");
        } catch (IOException ioe) {
            throw new ResourceInstantiationException(ioe);
        }
    }
",0
13879984,2,"    public static String readFromURL(String urlStr) throws IOException {
        URL url = new URL(urlStr);
        StringBuilder sb = new StringBuilder();
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String inputLine;
        while ((inputLine = in.readLine()) != null) {
            sb.append(inputLine);
        }
        in.close();
        return sb.toString();
    }
",0
5337582,2,"    public List execute(ComClient comClient) throws Exception {
        ArrayList outStrings = new ArrayList();
        SearchResult sr = Util.getSearchResultByIDAndNum(SearchManager.getInstance(), qID, dwNum);
        for (int i = 0; i < checkerUrls.length; i++) {
            String parametrizedURL = checkerUrls[i];
            Iterator mtIter = sr.iterateMetatags();
            while (mtIter.hasNext()) {
                Map.Entry mt = (Map.Entry) mtIter.next();
                parametrizedURL = parametrizedURL.replaceAll(""%%"" + mt.getKey() + ""%%"", mt.getValue().toString());
                if (mt.getKey().equals(""fake"") && ((Boolean) mt.getValue()).booleanValue()) {
                    outStrings.add(""it's a fake."");
                    return outStrings;
                }
            }
            parametrizedURL = parametrizedURL.replaceAll(""%%fileid%%"", sr.getFileHash().toString());
            System.out.println(""parametrizedURL="" + parametrizedURL);
            try {
                URL url = new URL(parametrizedURL);
                URLConnection connection = url.openConnection();
                connection.connect();
                BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String str = null;
                while ((str = br.readLine()) != null) {
                    System.out.println(str);
                    if (str.indexOf(fakeMarks[i]) != -1) {
                        System.out.println(""FAKEFAKEFAKE"");
                        sr.addMetatag(""fake"", Boolean.TRUE);
                        outStrings.add(""it's a fake."");
                        break;
                    }
                }
            } catch (MalformedURLException murl_err) {
                murl_err.printStackTrace();
            } catch (IOException io_err) {
                io_err.printStackTrace();
            } catch (Exception err) {
                err.printStackTrace();
            }
        }
        return outStrings;
    }
",0
15292162,2,"    private static List retrieveQuotes(Report report, Symbol symbol, String prefix, TradingDate startDate, TradingDate endDate) throws ImportExportException {
        List quotes = new ArrayList();
        String URLString = constructURL(symbol, prefix, startDate, endDate);
        EODQuoteFilter filter = new GoogleEODQuoteFilter(symbol);
        PreferencesManager.ProxyPreferences proxyPreferences = PreferencesManager.getProxySettings();
        try {
            URL url = new URL(URLString);
            InputStreamReader input = new InputStreamReader(url.openStream());
            BufferedReader bufferedInput = new BufferedReader(input);
            String line = bufferedInput.readLine();
            while (line != null) {
                line = bufferedInput.readLine();
                if (line != null) {
                    try {
                        EODQuote quote = filter.toEODQuote(line);
                        quotes.add(quote);
                        verify(report, quote);
                    } catch (QuoteFormatException e) {
                        report.addError(Locale.getString(""GOOGLE_DISPLAY_URL"") + "":"" + symbol + "":"" + Locale.getString(""ERROR"") + "": "" + e.getMessage());
                    }
                }
            }
            bufferedInput.close();
        } catch (BindException e) {
            throw new ImportExportException(Locale.getString(""UNABLE_TO_CONNECT_ERROR"", e.getMessage()));
        } catch (ConnectException e) {
            throw new ImportExportException(Locale.getString(""UNABLE_TO_CONNECT_ERROR"", e.getMessage()));
        } catch (UnknownHostException e) {
            throw new ImportExportException(Locale.getString(""UNKNOWN_HOST_ERROR"", e.getMessage()));
        } catch (NoRouteToHostException e) {
            throw new ImportExportException(Locale.getString(""DESTINATION_UNREACHABLE_ERROR"", e.getMessage()));
        } catch (MalformedURLException e) {
            throw new ImportExportException(Locale.getString(""INVALID_PROXY_ERROR"", proxyPreferences.host, proxyPreferences.port));
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
            throw new ImportExportException(Locale.getString(""ERROR_DOWNLOADING_QUOTES""));
        }
        return quotes;
    }
",0
21556191,2,"    public JTree createTree() {
        DefaultMutableTreeNode top = new DefaultMutableTreeNode(""Contents"");
        DefaultMutableTreeNode[] nodeLevels = new DefaultMutableTreeNode[0];
        URL url = ResourceManager.getResource(""tree.txt"");
        try {
            InputStream is = url.openStream();
            InputStreamReader isr = new InputStreamReader(is);
            BufferedReader reader = new BufferedReader(isr);
            String line = reader.readLine();
            int numLevels = 0;
            if (line != null) {
                while (line.startsWith(""#"")) line = reader.readLine();
                numLevels = Integer.parseInt(line);
                line = reader.readLine();
                nodeLevels = new DefaultMutableTreeNode[numLevels + 1];
                nodeLevels[0] = top;
            }
            while (line != null) {
                if (!line.startsWith(""#"")) {
                    int level = Integer.parseInt(line.substring(0, 1));
                    line = line.substring(line.indexOf("","") + 1);
                    String nodeDescription = line.substring(0, line.indexOf("",""));
                    String nodeURL = line.substring(line.indexOf("","") + 1, line.length());
                    nodeLevels[level] = new DefaultMutableTreeNode(new HelpTopic(nodeDescription, nodeURL));
                    nodeLevels[level - 1].add(nodeLevels[level]);
                }
                line = reader.readLine();
            }
        } catch (IOException e) {
            showErrorDialog(""Unable to read resource tree.txt"", true);
        } catch (NumberFormatException nfe) {
            showErrorDialog(""Invalid format tree.txt"", true);
        }
        return new JTree(top) {

            public java.awt.Insets getInsets() {
                return new java.awt.Insets(5, 5, 5, 5);
            }
        };
    }
",0
16961459,2,"    @Test
    public void testConfigurartion() {
        try {
            Enumeration<URL> assemblersToRegister = this.getClass().getClassLoader().getResources(""META-INF/PrintAssemblerFactory.properties"");
            log.debug(""PrintAssemblerFactory "" + SimplePrintJobTest.class.getClassLoader().getResource(""META-INF/PrintAssemblerFactory.properties""));
            log.debug(""ehcache "" + SimplePrintJobTest.class.getClassLoader().getResource(""ehcache.xml""));
            log.debug(""log4j "" + this.getClass().getClassLoader().getResource(""/log4j.xml""));
            if (log.isDebugEnabled()) {
                while (assemblersToRegister.hasMoreElements()) {
                    URL url = (URL) assemblersToRegister.nextElement();
                    InputStream in = url.openStream();
                    BufferedReader buff = new BufferedReader(new InputStreamReader(in));
                    String line = buff.readLine();
                    while (line != null) {
                        log.debug(line);
                        line = buff.readLine();
                    }
                    buff.close();
                    in.close();
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",0
21642217,2,"    private String searchMetabolite(String name) {
        {
            BufferedReader in = null;
            try {
                String urlName = name;
                URL url = new URL(urlName);
                in = new BufferedReader(new InputStreamReader(url.openStream()));
                String inputLine;
                Boolean isMetabolite = false;
                while ((inputLine = in.readLine()) != null) {
                    if (inputLine.contains(""Metabolite</h1>"")) {
                        isMetabolite = true;
                    }
                    if (inputLine.contains(""<td><a href=\""/Metabolites/"") && isMetabolite) {
                        String metName = inputLine.substring(inputLine.indexOf(""/Metabolites/"") + 13, inputLine.indexOf(""aspx\"" target"") + 4);
                        return ""http://gmd.mpimp-golm.mpg.de/Metabolites/"" + metName;
                    }
                }
                in.close();
                return name;
            } catch (IOException ex) {
                Logger.getLogger(GetGolmIDsTask.class.getName()).log(Level.SEVERE, null, ex);
                return null;
            }
        }
    }
",0
21393871,2,"    public String call() throws Exception {
        InputStream stream = url.openStream();
        StringBuffer sb = new StringBuffer();
        BufferedReader reader = new BufferedReader(new InputStreamReader(stream));
        String line = null;
        while ((line = reader.readLine()) != null) {
            sb.append(line);
        }
        return sb.toString();
    }
",0
20028789,2,"    private static BundleInfo[] getBundleInfoArray(String location) throws IOException {
        URL url = new URL(location + BUNDLE_LIST_FILE);
        BufferedReader br = null;
        List<BundleInfo> list = new ArrayList<BundleInfo>();
        try {
            br = new BufferedReader(new InputStreamReader(url.openStream()));
            while (true) {
                String line = br.readLine();
                if (line == null) {
                    break;
                }
                int pos1 = line.indexOf('=');
                if (pos1 < 0) {
                    continue;
                }
                BundleInfo info = new BundleInfo();
                info.bundleSymbolicName = line.substring(0, pos1);
                info.location = line.substring(pos1 + 1);
                list.add(info);
            }
            if (!setBundleInfoName(location + BUNDLE_NAME_LIST_FILE + ""_"" + Locale.getDefault().getLanguage(), list)) {
                setBundleInfoName(location + BUNDLE_NAME_LIST_FILE, list);
            }
            return list.toArray(BUNDLE_INFO_EMPTY_ARRAY);
        } finally {
            if (br != null) {
                br.close();
            }
        }
    }
",0
14563781,2,"    public static void parseString(String str, String name) {
        BufferedReader reader;
        String zeile = null;
        boolean firstL = true;
        int lambda;
        float intens;
        int l_b = 0;
        int l_e = 0;
        HashMap<Integer, Float> curve = new HashMap<Integer, Float>();
        String[] temp;
        try {
            File f = File.createTempFile(""tempFile"", null);
            URL url = new URL(str);
            InputStream is = url.openStream();
            FileOutputStream os = new FileOutputStream(f);
            byte[] buffer = new byte[0xFFFF];
            for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len);
            is.close();
            os.close();
            reader = new BufferedReader(new FileReader(f));
            zeile = reader.readLine();
            lambda = 0;
            while (zeile != null) {
                if (!(zeile.length() > 0 && zeile.charAt(0) == '#')) {
                    zeile = reader.readLine();
                    break;
                }
                zeile = reader.readLine();
            }
            while (zeile != null) {
                if (zeile.length() > 0) {
                    temp = zeile.split("" "");
                    lambda = Integer.parseInt(temp[0]);
                    intens = Float.parseFloat(temp[1]);
                    if (firstL) {
                        firstL = false;
                        l_b = lambda;
                    }
                    curve.put(lambda, intens);
                }
                zeile = reader.readLine();
            }
            l_e = lambda;
        } catch (IOException e) {
            System.err.println(""Error2 :"" + e);
        }
        try {
            String tempV;
            File file = new File(""C:/spectralColors/"" + name + "".sd"");
            FileWriter fw = new FileWriter(file);
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write(""# COLOR: "" + name + "" Auto generated File: 02/09/2009; From "" + l_b + "" to "" + l_e);
            bw.newLine();
            bw.write(l_b + """");
            bw.newLine();
            for (int i = l_b; i <= l_e; i++) {
                if (curve.containsKey(i)) {
                    tempV = i + "" "" + curve.get(i);
                    bw.write(tempV);
                    bw.newLine();
                }
            }
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",0
15031489,2,"    public Point getCoordinates(String address, String city, String state, String country) {
        StringBuilder queryString = new StringBuilder();
        StringBuilder urlString = new StringBuilder();
        StringBuilder response = new StringBuilder();
        if (address != null) {
            queryString.append(address.trim().replaceAll("" "", ""+""));
            queryString.append(""+"");
        }
        if (city != null) {
            queryString.append(city.trim().replaceAll("" "", ""+""));
            queryString.append(""+"");
        }
        if (state != null) {
            queryString.append(state.trim().replaceAll("" "", ""+""));
            queryString.append(""+"");
        }
        if (country != null) {
            queryString.append(country.replaceAll("" "", ""+""));
        }
        urlString.append(""http://maps.google.com/maps/geo?key="");
        urlString.append(key);
        urlString.append(""&sensor=false&output=json&oe=utf8&q="");
        urlString.append(queryString.toString());
        try {
            URL url = new URL(urlString.toString());
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                response.append(line);
            }
            reader.close();
            JSONObject root = (JSONObject) JSONValue.parse(response.toString());
            JSONObject placemark = (JSONObject) ((JSONArray) root.get(""Placemark"")).get(0);
            JSONArray coordinates = (JSONArray) ((JSONObject) placemark.get(""Point"")).get(""coordinates"");
            Point point = new Point();
            point.setLatitude((Double) coordinates.get(1));
            point.setLongitude((Double) coordinates.get(0));
            return point;
        } catch (MalformedURLException ex) {
            return null;
        } catch (NullPointerException ex) {
            return null;
        } catch (IOException ex) {
            return null;
        }
    }
",0
17261985,2,"    public int doEndTag() throws JspException {
        HttpSession session = pageContext.getSession();
        try {
            IntactUserI user = (IntactUserI) session.getAttribute(Constants.USER_KEY);
            String urlStr = user.getSourceURL();
            if (urlStr == null) {
                return EVAL_PAGE;
            }
            URL url = null;
            try {
                url = new URL(urlStr);
            } catch (MalformedURLException me) {
                String decodedUrl = URLDecoder.decode(urlStr, ""UTF-8"");
                pageContext.getOut().write(""The source is malformed : <a href=\"""" + decodedUrl + ""\"" target=\""_blank\"">"" + decodedUrl + ""</a>"");
                return EVAL_PAGE;
            }
            StringBuffer httpContent = new StringBuffer();
            httpContent.append(""<!-- URL : "" + urlStr + ""-->"");
            String tmpLine;
            try {
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                while ((tmpLine = reader.readLine()) != null) {
                    httpContent.append(tmpLine);
                }
                reader.close();
            } catch (IOException ioe) {
                user.resetSourceURL();
                String decodedUrl = URLDecoder.decode(urlStr, ""UTF-8"");
                pageContext.getOut().write(""Unable to display the source at : <a href=\"""" + decodedUrl + ""\"" target=\""_blank\"">"" + decodedUrl + ""</a>"");
                return EVAL_PAGE;
            }
            pageContext.getOut().write(httpContent.toString());
        } catch (Exception e) {
            e.printStackTrace();
            throw new JspException(""Error when trying to get HTTP content"");
        }
        return EVAL_PAGE;
    }
",0
19561380,2,"    private static void loadEmoticons() {
        emoticons = new Hashtable();
        URL url = ChatPanel.class.getResource(""/resources/text/emoticon.properties"");
        BufferedReader br = null;
        try {
            br = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = null;
            while ((line = br.readLine()) != null) {
                if (line.trim().length() == 0 || line.charAt(0) == '#') continue;
                int i0 = line.indexOf('=');
                if (i0 != -1) {
                    String key = line.substring(0, i0).trim();
                    String value = line.substring(i0 + 1).trim();
                    value = StringUtil.replaceString(value, ""\\n"", ""\n"");
                    URL eUrl = ChatPanel.class.getResource(""/resources/emoticon/"" + value);
                    if (eUrl != null) emoticons.put(key, new ImageIcon(eUrl));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (br != null) {
                try {
                    br.close();
                } catch (Exception e) {
                }
            }
        }
    }
",0
16105484,2,"    private String callPage(String urlStr) throws IOException {
        URL url = new URL(urlStr);
        BufferedReader reader = null;
        StringBuilder result = new StringBuilder();
        try {
            reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                result.append(line);
            }
        } finally {
            if (reader != null) reader.close();
        }
        return result.toString();
    }
",0
22870704,2,"    public static byte[] readHTTPFile(String url, StringBuffer contentType, StringBuffer encoding) {
        try {
            URL u = new URL(url);
            URLConnection urlConn = u.openConnection();
            urlConn.setReadTimeout(10 * 1000);
            urlConn.setConnectTimeout(10 * 1000);
            urlConn.setDoInput(true);
            urlConn.setDoOutput(false);
            String status = urlConn.getHeaderField(null).toLowerCase();
            String location = urlConn.getHeaderField(""Location"");
            String cookie = urlConn.getHeaderField(""Set-Cookie"");
            int times = 0;
            while ((status.indexOf(""http/1.1 3"") >= 0 || status.indexOf(""http/1.0 3"") >= 0) && !HelperStd.isEmpty(location)) {
                if (!HelperStd.isEmpty(urlConn.getHeaderField(""Set-Cookie""))) cookie = urlConn.getHeaderField(""Set-Cookie"");
                u = new URL(location);
                urlConn = u.openConnection();
                urlConn.setReadTimeout(10 * 1000);
                urlConn.setConnectTimeout(10 * 1000);
                urlConn.setDoInput(true);
                urlConn.setDoOutput(false);
                urlConn.setRequestProperty(""Cookie"", cookie);
                status = urlConn.getHeaderField(null).toLowerCase();
                location = urlConn.getHeaderField(""Location"");
                times++;
                if (times > 10) break;
            }
            System.out.println(urlConn.getHeaderField(null) + "":"" + urlConn.getContentLength() + "":"" + u);
            if (contentType != null) contentType.append(urlConn.getContentType());
            if (encoding != null) {
                String enc = null, ct = urlConn.getContentType();
                if (ct != null && ct.indexOf(""charset="") > 0) {
                    int a = ct.indexOf(""charset="") + ""charset="".length();
                    enc = ct.substring(a);
                }
                if (enc == null) enc = urlConn.getContentEncoding();
                if (enc == null) enc = ""ISO-8859-1"";
                encoding.append(enc);
            }
            BufferedInputStream in = new BufferedInputStream(urlConn.getInputStream());
            ByteArrayOutputStream bout = new ByteArrayOutputStream();
            byte[] b = new byte[1024];
            int read = 0;
            while (read != -1) {
                read = in.read(b);
                if (read > 0) bout.write(b, 0, read);
            }
            in.close();
            System.out.println(bout.size());
            return bout.toByteArray();
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println(""readHTTPFile:"" + e.getMessage() + "","" + url);
        }
        return new byte[0];
    }
",0
17447923,2,"    private Metadata readMetadataIndexFileFromNetwork(String mediaMetadataURI) throws IOException {
        Metadata tempMetadata = new Metadata();
        URL url = new URL(mediaMetadataURI);
        BufferedReader input = new BufferedReader(new InputStreamReader(url.openStream()));
        String tempLine = null;
        while ((tempLine = input.readLine()) != null) {
            Property tempProperty = PropertyList.splitStringIntoKeyAndValue(tempLine);
            if (tempProperty != null) {
                tempMetadata.addIfNotNull(tempProperty.getKey(), tempProperty.getValue());
            }
        }
        input.close();
        return tempMetadata;
    }
",0
16721518,2,"    void openTextFile(String urlString, boolean install) {
        StringBuffer sb = null;
        try {
            URL url = new URL(urlString);
            InputStream in = url.openStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            sb = new StringBuffer();
            String line;
            while ((line = br.readLine()) != null) sb.append(line + ""\n"");
            in.close();
        } catch (IOException e) {
            if (!(install && urlString.endsWith(""StartupMacros.txt""))) IJ.error(""URL Opener"", """" + e);
            sb = null;
        }
        if (sb != null) {
            if (install) (new MacroInstaller()).install(new String(sb)); else {
                int index = urlString.lastIndexOf(""/"");
                if (index != -1 && index <= urlString.length() - 1) urlString = urlString.substring(index + 1);
                (new Editor()).create(urlString, new String(sb));
            }
        }
    }
",0
13871052,2,"    public boolean loadResource(String resourcePath) {
        try {
            URL url = Thread.currentThread().getContextClassLoader().getResource(resourcePath);
            if (url == null) {
                logger.error(""Cannot find the resource named: '"" + resourcePath + ""'. Failed to load the keyword list."");
                return false;
            }
            InputStreamReader isr = new InputStreamReader(url.openStream());
            BufferedReader br = new BufferedReader(isr);
            String ligne = br.readLine();
            while (ligne != null) {
                if (!contains(ligne.toUpperCase())) addLast(ligne.toUpperCase());
                ligne = br.readLine();
            }
            return true;
        } catch (IOException ioe) {
            logger.log(Level.ERROR, ""Cannot load default SQL keywords file."", ioe);
        }
        return false;
    }
",0
13207434,2,"    public String sendRequest(java.lang.String servletName, java.lang.String request) {
        String reqxml = """";
        org.jdom.Document retdoc = null;
        String myurl = java.util.prefs.Preferences.systemRoot().get(""serverurl"", """");
        String myport = """";
        myport = java.util.prefs.Preferences.systemRoot().get(""portno"", ""8080"");
        if (myport == null || myport.trim().equals("""")) {
            myport = ""80"";
        }
        if (this.serverURL == null) {
            try {
                java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();
                if (codebase != null) serverURL = codebase.getHost(); else serverURL = ""localhost"";
            } catch (Exception exp) {
                exp.printStackTrace();
                serverURL = ""localhost"";
            }
            newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);
            ipdig.show();
            serverURL = myurl = ipdig.getIPAddress();
            myport = ipdig.getPortNo();
            java.util.prefs.Preferences.systemRoot().put(""serverurl"", serverURL);
            java.util.prefs.Preferences.systemRoot().put(""portno"", myport);
            System.out.println(serverURL);
        }
        try {
            System.out.println(""http://"" + serverURL + "":"" + myport + ""/newgenlibctxt/"" + servletName);
            java.net.URL url = new java.net.URL(""http://"" + serverURL + "":"" + myport + ""/newgenlibctxt/"" + servletName);
            java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();
            urlconn.setDoOutput(true);
            urlconn.setRequestProperty(""Content-type"", ""text/xml; charset=UTF-8"");
            java.io.OutputStream os = urlconn.getOutputStream();
            String req1xml = request;
            java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());
            java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);
            java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, ""UTF-8"");
            System.out.println(""#########***********$$$$$$$$##########"" + req1xml);
            dos.write(req1xml);
            dos.flush();
            dos.close();
            System.out.println(""url conn: "" + urlconn.getContentEncoding() + ""  "" + urlconn.getContentType());
            java.io.InputStream ios = urlconn.getInputStream();
            java.util.zip.CheckedInputStream cis = new java.util.zip.CheckedInputStream(ios, new java.util.zip.Adler32());
            java.util.zip.GZIPInputStream gip = new java.util.zip.GZIPInputStream(cis);
            java.io.InputStreamReader br = new java.io.InputStreamReader(gip, ""UTF-8"");
            retdoc = (new org.jdom.input.SAXBuilder()).build(br);
        } catch (java.net.ConnectException conexp) {
            javax.swing.JOptionPane.showMessageDialog(null, newgen.presentation.NewGenMain.getAppletInstance().getMyResource().getString(""ConnectExceptionMessage""), ""Critical error"", javax.swing.JOptionPane.ERROR_MESSAGE);
        } catch (Exception exp) {
            exp.printStackTrace(System.out);
            TroubleShootConnectivity troubleShoot = new TroubleShootConnectivity();
        }
        System.out.println(reqxml);
        return (new org.jdom.output.XMLOutputter()).outputString(retdoc);
    }
",0
20627152,2,"    public void loadLicenceText() {
        try {
            URL url = this.getClass().getResource(""/licences/"" + this.files[this.licence_text_id]);
            InputStreamReader ins = new InputStreamReader(url.openStream());
            BufferedReader br = new BufferedReader(ins);
            String line;
            StringBuffer sb = new StringBuffer();
            while ((line = br.readLine()) != null) {
                sb.append(line);
            }
            this.licence_text = sb.toString();
        } catch (Exception ex) {
            System.out.println(""LicenceInfo::error reading. Ex: "" + ex);
            ex.printStackTrace();
        }
    }
",0
6198171,2,"    public static JSONObject doJSONQuery(String urlstr) throws IOException, MalformedURLException, JSONException, SolrException {
        URL url = new URL(urlstr);
        HttpURLConnection con = null;
        try {
            con = (HttpURLConnection) url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            StringBuffer buffer = new StringBuffer();
            String str;
            while ((str = in.readLine()) != null) {
                buffer.append(str + ""\n"");
            }
            in.close();
            JSONObject response = new JSONObject(buffer.toString());
            return response;
        } catch (IOException e) {
            if (con != null) {
                try {
                    int statusCode = con.getResponseCode();
                    if (statusCode >= 400) {
                        throw (new SolrSelectUtils()).new SolrException(statusCode);
                    }
                } catch (IOException exc) {
                }
            }
            throw (e);
        }
    }
",0
20568568,2,"    private String createHTML(PAGE_TYPE requestPage) {
        String result = ""<html><head>"";
        URL url = getClass().getClassLoader().getResource(""org/compiere/images/PAPanel.css"");
        InputStreamReader ins;
        try {
            ins = new InputStreamReader(url.openStream());
            BufferedReader bufferedReader = new BufferedReader(ins);
            String cssLine;
            while ((cssLine = bufferedReader.readLine()) != null) result += cssLine + ""\n"";
        } catch (IOException e1) {
            log.log(Level.SEVERE, e1.getLocalizedMessage(), e1);
        }
        switch(requestPage) {
            case PAGE_LOGO:
                result += ""</head><body class=\""header\"">"" + ""<table width=\""100%\""><tr><td>"" + ""<img src=\""res:org/compiere/images/logo_ad.png\"">"" + ""</td><td></td><td width=\""290\"">"" + ""</td></tr></table>"" + ""</body></html>"";
                break;
            case PAGE_HOME:
                result += ""</head><body><div class=\""content\"">\n"";
                queryZoom = null;
                queryZoom = new ArrayList<MQuery>();
                String appendToHome = null;
                String sql = "" SELECT x.AD_CLIENT_ID, x.NAME, x.DESCRIPTION, x.AD_WINDOW_ID, x.PA_GOAL_ID, x.LINE, x.HTML, m.AD_MENU_ID"" + "" FROM PA_DASHBOARDCONTENT x"" + "" LEFT OUTER JOIN AD_MENU m ON x.ad_window_id=m.ad_window_id"" + "" WHERE (x.AD_Client_ID=0 OR x.AD_Client_ID=?) AND x.IsActive='Y'"" + "" ORDER BY LINE"";
                PreparedStatement pstmt = null;
                ResultSet rs = null;
                try {
                    pstmt = DB.prepareStatement(sql, null);
                    pstmt.setInt(1, Env.getAD_Client_ID(Env.getCtx()));
                    rs = pstmt.executeQuery();
                    while (rs.next()) {
                        appendToHome = rs.getString(""HTML"");
                        if (appendToHome != null) {
                            if (rs.getString(""DESCRIPTION"") != null) result += ""<H2>"" + rs.getString(""DESCRIPTION"") + ""</H2>\n"";
                            result += stripHtml(appendToHome, false) + ""<br>\n"";
                        }
                        if (rs.getInt(""AD_MENU_ID"") > 0) {
                            result += ""<a class=\""hrefNode\"" href=\""http:///window/node#"" + String.valueOf(rs.getInt(""AD_WINDOW_ID"") + ""\"">"" + rs.getString(""DESCRIPTION"") + ""</a><br>\n"");
                        }
                        result += ""<br>\n"";
                        if (rs.getInt(""PA_GOAL_ID"") > 0) result += goalsDetail(rs.getInt(""PA_GOAL_ID""));
                    }
                } catch (SQLException e) {
                    log.log(Level.SEVERE, sql, e);
                } finally {
                    DB.close(rs, pstmt);
                    rs = null;
                    pstmt = null;
                }
                result += ""<br><br><br>\n"" + ""</div>\n</body>\n</html>\n"";
                break;
            default:
                log.warning(""Unknown option - "" + requestPage);
        }
        return result;
    }
",0
21583226,2,"    public String getMessageofTheDay(String id) {
        StringBuffer mod = new StringBuffer();
        int serverModId = 0;
        int clientModId = 0;
        BufferedReader input = null;
        try {
            URL url = new URL(FlyShareApp.BASE_WEBSITE_URL + ""/mod.txt"");
            input = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            inputLine = input.readLine();
            try {
                clientModId = Integer.parseInt(id);
                serverModId = Integer.parseInt(inputLine);
            } catch (NumberFormatException e) {
            }
            if (clientModId < serverModId || clientModId == 0) {
                mod.append(serverModId);
                mod.append('|');
                while ((inputLine = input.readLine()) != null) mod.append(inputLine);
            }
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        } finally {
            try {
                input.close();
            } catch (Exception e) {
            }
        }
        return mod.toString();
    }
",0
16830224,2,"        private void importExample(boolean server) throws IOException, XMLStreamException, FactoryConfigurationError {
            InputStream example = null;
            if (server) {
                monitor.setNote(Messages.getString(""ImportExampleDialog.Cont""));
                monitor.setProgress(0);
                String page = engine.getConfiguration().getProperty(""example.url"");
                URL url = new URL(page);
                BufferedReader rr = new BufferedReader(new InputStreamReader(url.openStream()));
                try {
                    sleep(3000);
                } catch (InterruptedException e1) {
                    Logger.getLogger(this.getClass()).debug(""Internal error."", e1);
                }
                if (monitor.isCanceled()) {
                    return;
                }
                try {
                    while (rr.ready()) {
                        if (monitor.isCanceled()) {
                            return;
                        }
                        String l = rr.readLine();
                        if (example == null) {
                            int i = l.indexOf(""id=\""example\"""");
                            if (i > 0) {
                                l = l.substring(i + 19);
                                l = l.substring(0, l.indexOf('""'));
                                url = new URL(l);
                                example = url.openStream();
                            }
                        }
                    }
                } catch (IOException ex) {
                    throw ex;
                } finally {
                    if (rr != null) {
                        try {
                            rr.close();
                        } catch (Exception e) {
                            Logger.getLogger(this.getClass()).debug(""Internal error."", e);
                        }
                    }
                }
            } else {
                InputStream is = ApplicationHelper.class.getClassLoader().getResourceAsStream(""gtd-free-example.xml"");
                if (is != null) {
                    example = is;
                }
            }
            if (example != null) {
                if (monitor.isCanceled()) {
                    try {
                        example.close();
                    } catch (IOException e) {
                        Logger.getLogger(this.getClass()).debug(""Internal error."", e);
                    }
                    return;
                }
                monitor.setNote(Messages.getString(""ImportExampleDialog.Read""));
                monitor.setProgress(1);
                model = new GTDModel(null);
                GTDDataXMLTools.importFile(model, example);
                try {
                    example.close();
                } catch (IOException e) {
                    Logger.getLogger(this.getClass()).debug(""Internal error."", e);
                }
                if (monitor.isCanceled()) {
                    return;
                }
                monitor.setNote(Messages.getString(""ImportExampleDialog.Imp.File""));
                monitor.setProgress(2);
                try {
                    SwingUtilities.invokeAndWait(new Runnable() {

                        @Override
                        public void run() {
                            if (monitor.isCanceled()) {
                                return;
                            }
                            engine.getGTDModel().importData(model);
                        }
                    });
                } catch (InterruptedException e1) {
                    Logger.getLogger(this.getClass()).debug(""Internal error."", e1);
                } catch (InvocationTargetException e1) {
                    Logger.getLogger(this.getClass()).debug(""Internal error."", e1);
                }
            } else {
                throw new IOException(""Failed to obtain remote example file."");
            }
        }
",0
15858892,2,"    @SuppressWarnings(""finally"")
    @Override
    public String read(EnumSensorType sensorType, Map<String, String> stateMap) {
        BufferedReader in = null;
        StringBuffer result = new StringBuffer();
        try {
            URL url = new URL(getUrl());
            in = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            while ((str = in.readLine()) != null) {
                result.append(str);
            }
        } catch (ConnectException ce) {
            logger.error(""MockupStatusCommand excute fail: "" + ce.getMessage());
        } catch (Exception e) {
            logger.error(""MockupStatusCommand excute fail: "" + e.getMessage());
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                    logger.error(""BufferedReader could not be closed"", e);
                }
            }
            return result.toString();
        }
    }
",0
20130103,2,"    public static Collection<Class<? extends Page>> loadPages() throws IOException {
        ClassLoader ldr = Thread.currentThread().getContextClassLoader();
        Collection<Class<? extends Page>> pages = new ArrayList<Class<? extends Page>>();
        Enumeration<URL> e = ldr.getResources(""META-INF/services/"" + Page.class.getName());
        while (e.hasMoreElements()) {
            URL url = e.nextElement();
            InputStream is = url.openStream();
            ;
            try {
                BufferedReader r = new BufferedReader(new InputStreamReader(is, ""UTF-8""));
                while (true) {
                    String line = r.readLine();
                    if (line == null) break;
                    int comment = line.indexOf('#');
                    if (comment >= 0) line = line.substring(0, comment);
                    String name = line.trim();
                    if (name.length() == 0) continue;
                    Class<?> clz = Class.forName(name, true, ldr);
                    Class<? extends Page> impl = clz.asSubclass(Page.class);
                    pages.add(impl);
                }
            } catch (Exception ex) {
                System.out.println(ex);
            } finally {
                try {
                    is.close();
                } catch (Exception ex) {
                }
            }
        }
        return pages;
    }
",0
13099033,2,"    public void process(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
        String UrlStr = req.getRequestURL().toString();
        URL domainurl = new URL(UrlStr);
        domain = domainurl.getHost();
        pathinfo = req.getPathInfo();
        String user_agent = req.getHeader(""user-agent"");
        UserAgent userAgent = UserAgent.parseUserAgentString(user_agent);
        String browser = userAgent.getBrowser().getName();
        String[] shot_domain_array = domain.split(""\\."");
        shot_domain = shot_domain_array[1] + ""."" + shot_domain_array[2];
        if (browser.equalsIgnoreCase(""Robot/Spider"") || browser.equalsIgnoreCase(""Lynx"") || browser.equalsIgnoreCase(""Downloading Tool"")) {
            JSONObject domainJsonObject = CsvReader.CsvReader(""domainparUpdated.csv"", shot_domain);
            log.info(domainJsonObject.toString());
        } else {
            String title;
            String locale;
            String facebookid;
            String color;
            String headImage;
            String google_ad_client;
            String google_ad_slot1;
            String google_ad_width1;
            String google_ad_height1;
            String google_ad_slot2;
            String google_ad_width2;
            String google_ad_height2;
            String google_ad_slot3;
            String google_ad_width3;
            String google_ad_height3;
            String countrycode = null;
            String city = null;
            String gmclickval = null;
            String videos = null;
            int intcount = 0;
            String strcount = ""0"";
            boolean countExist = false;
            Cookie[] cookies = req.getCookies();
            if (cookies != null) {
                for (int i = 0; i < cookies.length; i++) {
                    if (cookies[i].getName().equals(""count"")) {
                        strcount = cookies[i].getValue();
                        if (strcount != null && strcount.length() > 0) {
                            log.info(""Check count "" + strcount + "" path "" + cookies[i].getPath());
                            intcount = Integer.parseInt(strcount);
                            intcount++;
                        } else {
                            intcount = 1;
                        }
                        log.info(""New count "" + intcount);
                        LongLivedCookie count = new LongLivedCookie(""count"", Integer.toString(intcount));
                        resp.addCookie(count);
                        countExist = true;
                    }
                    if (cookies[i].getName().equals(""countrycode"")) {
                        countrycode = cookies[i].getValue();
                    }
                    if (cookies[i].getName().equals(""city"")) {
                        city = cookies[i].getValue();
                    }
                    if (cookies[i].getName().equals(""videos"")) {
                        videos = cookies[i].getValue();
                        log.info(""Welcome videos "" + videos);
                    }
                    if (cookies[i].getName().equals(""gmclick"")) {
                        log.info(""gmclick exist!!"");
                        gmclickval = cookies[i].getValue();
                        if (intcount % 20 == 0 && intcount > 0) {
                            log.info(""Cancell gmclick -> "" + gmclickval + "" intcount "" + intcount + "" path "" + cookies[i].getPath());
                            Cookie gmclick = new Cookie(""gmclick"", ""0"");
                            gmclick.setPath(""/"");
                            gmclick.setMaxAge(0);
                            resp.addCookie(gmclick);
                        }
                    }
                }
                if (!countExist) {
                    LongLivedCookie count = new LongLivedCookie(""count"", ""0"");
                    resp.addCookie(count);
                    log.info("" Not First visit count Don't Exist!!"");
                }
                if (videos == null) {
                    LongLivedCookie videoscookies = new LongLivedCookie(""videos"", ""0"");
                    resp.addCookie(videoscookies);
                    log.info(""Not First visit VIDEOS Don't Exist!!"");
                }
            } else {
                LongLivedCookie count = new LongLivedCookie(""count"", strcount);
                resp.addCookie(count);
                LongLivedCookie videosfirstcookies = new LongLivedCookie(""videos"", ""0"");
                resp.addCookie(videosfirstcookies);
                log.info(""First visit count = "" + intcount + "" videos 0"");
            }
            String[] dompar = CommUtils.CsvParsing(domain, ""domainpar.csv"");
            title = dompar[0];
            locale = dompar[1];
            facebookid = dompar[2];
            color = dompar[3];
            headImage = dompar[4];
            google_ad_client = dompar[5];
            google_ad_slot1 = dompar[6];
            google_ad_width1 = dompar[7];
            google_ad_height1 = dompar[8];
            google_ad_slot2 = dompar[9];
            google_ad_width2 = dompar[10];
            google_ad_height2 = dompar[11];
            google_ad_slot3 = dompar[12];
            google_ad_width3 = dompar[13];
            google_ad_height3 = dompar[14];
            String ip = req.getRemoteHost();
            if ((countrycode == null) || (city == null)) {
                String ipServiceCall = ""http://api.ipinfodb.com/v2/ip_query.php?key=abbb04fd823793c5343a046e5d56225af37861b9020e9bc86313eb20486b6133&ip="" + ip + ""&output=json"";
                String strCallResult = """";
                URL url = new URL(ipServiceCall);
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF8""));
                StringBuffer response = new StringBuffer();
                String line;
                while ((line = reader.readLine()) != null) {
                    response.append(line);
                }
                reader.close();
                strCallResult = response.toString();
                try {
                    JSONObject jso = new JSONObject(strCallResult);
                    log.info(""Status -> "" + jso.get(""Status"").toString());
                    log.info(""City -> "" + jso.get(""City"").toString());
                    city = jso.get(""City"").toString();
                    countrycode = jso.get(""CountryCode"").toString();
                    log.info(""countrycode -> "" + countrycode);
                    if ((city.length() == 0) || (city == null)) {
                        LongLivedCookie cookcity = new LongLivedCookie(""city"", ""Helsinki"");
                        resp.addCookie(cookcity);
                        city = ""Helsinki"";
                    } else {
                        LongLivedCookie cookcity = new LongLivedCookie(""city"", city);
                        resp.addCookie(cookcity);
                    }
                    if (countrycode.length() == 0 || (countrycode == null) || countrycode.equals(""RD"")) {
                        LongLivedCookie cookcountrycode = new LongLivedCookie(""countrycode"", ""FI"");
                        resp.addCookie(cookcountrycode);
                        countrycode = ""FI"";
                    } else {
                        LongLivedCookie cookcountrycode = new LongLivedCookie(""countrycode"", countrycode);
                        resp.addCookie(cookcountrycode);
                    }
                } catch (JSONException e) {
                    log.severe(e.getMessage());
                } finally {
                    if ((countrycode == null) || (city == null)) {
                        log.severe(""need use finally!!!"");
                        countrycode = ""FI"";
                        city = ""Helsinki"";
                        LongLivedCookie cookcity = new LongLivedCookie(""city"", ""Helsinki"");
                        resp.addCookie(cookcity);
                        LongLivedCookie cookcountrycode = new LongLivedCookie(""countrycode"", ""FI"");
                        resp.addCookie(cookcountrycode);
                    }
                }
            }
            JSONArray startjsonarray = new JSONArray();
            JSONArray memjsonarray = new JSONArray();
            Map<String, Object> map = new HashMap<String, Object>();
            Map<String, Object> mapt = new HashMap<String, Object>();
            mapt.put(""img"", headImage);
            mapt.put(""color"", color);
            mapt.put(""title"", title);
            mapt.put(""locale"", locale);
            mapt.put(""domain"", domain);
            mapt.put(""facebookid"", facebookid);
            mapt.put(""ip"", ip);
            mapt.put(""countrycode"", countrycode);
            mapt.put(""city"", city);
            map.put(""theme"", mapt);
            startjsonarray.put(map);
            String[] a = { ""mem0"", ""mem20"", ""mem40"", ""mem60"", ""mem80"", ""mem100"", ""mem120"", ""mem140"", ""mem160"", ""mem180"" };
            List memlist = Arrays.asList(a);
            Collections.shuffle(memlist);
            Map<String, Object> mammap = new HashMap<String, Object>();
            mammap.put(""memlist"", memlist);
            memjsonarray.put(mammap);
            log.info(memjsonarray.toString());
            resp.setContentType(""text/html"");
            resp.setCharacterEncoding(""UTF-8"");
            PrintWriter out = resp.getWriter();
            out.println(""<!DOCTYPE HTML PUBLIC \""-//W3C//DTD HTML 4.01 Transitional//EN\"" \""http://www.w3.org/TR/html4/loose.dtd\"">"");
            out.println(""<html xmlns=\""http://www.w3.org/1999/xhtml\"" xmlns:fb=\""http://www.facebook.com/2008/fbml\"">"");
            out.println(""<head>"");
            out.println(""<meta http-equiv=\""content-type\"" content=\""text/html; charset=UTF-8\"">"");
            out.println(""<meta name=\""gwt:property\"" content=\""locale="" + locale + ""\"">"");
            out.println(""<link type=\""text/css\"" rel=\""stylesheet\"" href=\""NewTube.css\"">"");
            out.println(""<title>"" + title + ""</title>"");
            out.println(""<script type=\""text/javascript\"" language=\""javascript\"" src=\""newtube/newtube.nocache.js\""></script>"");
            out.println(""<script type='text/javascript'>var jsonStartParams = "" + startjsonarray.toString() + "";</script>"");
            out.println(""<script type='text/javascript'>var girlsphones = "" + CommUtils.CsvtoJson(""girlsphones.csv"").toString() + "";</script>"");
            out.println(""<script type='text/javascript'>"");
            out.println(""var mem = "" + memjsonarray.toString() + "";"");
            out.println(""</script>"");
            out.println(""</head>"");
            out.println(""<body>"");
            out.println(""<div id='fb-root'></div>"");
            out.println(""<script>"");
            out.println(""window.fbAsyncInit = function() {"");
            out.println(""FB.init({appId: '"" + facebookid + ""', status: true, cookie: true,xfbml: true});};"");
            out.println(""(function() {"");
            out.println(""var e = document.createElement('script'); e.async = true;"");
            out.println(""e.src = document.location.protocol +"");
            out.println(""'//connect.facebook.net/"" + locale + ""/all.js';"");
            out.println(""document.getElementById('fb-root').appendChild(e);"");
            out.println(""}());"");
            out.println(""</script>"");
            out.println(""<div id=\""start\""></div>"");
            out.println(""<div id=\""seo_content\"">"");
            BufferedReader bufRdr = new BufferedReader(new InputStreamReader(new FileInputStream(domain + "".html""), ""UTF8""));
            String contline = null;
            while ((contline = bufRdr.readLine()) != null) {
                out.println(contline);
            }
            bufRdr.close();
            if (countrycode != null && !countrycode.equalsIgnoreCase(""US"") && !countrycode.equalsIgnoreCase(""IE"") && !countrycode.equalsIgnoreCase(""UK"") && intcount > 2 && intcount < 51) {
                out.println(""<script type=\""text/javascript\""><!--"");
                out.println(""google_ad_client = \"""" + google_ad_client + ""\"";"");
                out.println(""google_ad_slot = \"""" + google_ad_slot1 + ""\"";"");
                out.println(""google_ad_width = "" + google_ad_width1 + "";"");
                out.println(""google_ad_height = "" + google_ad_height1 + "";"");
                out.println(""//-->"");
                out.println(""</script>"");
                out.println(""<script type=\""text/javascript\"""");
                out.println(""src=\"""" + google_ad_client + "".js\"">"");
                out.println(""</script>"");
                out.println(""<script type=\""text/javascript\""><!--"");
                out.println(""google_ad_client = \"""" + google_ad_client + ""\"";"");
                out.println(""google_ad_slot = \"""" + google_ad_slot2 + ""\"";"");
                out.println(""google_ad_width = "" + google_ad_width2 + "";"");
                out.println(""google_ad_height = "" + google_ad_height2 + "";"");
                out.println(""//-->"");
                out.println(""</script>"");
                out.println(""<script type=\""text/javascript\"""");
                out.println(""src=\"""" + google_ad_client + "".js\"">"");
                out.println(""</script>"");
                out.println(""<script type=\""text/javascript\""><!--"");
                out.println(""google_ad_client = \"""" + google_ad_client + ""\"";"");
                out.println(""google_ad_slot = \"""" + google_ad_slot3 + ""\"";"");
                out.println(""google_ad_width = "" + google_ad_width3 + "";"");
                out.println(""google_ad_height = "" + google_ad_height3 + "";"");
                out.println(""//-->"");
                out.println(""</script>"");
                out.println(""<script type=\""text/javascript\"""");
                out.println(""src=\"""" + google_ad_client + "".js\"">"");
                out.println(""</script>"");
            }
            if (countrycode != null && !countrycode.equalsIgnoreCase(""US"") && !countrycode.equalsIgnoreCase(""IE"") && !countrycode.equalsIgnoreCase(""UK"") && intcount > 50) {
                out.println(""<script type=\""text/javascript\""><!--"");
                out.println(""google_ad_client = \"""" + ""pub-9496078135369870"" + ""\"";"");
                out.println(""google_ad_slot = \"""" + ""8683942065"" + ""\"";"");
                out.println(""google_ad_width = "" + ""160"" + "";"");
                out.println(""google_ad_height = "" + ""600"" + "";"");
                out.println(""//-->"");
                out.println(""</script>"");
                out.println(""<script type=\""text/javascript\"""");
                out.println(""src=\""pub-9496078135369870"" + """" + "".js\"">"");
                out.println(""</script>"");
                out.println(""<script type=\""text/javascript\""><!--"");
                out.println(""google_ad_client = \"""" + ""pub-9496078135369870"" + ""\"";"");
                out.println(""google_ad_slot = \"""" + ""0941291340"" + ""\"";"");
                out.println(""google_ad_width = "" + ""728"" + "";"");
                out.println(""google_ad_height = "" + ""90"" + "";"");
                out.println(""//-->"");
                out.println(""</script>"");
                out.println(""<script type=\""text/javascript\"""");
                out.println(""src=\"""" + ""pub-9496078135369870"" + "".js\"">"");
                out.println(""</script>"");
                out.println(""<script type=\""text/javascript\""><!--"");
                out.println(""google_ad_client = \"""" + ""pub-9496078135369870"" + ""\"";"");
                out.println(""google_ad_slot = \"""" + ""4621616265"" + ""\"";"");
                out.println(""google_ad_width = "" + ""468"" + "";"");
                out.println(""google_ad_height = "" + ""60"" + "";"");
                out.println(""//-->"");
                out.println(""</script>"");
                out.println(""<script type=\""text/javascript\"""");
                out.println(""src=\"""" + ""pub-9496078135369870"" + "".js\"">"");
                out.println(""</script>"");
            }
            out.println(""</div>"");
            out.println(""</body></html>"");
            out.close();
        }
    }
",0
13207437,2,"    public Object sendRequestObjectResponse(java.lang.String servletName, java.lang.String request) {
        String osRoot = OSRoot.getRoot();
        String fname = """";
        Object retobj = null;
        String myurl = java.util.prefs.Preferences.systemRoot().get(""serverurl"", """");
        String myport = java.util.prefs.Preferences.systemRoot().get(""portno"", ""8080"");
        if (myport == null || myport.trim().equals("""")) {
            myport = ""80"";
        }
        if (this.serverURL == null) {
            try {
                java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();
                if (codebase != null) serverURL = codebase.getHost(); else serverURL = ""localhost"";
            } catch (Exception exp) {
                exp.printStackTrace();
                serverURL = ""localhost"";
            }
            newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);
            ipdig.show();
            serverURL = myurl = ipdig.getIPAddress();
            myport = ipdig.getPortNo();
            java.util.prefs.Preferences.systemRoot().put(""serverurl"", serverURL);
            java.util.prefs.Preferences.systemRoot().put(""portno"", myport);
            System.out.println(serverURL);
        }
        try {
            System.out.println(""http://"" + serverURL + "":"" + myport + ""/newgenlibctxt/"" + servletName);
            java.net.URL url = new java.net.URL(""http://"" + serverURL + "":"" + myport + ""/newgenlibctxt/"" + servletName);
            java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();
            urlconn.setDoOutput(true);
            urlconn.setRequestProperty(""Content-type"", ""text/xml; charset=UTF-8"");
            java.io.OutputStream os = urlconn.getOutputStream();
            String req1xml = request;
            java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());
            java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);
            java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, ""UTF-8"");
            System.out.println(req1xml);
            try {
                java.io.FileOutputStream pw = new java.io.FileOutputStream(""log.txt"");
                pw.write(req1xml.getBytes());
                pw.flush();
                pw.close();
            } catch (Exception exp) {
                exp.printStackTrace();
            }
            dos.write(req1xml);
            dos.flush();
            dos.close();
            System.out.println(""url conn: "" + urlconn.getContentEncoding() + ""  "" + urlconn.getContentType());
            java.io.InputStream ios = urlconn.getInputStream();
            java.io.File f1 = new java.io.File(osRoot + ""/localattachments/Reports"");
            if (!f1.exists()) f1.mkdirs();
            java.io.File file = null;
            if (urlconn.getContentType() != null && urlconn.getContentType().trim().equals(""application/vnd.oasis.opendocument.text"")) {
                file = new java.io.File(osRoot + ""/localattachments/Reports/"" + System.currentTimeMillis() + "".odt"");
            } else if (urlconn.getContentType() != null && urlconn.getContentType().trim().equals(""text/html"")) {
                file = new java.io.File(osRoot + ""/localattachments/Reports/"" + System.currentTimeMillis() + "".html"");
            } else {
                file = new java.io.File(osRoot + ""/localattachments/Reports/"" + System.currentTimeMillis() + "".xls"");
            }
            file = new java.io.File(file.getAbsolutePath());
            java.io.FileOutputStream fos = new java.io.FileOutputStream(file);
            int c;
            while ((c = ios.read()) != -1) fos.write(c);
            fos.close();
            ios.close();
            fname = file.getAbsolutePath();
            System.out.println(fname);
            newgen.presentation.component.Utility.getInstance().showBrowser(""file://"" + fname);
        } catch (Exception exp) {
            exp.printStackTrace(System.out);
            javax.swing.JOptionPane.showMessageDialog(null, ""<html>Could not establish connection with the server, <br>Please verify server name/IP adress, <br>Also check if NewGenLib server is running</html>"", ""Critical error"", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        return fname;
    }
",0
6908540,2,"    public void create_list() {
        try {
            String data = URLEncoder.encode(""PHPSESSID"", ""UTF-8"") + ""="" + URLEncoder.encode(this.get_session(), ""UTF-8"");
            URL url = new URL(URL_LOLA + FILE_CREATE_LIST);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(data);
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            line = rd.readLine();
            wr.close();
            rd.close();
            System.out.println(""Gene list saved in LOLA"");
        } catch (Exception e) {
            System.out.println(""error in createList()"");
            e.printStackTrace();
        }
    }
",0
15292308,2,"    private static File createFileFromURL(URL url) throws IOException {
        File tempFile = File.createTempFile(""oboFile"", "".obo"");
        PrintStream ps = new PrintStream(tempFile);
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
        String line;
        while ((line = reader.readLine()) != null) {
            ps.println(line);
        }
        ps.close();
        return tempFile;
    }
",0
22627884,2,"    private <T> Collection<T> loadProviders(final Class<T> providerClass) throws ModelException {
        try {
            final String providerNamePrefix = providerClass.getName() + ""."";
            final Map<String, T> providers = new TreeMap<String, T>(new Comparator<String>() {

                public int compare(final String key1, final String key2) {
                    return key1.compareTo(key2);
                }
            });
            final File platformProviders = new File(this.getPlatformProviderLocation());
            if (platformProviders.exists()) {
                if (this.isLoggable(Level.FINEST)) {
                    this.log(Level.FINEST, getMessage(""processing"", platformProviders.getAbsolutePath()), null);
                }
                InputStream in = null;
                boolean suppressExceptionOnClose = true;
                final java.util.Properties p = new java.util.Properties();
                try {
                    in = new FileInputStream(platformProviders);
                    p.load(in);
                    suppressExceptionOnClose = false;
                } finally {
                    try {
                        if (in != null) {
                            in.close();
                        }
                    } catch (final IOException e) {
                        if (suppressExceptionOnClose) {
                            this.log(Level.SEVERE, getMessage(e), e);
                        } else {
                            throw e;
                        }
                    }
                }
                for (Map.Entry<Object, Object> e : p.entrySet()) {
                    if (e.getKey().toString().startsWith(providerNamePrefix)) {
                        final String configuration = e.getValue().toString();
                        if (this.isLoggable(Level.FINEST)) {
                            this.log(Level.FINEST, getMessage(""providerInfo"", platformProviders.getAbsolutePath(), providerClass.getName(), configuration), null);
                        }
                        providers.put(e.getKey().toString(), this.createProviderObject(providerClass, configuration, platformProviders.toURI().toURL()));
                    }
                }
            }
            final Enumeration<URL> classpathProviders = this.findResources(this.getProviderLocation() + '/' + providerClass.getName());
            int count = 0;
            final long t0 = System.currentTimeMillis();
            while (classpathProviders.hasMoreElements()) {
                count++;
                final URL url = classpathProviders.nextElement();
                if (this.isLoggable(Level.FINEST)) {
                    this.log(Level.FINEST, getMessage(""processing"", url.toExternalForm()), null);
                }
                BufferedReader reader = null;
                boolean suppressExceptionOnClose = true;
                try {
                    reader = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));
                    String line = null;
                    while ((line = reader.readLine()) != null) {
                        if (line.contains(""#"")) {
                            continue;
                        }
                        if (this.isLoggable(Level.FINEST)) {
                            this.log(Level.FINEST, getMessage(""providerInfo"", url.toExternalForm(), providerClass.getName(), line), null);
                        }
                        providers.put(providerNamePrefix + providers.size(), this.createProviderObject(providerClass, line, url));
                    }
                    suppressExceptionOnClose = false;
                } finally {
                    try {
                        if (reader != null) {
                            reader.close();
                        }
                    } catch (final IOException e) {
                        if (suppressExceptionOnClose) {
                            this.log(Level.SEVERE, getMessage(e), e);
                        } else {
                            throw new ModelException(getMessage(e), e);
                        }
                    }
                }
            }
            if (this.isLoggable(Level.FINE)) {
                this.log(Level.FINE, getMessage(""contextReport"", count, this.getProviderLocation() + '/' + providerClass.getName(), Long.valueOf(System.currentTimeMillis() - t0)), null);
            }
            return providers.values();
        } catch (final IOException e) {
            throw new ModelException(getMessage(e), e);
        }
    }
",0
11343453,2,"    public static String getWebpage(String url) {
        String content = """";
        if (!url.trim().toLowerCase().startsWith(""http://"")) {
            url = ""http://"" + url;
        }
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                content += line + ""\n"";
            }
            reader.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (Exception e2) {
            e2.printStackTrace();
        }
        return content;
    }
",0
22844377,2,"    public int scrapeForIsbns(URL url) {
        int matches = 0;
        Pattern p = Pattern.compile(""ISBN-10:</strong>\\s*(\\w{10})"");
        Matcher m;
        for (int i = 0; i < RETRIES; i++) {
            try {
                InputStream in = url.openStream();
                BufferedReader br = new BufferedReader(new InputStreamReader(in));
                String str;
                while ((str = br.readLine()) != null) {
                    m = p.matcher(str);
                    while (m.find()) {
                        matches++;
                        outputIsbns.put(m.group(1));
                        logger.debug(""Got ISBN: "" + m.group(1));
                    }
                }
                break;
            } catch (ConnectException e) {
                logger.warn(""Connection attempt "" + i + "" failed, trying again. Max retries: "" + RETRIES);
                try {
                    Thread.sleep(5000);
                } catch (InterruptedException e1) {
                }
            } catch (IOException e) {
                logger.error(""Error reading URL stream"", e);
            } catch (InterruptedException e) {
                logger.error(""Interrupted while calling put(Object E)"", e);
            }
        }
        return matches;
    }
",0
17019840,2,"    public Set<Plugin<?>> loadPluginImplementationMetaData() throws PluginRegistryException {
        try {
            final Enumeration<URL> urls = JavaSystemHelper.getResources(pluginImplementationMetaInfPath);
            pluginImplsSet.clear();
            if (urls != null) {
                while (urls.hasMoreElements()) {
                    final URL url = urls.nextElement();
                    echoMessages.add(PluginMessageBundle.getMessage(""plugin.info.visitor.resource.found"", ""classes"", url.getPath()));
                    InputStream resourceInput = null;
                    Reader reader = null;
                    BufferedReader buffReader = null;
                    String line;
                    try {
                        resourceInput = url.openStream();
                        reader = new InputStreamReader(resourceInput);
                        buffReader = new BufferedReader(reader);
                        line = buffReader.readLine();
                        while (line != null) {
                            try {
                                pluginImplsSet.add(inspectPluginImpl(Class.forName(line.trim())));
                                echoMessages.add(PluginMessageBundle.getMessage(""plugin.info.visitor.resource.processing"", ""class"", line));
                                line = buffReader.readLine();
                            } catch (final ClassNotFoundException cnfe) {
                                throw new PluginRegistryException(""plugin.error.load.classnotfound"", cnfe, pluginImplementationMetaInfPath, line);
                            } catch (final LinkageError ncfe) {
                                if (LOGGER.isDebugEnabled()) {
                                    echoMessages.add(PluginMessageBundle.getMessage(""plugin.info.visitor.resource.linkageError"", ""class"", line, ncfe.getMessage()));
                                }
                                line = buffReader.readLine();
                            }
                        }
                    } catch (final IOException ioe) {
                        throw new PluginRegistryException(""plugin.error.load.ioe"", ioe, url.getFile(), ioe.getMessage());
                    } finally {
                        if (buffReader != null) {
                            buffReader.close();
                        }
                        if (reader != null) {
                            reader.close();
                        }
                        if (resourceInput != null) {
                            resourceInput.close();
                        }
                    }
                }
            }
            return Collections.unmodifiableSet(pluginImplsSet);
        } catch (final IOException ioe) {
            throw new PluginRegistryException(""plugin.error.load.ioe"", ioe, pluginImplementationMetaInfPath, ioe.getMessage());
        }
    }
",0
18598975,2,"    private Face(String font) throws IOException {
        characterWidths = new double[256];
        StringBuffer sb = new StringBuffer();
        sb.append('/');
        sb.append(Constants.FONTS_DIR);
        sb.append('/');
        sb.append(font);
        sb.append(Constants.CHAR_WIDTHS_SUFFIX);
        String path = sb.toString();
        URL url = getClass().getResource(path);
        InputStream is = url.openStream();
        BufferedReader br = new BufferedReader(new InputStreamReader(is));
        int pos = 0;
        String width = br.readLine();
        while (width != null && pos < 256) {
            characterWidths[pos] = Double.parseDouble(width);
            pos++;
            width = br.readLine();
        }
    }
",0
4776598,2,"        private void init(URL url) {
            frame = new JInternalFrame(name);
            frame.addInternalFrameListener(this);
            listModel.add(listModel.size(), this);
            area = new JTextArea();
            area.setMargin(new Insets(5, 5, 5, 5));
            try {
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String in;
                while ((in = reader.readLine()) != null) {
                    area.append(in);
                    area.append(""\n"");
                }
                reader.close();
            } catch (Exception e) {
                e.printStackTrace();
                return;
            }
            th = area.getTransferHandler();
            area.setFont(new Font(""monospaced"", Font.PLAIN, 12));
            area.setCaretPosition(0);
            area.setDragEnabled(true);
            area.setDropMode(DropMode.INSERT);
            frame.getContentPane().add(new JScrollPane(area));
            dp.add(frame);
            frame.show();
            if (DEMO) {
                frame.setSize(300, 200);
            } else {
                frame.setSize(400, 300);
            }
            frame.setResizable(true);
            frame.setClosable(true);
            frame.setIconifiable(true);
            frame.setMaximizable(true);
            frame.setLocation(left, top);
            incr();
            SwingUtilities.invokeLater(new Runnable() {

                public void run() {
                    select();
                }
            });
            nullItem.addActionListener(this);
            setNullTH();
        }
",0
22128712,2,"    public boolean addTextGroup(String key, URL url) {
        if (_textGroups.contains(key)) return false;
        String s;
        Hashtable tg = new Hashtable();
        String sGroupKey = ""default"";
        String sGroup[];
        Vector vGroup = new Vector();
        int cntr;
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((s = in.readLine()) != null) {
                if (s.startsWith(""["")) {
                    if (vGroup.size() > 0) {
                        sGroup = new String[vGroup.size()];
                        for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr);
                        tg.put(sGroupKey, sGroup);
                        vGroup.removeAllElements();
                    }
                    sGroupKey = s.substring(1, s.indexOf(']'));
                } else {
                    vGroup.addElement(s);
                }
            }
            if (vGroup.size() > 0) {
                sGroup = new String[vGroup.size()];
                for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr);
                tg.put(sGroupKey, sGroup);
            }
            in.close();
        } catch (IOException ioe) {
            System.err.println(""Error reading file for "" + key);
            System.err.println(ioe.getMessage());
            return false;
        }
        _textGroups.put(key, tg);
        return true;
    }
",0
23659664,2,"    private int resourceToString(String aFile, StringBuffer aBuffer) {
        int cols = 0;
        URL url = getClass().getResource(aFile);
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = """";
            do {
                line = in.readLine();
                if (line != null) {
                    if (line.length() > cols) cols = line.length();
                    aBuffer.append(line);
                    aBuffer.append('\n');
                }
            } while (line != null);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return cols;
    }
",0
19340788,2,"    public void setInput(String input, Component caller, FFMpegProgressReceiver recv) throws IOException {
        inputMedium = null;
        if (input.contains(""youtube"")) {
            URL url = new URL(input);
            InputStreamReader read = new InputStreamReader(url.openStream());
            BufferedReader in = new BufferedReader(read);
            String inputLine;
            String line = null;
            String vid = input.substring(input.indexOf(""?v="") + 3);
            if (vid.indexOf(""&"") != -1) vid = vid.substring(0, vid.indexOf(""&""));
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.contains(""\""t\"": \"""")) {
                    line = inputLine.substring(inputLine.indexOf(""\""t\"": \"""") + 6);
                    line = line.substring(0, line.indexOf(""\""""));
                    break;
                }
            }
            in.close();
            if (line == null) throw new IOException(""Could not find flv-Video"");
            Downloader dl = new Downloader(""http://www.youtube.com/get_video?video_id="" + vid + ""&t="" + line, recv, lang);
            dl.start();
            return;
        }
        Runtime rt = Runtime.getRuntime();
        Process p = rt.exec(new String[] { path, ""-i"", input });
        BufferedReader br = new BufferedReader(new InputStreamReader(p.getErrorStream()));
        String line;
        Codec videoCodec = null;
        Codec audioCodec = null;
        double duration = -1;
        String aspectRatio = null;
        String scala = null;
        String colorSpace = null;
        String rate = null;
        String mrate = null;
        String aRate = null;
        String aFreq = null;
        String aChannel = null;
        try {
            while ((line = br.readLine()) != null) {
                if (Constants.debug) System.out.println(line);
                if (line.contains(""Duration:"")) {
                    int hours = Integer.parseInt(line.substring(12, 14));
                    int mins = Integer.parseInt(line.substring(15, 17));
                    double secs = Double.parseDouble(line.substring(18, line.indexOf(',')));
                    duration = secs + 60 * mins + hours * 60 * 60;
                    Pattern pat = Pattern.compile(""[0-9]+ kb/s"");
                    Matcher m = pat.matcher(line);
                    if (m.find()) mrate = line.substring(m.start(), m.end());
                }
                if (line.contains(""Video:"")) {
                    String info = line.substring(24);
                    String parts[] = info.split("", "");
                    Pattern pat = Pattern.compile(""Video: [a-zA-Z0-9]+,"");
                    Matcher m = pat.matcher(line);
                    String codec = """";
                    if (m.find()) codec = line.substring(m.start(), m.end());
                    videoCodec = supportedCodecs.getCodecByName(codec.replace(""Video: "", """").replace("","", """"));
                    colorSpace = parts[1];
                    pat = Pattern.compile(""[0-9]+x[0-9]+"");
                    m = pat.matcher(info);
                    if (m.find()) scala = info.substring(m.start(), m.end());
                    pat = Pattern.compile(""DAR [0-9]+:[0-9]+"");
                    m = pat.matcher(info);
                    if (m.find()) aspectRatio = info.substring(m.start(), m.end()).replace(""DAR "", """"); else if (scala != null) aspectRatio = String.valueOf((double) (Math.round(((double) ConvertUtils.getWidthFromScala(scala) / (double) ConvertUtils.getHeightFromScala(scala)) * 100)) / 100);
                    pat = Pattern.compile(""[0-9]+ kb/s"");
                    m = pat.matcher(info);
                    if (m.find()) rate = info.substring(m.start(), m.end());
                } else if (line.contains(""Audio:"")) {
                    String info = line.substring(24);
                    Pattern pat = Pattern.compile(""Audio: [a-zA-Z0-9]+,"");
                    Matcher m = pat.matcher(line);
                    String codec = """";
                    if (m.find()) codec = line.substring(m.start(), m.end()).replace(""Audio: "", """").replace("","", """");
                    if (codec.equals(""mp3"")) codec = ""libmp3lame"";
                    audioCodec = supportedCodecs.getCodecByName(codec);
                    pat = Pattern.compile(""[0-9]+ kb/s"");
                    m = pat.matcher(info);
                    if (m.find()) aRate = info.substring(m.start(), m.end());
                    pat = Pattern.compile(""[0-9]+ Hz"");
                    m = pat.matcher(info);
                    if (m.find()) aFreq = info.substring(m.start(), m.end());
                    if (line.contains(""5.1"")) aChannel = ""5.1""; else if (line.contains(""2.1"")) aChannel = ""2.1""; else if (line.contains(""stereo"")) aChannel = ""Stereo""; else if (line.contains(""mono"")) aChannel = ""Mono"";
                }
                if (videoCodec != null && audioCodec != null && duration != -1) {
                    if (rate == null && mrate != null && aRate != null) rate = String.valueOf(ConvertUtils.getRateFromRateString(mrate) - ConvertUtils.getRateFromRateString(aRate)) + "" kb/s"";
                    inputMedium = new InputMedium(audioCodec, videoCodec, input, duration, colorSpace, aspectRatio, scala, rate, mrate, aRate, aFreq, aChannel);
                    break;
                }
            }
            if ((videoCodec != null || audioCodec != null) && duration != -1) inputMedium = new InputMedium(audioCodec, videoCodec, input, duration, colorSpace, aspectRatio, scala, rate, mrate, aRate, aFreq, aChannel);
        } catch (Exception exc) {
            if (caller != null) JOptionPane.showMessageDialog(caller, lang.inputerror + "" Audiocodec? "" + (audioCodec != null) + "" Videocodec? "" + (videoCodec != null), lang.error, JOptionPane.ERROR_MESSAGE);
            if (Constants.debug) System.out.println(""Audiocodec: "" + audioCodec + ""\nVideocodec: "" + videoCodec);
            if (Constants.debug) exc.printStackTrace();
            throw new IOException(""Input file error"");
        }
        if (inputMedium == null) {
            if (caller != null) JOptionPane.showMessageDialog(caller, lang.inputerror + "" Audiocodec? "" + (audioCodec != null) + "" Videocodec? "" + (videoCodec != null), lang.error, JOptionPane.ERROR_MESSAGE);
            if (Constants.debug) System.out.println(""Audiocodec: "" + audioCodec + ""\nVideocodec: "" + videoCodec);
            throw new IOException(""Input file error"");
        }
    }
",0
23291433,2,"    public static String sendRequest(String urlstring) {
        URL url;
        String line;
        Log.i(""DVBMonitor"", ""Please wait while receiving data from dvb..."");
        try {
            url = new URL(urlstring);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            if ((line = in.readLine()) != null) {
                return line;
            } else {
                return null;
            }
        } catch (Exception ex) {
            Log.e(""DVBMonitor"", ex.toString() + "" while sending request to dvb"");
            return null;
        }
    }
",0
14768963,2,"    public static boolean exec_applet(String fname, VarContainer vc, ActionContainer ac, ThingTypeContainer ttc, Output OUT, InputStream IN, boolean AT, Statement state, String[] arggies) {
        if (!urlpath.endsWith(""/"")) {
            urlpath = urlpath + '/';
        }
        if (!urlpath.startsWith(""http://"")) {
            urlpath = ""http://"" + urlpath;
        }
        String url = urlpath;
        if (fname.startsWith(""dusty_"")) {
            url = url + ""libraries/"" + fname;
        } else {
            url = url + ""users/"" + fname;
        }
        StringBuffer src = new StringBuffer(2400);
        try {
            String s;
            BufferedReader br = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
            while ((s = br.readLine()) != null) {
                src.append(s).append('\n');
            }
            br.close();
        } catch (Exception e) {
            OUT.println(new DSOut(DSOut.ERR_OUT, -1, ""Dustyscript failed at reading the file'"" + fname + ""'\n\t...for 'use' statement""), vc, AT);
            return false;
        }
        fork(src, vc, ac, ttc, OUT, IN, AT, state, arggies);
        return true;
    }
",0
19332852,2,"    public void access() {
        Authenticator.setDefault(new MyAuthenticator());
        try {
            URL url = new URL(""http://localhost/ws/test"");
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            while ((str = in.readLine()) != null) {
            }
            in.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
    }
",0
16435641,2,"    @SuppressWarnings(""unchecked"")
    public static <T> List<T> getServices(String service) {
        String serviceUri = ""META-INF/services/"" + service;
        ClassLoader loader = Thread.currentThread().getContextClassLoader();
        try {
            Enumeration<URL> urls = loader.getResources(serviceUri);
            if (urls.hasMoreElements()) {
                List<T> services = new ArrayList<T>(1);
                Set<String> keys = new HashSet<String>(20);
                do {
                    URL url = urls.nextElement();
                    if (_LOG.isLoggable(Level.FINEST)) {
                        _LOG.finest(""Processing: "" + url);
                    }
                    try {
                        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
                        try {
                            while (true) {
                                String line = in.readLine();
                                if (line == null) break;
                                String className = _parseLine(line);
                                if (className != null && keys.add(className)) {
                                    T instance = (T) _getClass(loader, className);
                                    services.add(instance);
                                }
                            }
                        } finally {
                            in.close();
                        }
                    } catch (Exception e) {
                        if (_LOG.isLoggable(Level.WARNING)) {
                            _LOG.log(Level.WARNING, ""Error parsing URL: "" + url, e);
                        }
                    }
                } while (urls.hasMoreElements());
                if (services.size() == 1) return Collections.singletonList(services.get(0));
                return Collections.unmodifiableList(services);
            }
        } catch (IOException e) {
            if (_LOG.isLoggable(Level.SEVERE)) {
                _LOG.log(Level.SEVERE, ""Error loading Resource: "" + serviceUri, e);
            }
        }
        return Collections.emptyList();
    }
",0
12352751,2,"    public void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException {
        wabclient.Attributes prop = new wabclient.Attributes(attributes);
        try {
            if (tag.equals(""window"")) {
                if (prop == null) {
                    System.err.println(""window without properties"");
                    return;
                }
                int x = prop.getValue(""x"", 0);
                int y = prop.getValue(""y"", 0);
                int width = prop.getValue(""width"", 0);
                int height = prop.getValue(""height"", 0);
                Color bgcolor = prop.getValue(""bgcolor"", Color.white);
                String caption = prop.getValue(""caption"", """");
                layout = prop.getValue(""layout"", 0);
                boolean statusbar = prop.getValue(""statusbar"", false);
                if (sheet.opentype == WABSheet.LAYERED) {
                    Point pos = frame.getNextMDIPos();
                    sheet.setBounds(pos.x, pos.y, 400, 200);
                    sheet.setNormalBounds(new Rectangle(pos.x, pos.y, 400, 200));
                } else {
                    sheet.setBounds(x, y, width, height);
                    sheet.setNormalBounds(new Rectangle(x, y, width, height));
                }
                if (sheet.opentype == WABSheet.MAXIMIZED) sheet.setMaximum(true); else sheet.setMaximum(false);
                sheet.setTitle(caption);
                frame.addSheetToMenu(caption);
                sheet.setBackground(bgcolor);
                if (layout == 1) sheet.getContentPane().setLayout(new FlowLayout()); else if (layout == 2) sheet.getContentPane().setLayout(new BorderLayout()); else sheet.getContentPane().setLayout(null);
            } else if (tag.equals(""menu"")) {
                if (prop == null) {
                    System.err.println(""menu without properties"");
                    return;
                }
                String id = prop.getValue(""id"", """");
                String label = prop.getValue(""label"", """");
                if ((id != null && id.equals(""WINDOW_MENU"") || label.equalsIgnoreCase(""window""))) {
                    windowMenu = new JMenu();
                    menu = windowMenu;
                    sheet.setWindowMenu(menu);
                } else {
                    menu = new JMenu();
                }
                menu.setText(label);
                sheet.menubar.add(menu);
            } else if (tag.equals(""menuitem"")) {
                if (prop == null) {
                    System.err.println(""menuitem without properties"");
                    return;
                }
                JMenuItem item;
                String action = prop.getValue(""action"", """");
                String label = prop.getValue(""label"", """");
                boolean visible = prop.getValue(""visible"", true);
                String icon = prop.getValue(""icon"", """");
                if (action.equals(""WINDOW_OVERLAPPED"")) {
                    item = windowMenuOverlapped = new JMenuItem();
                    item.setActionCommand(""10001"");
                    item.addActionListener(frame);
                } else if (action.equals(""WINDOW_TILE_HORIZONTALLY"")) {
                    item = windowMenuTile = new JMenuItem();
                    item.setActionCommand(""10002"");
                    item.addActionListener(frame);
                } else if (action.equals(""WINDOW_TILE_VERTICALLY"")) {
                    item = windowMenuArrange = new JMenuItem();
                    item.setActionCommand(""10003"");
                    item.addActionListener(frame);
                } else {
                    item = new JMenuItem();
                    item.setActionCommand(action);
                    item.addActionListener((WABClient) global);
                }
                item.setText(label);
                if (!visible) menu.setVisible(false);
                menu.add(item);
                if (frame.getToolBar() != null) {
                    if (icon.length() > 0) {
                        try {
                            ImageIcon img = new ImageIcon(new URL(icon));
                            BufferedImage image = new BufferedImage(25, 25, BufferedImage.TYPE_4BYTE_ABGR);
                            Graphics g = image.createGraphics();
                            g.setColor(new Color(0, 0, 0, 0));
                            g.fillRect(0, 0, 25, 25);
                            g.drawImage(img.getImage(), 4, 4, 16, 16, (ImageObserver) null);
                            BufferedImage pressed = new BufferedImage(25, 25, BufferedImage.TYPE_4BYTE_ABGR);
                            g = pressed.createGraphics();
                            g.setColor(new Color(0, 0, 0, 0));
                            g.fillRect(0, 0, 25, 25);
                            g.drawImage(img.getImage(), 5, 5, 16, 16, (ImageObserver) null);
                            g.setColor(new Color(132, 132, 132));
                            g.drawLine(0, 0, 24, 0);
                            g.drawLine(0, 0, 0, 24);
                            g.setColor(new Color(255, 255, 255));
                            g.drawLine(24, 24, 24, 0);
                            g.drawLine(24, 24, 0, 24);
                            BufferedImage over = new BufferedImage(25, 25, BufferedImage.TYPE_4BYTE_ABGR);
                            g = over.createGraphics();
                            g.setColor(new Color(0, 0, 0, 0));
                            g.fillRect(0, 0, 25, 25);
                            g.drawImage(img.getImage(), 4, 4, 16, 16, (ImageObserver) null);
                            g.setColor(new Color(255, 255, 255));
                            g.drawLine(0, 0, 24, 0);
                            g.drawLine(0, 0, 0, 24);
                            g.setColor(new Color(132, 132, 132));
                            g.drawLine(24, 24, 24, 0);
                            g.drawLine(24, 24, 0, 24);
                            JButton b = new JButton(new ImageIcon(image));
                            b.setRolloverEnabled(true);
                            b.setPressedIcon(new ImageIcon(pressed));
                            b.setRolloverIcon(new ImageIcon(over));
                            b.setToolTipText(label);
                            b.setActionCommand(action);
                            b.setFocusPainted(false);
                            b.setBorderPainted(false);
                            b.setContentAreaFilled(false);
                            b.setMargin(new Insets(0, 0, 0, 0));
                            b.addActionListener(sheet);
                            sheet.toolbar.add(b);
                        } catch (Exception e) {
                        }
                    }
                }
            } else if (tag.equals(""separator"")) {
                menu.addSeparator();
            } else if (tag.equals(""choice"")) {
                if (prop == null) {
                    System.err.println(""choice without properties"");
                    return;
                }
                combo = new JComboBox();
                list = null;
                int x = prop.getValue(""x"", 0);
                int y = prop.getValue(""y"", 0);
                int width = prop.getValue(""width"", 0);
                int height = prop.getValue(""height"", 0);
                String id = prop.getValue(""id"", """");
                Object constraints = prop.getValue(""constraints"");
                boolean editable = prop.getValue(""editable"", false);
                boolean visible = prop.getValue(""visible"", true);
                boolean enabled = prop.getValue(""enabled"", true);
                combo_text = prop.getValue(""text"", """");
                combo.setBounds(x, y, width, height);
                combo.setName((String) id);
                if (editable) {
                    combo.setEditable(editable);
                    combo.setSelectedItem(combo_text);
                }
                if (!visible) combo.setVisible(false);
                if (!enabled) combo.setEnabled(false);
                if (layout == 0) sheet.getContentPane().add(combo); else sheet.getContentPane().add(combo, constraints);
            } else if (tag.equals(""list"")) {
                if (prop == null) {
                    System.err.println(""list without properties"");
                    return;
                }
                list = new JList();
                combo = null;
                listdata = new Vector();
                int x = prop.getValue(""x"", 0);
                int y = prop.getValue(""y"", 0);
                int width = prop.getValue(""width"", 0);
                int height = prop.getValue(""height"", 0);
                String id = prop.getValue(""id"", """");
                Object constraints = prop.getValue(""constraints"");
                list.setName((String) id);
                list.setListData(listdata);
                JScrollPane sp = new JScrollPane(list);
                sp.setBounds(x, y, width, height);
                if (layout == 0) sheet.getContentPane().add(sp); else sheet.getContentPane().add(sp, constraints);
            } else if (tag.equals(""option"")) {
                if (prop == null) {
                    System.err.println(""choice.option without properties"");
                    return;
                }
                String value = prop.getValue(""value"", """");
                String text = prop.getValue(""text"", """");
                if (list != null) listdata.addElement(new ComboOption(text, value));
                if (combo != null) {
                    ComboOption co = new ComboOption(text, value);
                    combo.addItem(co);
                    if (combo_text.equals(text.trim())) combo.setSelectedItem(co);
                }
            } else if (tag.equals(""label"")) {
                if (prop == null) {
                    System.err.println(""label without properties"");
                    return;
                }
                JLabel label = new JLabel();
                int x = prop.getValue(""x"", 0);
                int y = prop.getValue(""y"", 0);
                int width = prop.getValue(""width"", 0);
                int height = prop.getValue(""height"", 0);
                String text = prop.getValue(""text"", """");
                Object constraints = prop.getValue(""constraints"");
                boolean visible = prop.getValue(""visible"", true);
                label.setBounds(x, y, width, height);
                label.setText(text);
                if (!visible) label.setVisible(false);
                if (layout == 0) sheet.getContentPane().add(label); else sheet.getContentPane().add(label, constraints);
            } else if (tag.equals(""button"")) {
                if (prop == null) {
                    System.err.println(""button without properties"");
                    return;
                }
                JButton btn = new JButton();
                int x = prop.getValue(""x"", 0);
                int y = prop.getValue(""y"", 0);
                int width = prop.getValue(""width"", 0);
                int height = prop.getValue(""height"", 0);
                String id = prop.getValue(""id"", """");
                String text = prop.getValue(""text"", """");
                String onmouseup = prop.getValue(""onmouseup"", """");
                Object constraints = prop.getValue(""constraints"");
                btn.setBounds(x, y, width, height);
                btn.setText(text);
                btn.addActionListener(sheet);
                btn.setActionCommand(onmouseup);
                if (layout == 0) sheet.getContentPane().add(btn); else sheet.getContentPane().add(btn, constraints);
            } else if (tag.equals(""radiobutton"")) {
                if (prop == null) {
                    System.err.println(""radiobutton without properties"");
                    return;
                }
                JRadioButton rb = new JRadioButton();
                int x = prop.getValue(""x"", 0);
                int y = prop.getValue(""y"", 0);
                int width = prop.getValue(""width"", 0);
                int height = prop.getValue(""height"", 0);
                String id = prop.getValue(""id"", """");
                String text = prop.getValue(""text"", """");
                Object constraints = prop.getValue(""constraints"");
                String checked = prop.getValue(""checked"", ""false"");
                rb.setBounds(x, y, width, height);
                rb.setText(text);
                rb.setName((String) id);
                rb.addActionListener(sheet);
                rb.setSelected(checked.equalsIgnoreCase(""true""));
                if (layout == 0) sheet.getContentPane().add(rb); else sheet.getContentPane().add(rb, constraints);
            } else if (tag.equals(""checkbox"")) {
                if (prop == null) {
                    System.err.println(""checkbox without properties"");
                    return;
                }
                JCheckBox cb = new JCheckBox();
                int x = prop.getValue(""x"", 0);
                int y = prop.getValue(""y"", 0);
                int width = prop.getValue(""width"", 0);
                int height = prop.getValue(""height"", 0);
                String id = prop.getValue(""id"", """");
                String text = prop.getValue(""text"", """");
                String onmouseup = prop.getValue(""onmouseup"", """");
                Object constraints = prop.getValue(""constraints"");
                String checked = prop.getValue(""checked"", ""false"");
                cb.setBounds(x, y, width, height);
                cb.setText(text);
                cb.setName((String) id);
                cb.setSelected(checked.equalsIgnoreCase(""true""));
                if (layout == 0) sheet.getContentPane().add(cb); else sheet.getContentPane().add(cb, constraints);
            } else if (tag.equals(""image"")) {
                if (prop == null) {
                    System.err.println(""image without properties"");
                    return;
                }
                JLabel label = new JLabel();
                int x = prop.getValue(""x"", 0);
                int y = prop.getValue(""y"", 0);
                int width = prop.getValue(""width"", 0);
                int height = prop.getValue(""height"", 0);
                String src = prop.getValue(""src"", """");
                Object constraints = prop.getValue(""constraints"");
                label.setIcon(new ImageIcon(new URL(src)));
                label.setBounds(x, y, width, height);
                if (layout == 0) sheet.getContentPane().add(label); else sheet.getContentPane().add(label, constraints);
            } else if (tag.equals(""singlelineedit"")) {
                if (prop == null) {
                    System.err.println(""singlelineedit without properties"");
                    return;
                }
                String pwd = prop.getValue(""password"", """");
                JTextField sle;
                if (pwd.equalsIgnoreCase(""true"")) sle = new JPasswordField(); else sle = new JTextField();
                int x = prop.getValue(""x"", 0);
                int y = prop.getValue(""y"", 0);
                int width = prop.getValue(""width"", 0);
                int height = prop.getValue(""height"", 0);
                Object id = prop.getValue(""id"");
                String text = prop.getValue(""text"", """");
                Object constraints = prop.getValue(""constraints"");
                sle.setBounds(x, y, width, height);
                sle.setText(text);
                sle.setName((String) id);
                if (layout == 0) sheet.getContentPane().add(sle); else sheet.getContentPane().add(sle, constraints);
            } else if (tag.equals(""treeview"")) {
                if (prop == null) {
                    System.err.println(""treeview without properties"");
                    return;
                }
                treeview_root = new DefaultMutableTreeNode(""root"");
                treeview = new JTree(treeview_root);
                Object constraints = prop.getValue(""constraints"");
                sheet.getContentPane().add(new JScrollPane(treeview), constraints);
            } else if (tag.equals(""treeitem"")) {
                if (prop == null) {
                    System.err.println(""treeview.treeitem without properties"");
                    return;
                }
                String text = prop.getValue(""text"", """");
                String value = prop.getValue(""value"", """");
                DefaultMutableTreeNode node = new DefaultMutableTreeNode(text);
                treeview_root.add(node);
            } else if (tag.equals(""table"")) {
                if (prop == null) {
                    System.err.println(""table without properties"");
                    return;
                }
                String id = prop.getValue(""id"", """");
                table = new JTable();
                model = new DefaultTableModel() {

                    public boolean isCellEditable(int row, int col) {
                        return false;
                    }
                };
                table.setModel(model);
                table.setName((String) id);
                Object constraints = prop.getValue(""constraints"");
                sheet.getContentPane().add(new JScrollPane(table), constraints);
                rowNumber = 0;
                columnNumber = 0;
                headerWidths = new Vector();
            } else if (tag.equals(""header"")) {
                if (prop == null) {
                    System.err.println(""table.header without properties"");
                    return;
                }
                String text = prop.getValue(""text"", """");
                int width = prop.getValue(""width"", 0);
                headerWidths.addElement(new Integer(width));
                model.addColumn(text);
            } else if (tag.equals(""row"")) {
                rowNumber++;
                columnNumber = 0;
                model.setRowCount(rowNumber);
            } else if (tag.equals(""column"")) {
                columnNumber++;
                if (prop == null) {
                    System.err.println(""table.column without properties"");
                    return;
                }
                String value = prop.getValue(""value"", """");
                model.setValueAt(value, rowNumber - 1, columnNumber - 1);
            } else if (tag.equals(""script"")) {
                sheet.beginScript();
                String url = prop.getValue(""src"");
                if (url.length() > 0) {
                    try {
                        BufferedReader r = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
                        String buffer;
                        while (true) {
                            buffer = r.readLine();
                            if (buffer == null) break;
                            sheet.script += buffer + ""\n"";
                        }
                        r.close();
                        sheet.endScript();
                    } catch (IOException ioe) {
                        System.err.println(""[IOError] "" + ioe.getMessage());
                        System.exit(0);
                    }
                }
            } else System.err.println(""[sheet] unparsed tag: "" + tag);
        } catch (Exception e) {
            e.printStackTrace(System.err);
        }
    }
",0
22249465,2,"    public static String getWebPage(URL urlObj) {
        try {
            String content = """";
            InputStreamReader is = new InputStreamReader(urlObj.openStream());
            BufferedReader reader = new BufferedReader(is);
            String line;
            while ((line = reader.readLine()) != null) {
                content += line;
            }
            return content;
        } catch (IOException e) {
            throw new Error(""The page "" + quote(urlObj.toString()) + ""could not be retrieved."" + ""\nThis is could be caused by a number of things:"" + ""\n"" + ""\n  - the computer hosting the web page you want is down, or has returned an error"" + ""\n  - your computer does not have Internet access"" + ""\n  - the heat death of the universe has occurred, taking down all web servers with it"");
        }
    }
",0
8166767,2,"    public Object invoke(MethodInvocation invocation, int retryTimes) throws Throwable {
        retryTimes--;
        try {
            String url = getServiceUrl() + ""/"" + invocation.getMethod().getName();
            HttpPost postMethod = new HttpPost(url);
            if (invocation.getMethod().getParameterTypes().length > 0) postMethod.setEntity(new StringEntity(JsonUtils.toJson(invocation.getArguments())));
            HttpResponse rsp = HttpClientUtils.getDefaultInstance().execute(postMethod);
            StatusLine sl = rsp.getStatusLine();
            if (sl.getStatusCode() >= 300) {
                throw new RuntimeException(""Did not receive successful HTTP response: status code = "" + sl.getStatusCode() + "", status message = ["" + sl.getReasonPhrase() + ""]"");
            }
            HttpEntity entity = rsp.getEntity();
            StringBuilder sb = new StringBuilder();
            InputStream is = entity.getContent();
            BufferedReader reader = new BufferedReader(new InputStreamReader(is, ""utf-8""));
            String line;
            while ((line = reader.readLine()) != null) sb.append(line).append(""\n"");
            reader.close();
            is.close();
            String responseBody = null;
            if (sb.length() > 0) {
                sb.deleteCharAt(sb.length() - 1);
                responseBody = sb.toString();
            }
            Type t = invocation.getMethod().getGenericReturnType();
            if (t.equals(Void.class) || responseBody == null) return null;
            return JsonUtils.fromJson(responseBody, t);
        } catch (ConnectTimeoutException e) {
            if (retryTimes < 0) throw e;
            if (urlFromDiscovery) {
                String serviceUrl = discoverServiceUrl(getServiceInterface().getName());
                if (!serviceUrl.equals(getServiceUrl())) {
                    setServiceUrl(serviceUrl);
                    log.info(""relocate service url:"" + serviceUrl);
                }
            }
            return invoke(invocation, retryTimes);
        }
    }
",0
11188585,2,"    public static void initStaticStuff() {
        Enumeration<URL> urls = null;
        try {
            urls = Play.class.getClassLoader().getResources(""play.static"");
        } catch (Exception e) {
        }
        while (urls != null && urls.hasMoreElements()) {
            URL url = urls.nextElement();
            try {
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), ""utf-8""));
                String line = null;
                while ((line = reader.readLine()) != null) {
                    try {
                        Class.forName(line);
                    } catch (Exception e) {
                        System.out.println(""! Cannot init static : "" + line);
                    }
                }
            } catch (Exception ex) {
                Logger.error(ex, ""Cannot load %s"", url);
            }
        }
    }
",0
15734479,2,"    private List<String[]> retrieveData(String query) {
        List<String[]> data = new Vector<String[]>();
        query = query.replaceAll(""\\s"", ""+"");
        String q = ""http://www.uniprot.org/uniprot/?query="" + query + ""&format=tab&columns=id,protein%20names,organism"";
        try {
            URL url = new URL(q);
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = """";
            reader.readLine();
            while ((line = reader.readLine()) != null) {
                String[] st = line.split(""\t"");
                String[] d = new String[] { st[0], st[1], st[2] };
                data.add(d);
            }
            reader.close();
            if (data.size() == 0) {
                JOptionPane.showMessageDialog(this, ""No data found for query"");
            }
        } catch (MalformedURLException e) {
            System.err.println(""Query "" + q + "" caused exception: "");
            e.printStackTrace();
        } catch (Exception e) {
            System.err.println(""Query "" + q + "" caused exception: "");
            e.printStackTrace();
        }
        return data;
    }
",0
19203251,2,"    private void readArchives(final VideoArchiveSet vas) throws IOException {
        final BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String line = null;
        try {
            while ((line = in.readLine()) != null) {
                if (line.startsWith(""ARCHIVE"")) {
                    final StringTokenizer s = new StringTokenizer(line);
                    s.nextToken();
                    final Integer tapeNumber = Integer.valueOf(s.nextToken());
                    final Timecode timeCode = new Timecode(s.nextToken());
                    final VideoArchive va = new VideoArchive();
                    va.setTimeCode(timeCode);
                    va.setTapeNumber(tapeNumber);
                    vas.addVideoArchive(va);
                    archives.put(tapeNumber, va);
                }
            }
        } catch (IOException e) {
            throw e;
        } finally {
            in.close();
        }
        if (archives.size() == 0) {
            log.warn(""No lines with ARCHIVE were found in the current vif file, will try to look at another vif with same yearday, "" + ""ship and platform and try to get archives from there:"");
            String urlBase = url.getPath().toString().substring(0, url.getPath().toString().lastIndexOf(""/""));
            File vifDir = new File(urlBase);
            File[] allYeardayFiles = vifDir.listFiles();
            for (int i = 0; i < allYeardayFiles.length; i++) {
                if (allYeardayFiles[i].toString().endsWith("".vif"")) {
                    String filename = allYeardayFiles[i].toString().substring(allYeardayFiles[i].toString().lastIndexOf(""/""));
                    String fileLC = filename.toLowerCase();
                    String toLookFor = new String(new Character(vifMetadata.shipCode).toString() + new Character(vifMetadata.platformCode).toString());
                    String toLookForLC = toLookFor.toLowerCase();
                    if (fileLC.indexOf(toLookForLC) >= 0) {
                        log.warn(""Will try to read archives from file "" + allYeardayFiles[i]);
                        final BufferedReader tempIn = new BufferedReader(new FileReader(allYeardayFiles[i]));
                        String tempLine = null;
                        try {
                            while ((tempLine = tempIn.readLine()) != null) {
                                if (tempLine.startsWith(""ARCHIVE"")) {
                                    final StringTokenizer s = new StringTokenizer(tempLine);
                                    s.nextToken();
                                    final Integer tapeNumber = Integer.valueOf(s.nextToken());
                                    final Timecode timeCode = new Timecode(s.nextToken());
                                    final VideoArchive va = new VideoArchive();
                                    va.setTimeCode(timeCode);
                                    va.setTapeNumber(tapeNumber);
                                    vas.addVideoArchive(va);
                                    archives.put(tapeNumber, va);
                                }
                            }
                        } catch (IOException e) {
                            throw e;
                        } finally {
                            tempIn.close();
                        }
                    }
                }
                if (archives.size() > 0) {
                    log.warn(""Found "" + archives.size() + "" archives in that vif so will use that"");
                    break;
                }
            }
            if (archives.size() == 0) {
                log.warn(""Still no archives were found in the file. Unable to process it."");
            }
        }
    }
",0
12887881,2,"    public static byte[] request(String remoteUrl, boolean keepalive) throws Exception {
        Log.d(TAG, String.format(""started request(remote=%s)"", remoteUrl));
        Process.setThreadPriority(Process.THREAD_PRIORITY_LOWEST);
        byte[] buffer = new byte[1024];
        URL url = new URL(remoteUrl);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setAllowUserInteraction(false);
        connection.setRequestProperty(""Viewer-Only-Client"", ""1"");
        connection.setRequestProperty(""Client-Daap-Version"", ""3.10"");
        connection.setRequestProperty(""Accept-Encoding"", ""gzip, deflate"");
        if (!keepalive) {
            connection.setConnectTimeout(1200000);
            connection.setReadTimeout(1200000);
        } else {
            connection.setReadTimeout(0);
        }
        connection.connect();
        if (connection.getResponseCode() >= HttpURLConnection.HTTP_UNAUTHORIZED) throw new RequestException(""HTTP Error Response Code: "" + connection.getResponseCode(), connection.getResponseCode());
        String encoding = connection.getContentEncoding();
        InputStream inputStream = null;
        if (encoding != null && encoding.equalsIgnoreCase(""gzip"")) {
            inputStream = new GZIPInputStream(connection.getInputStream());
        } else if (encoding != null && encoding.equalsIgnoreCase(""deflate"")) {
            inputStream = new InflaterInputStream(connection.getInputStream(), new Inflater(true));
        } else {
            inputStream = connection.getInputStream();
        }
        ByteArrayOutputStream os = new ByteArrayOutputStream();
        try {
            int bytesRead;
            while ((bytesRead = inputStream.read(buffer)) != -1) {
                os.write(buffer, 0, bytesRead);
            }
        } finally {
            if (os != null) {
                os.flush();
                os.close();
            }
            if (inputStream != null) {
                inputStream.close();
            }
        }
        return os.toByteArray();
    }
",0
7044153,2,"    private static void sendExceptionToServer(String server, Throwable ex, String config, String prob) {
        try {
            StringBuilder dataSB = new StringBuilder();
            dataSB.append(URLEncoder.encode(""secret"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(""badsecurity"", ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""version"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(BuildInfo.revisionNumber, ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""os"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(System.getProperty(""os.name"") + "" "" + System.getProperty(""os.version""), ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""user"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(System.getProperty(""user.name""), ""UTF-8""));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""msg"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(ex.getMessage(), ""UTF-8""));
            ByteArrayOutputStream trace = new ByteArrayOutputStream();
            ex.printStackTrace(new PrintStream(trace));
            dataSB.append('&');
            dataSB.append(URLEncoder.encode(""trace"", ""UTF-8""));
            dataSB.append('=');
            dataSB.append(URLEncoder.encode(trace.toString(), ""UTF-8""));
            if (config != null) {
                dataSB.append('&');
                dataSB.append(URLEncoder.encode(""config"", ""UTF-8""));
                dataSB.append('=');
                dataSB.append(URLEncoder.encode(config, ""UTF-8""));
            }
            if (prob != null) {
                dataSB.append('&');
                dataSB.append(URLEncoder.encode(""problem"", ""UTF-8""));
                dataSB.append('=');
                dataSB.append(URLEncoder.encode(prob, ""UTF-8""));
            }
            URL url = new URL(errorServerURL);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(dataSB.toString());
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String response = null;
            String line = null;
            while ((line = rd.readLine()) != null) {
                if (response == null) response = line; else System.out.println(line);
            }
            wr.close();
            rd.close();
            if (response.equals(""success"")) System.out.println(""Exception sent to maRla development team""); else System.out.println(""Unable to send exception to development team: "" + response);
        } catch (IOException ex2) {
            System.out.println(""Unable to send exception to development team: "" + ex2.getMessage());
        }
    }
",0
14377058,2,"    public String process(URL url) throws IOException {
        String line, results = """";
        InputStream is = url.openStream();
        BufferedReader dis = new BufferedReader(new InputStreamReader(is));
        while ((line = dis.readLine()) != null) {
            results += line + ""\n"";
        }
        System.out.println(results);
        return results;
    }
",0
16596670,2,"    private static List lookupForImplementations(final Class clazz, final ClassLoader loader, final String[] defaultImplementations, final boolean onlyFirst, final boolean returnInstances) throws ClassNotFoundException {
        if (clazz == null) {
            throw new IllegalArgumentException(""Argument 'clazz' cannot be null!"");
        }
        ClassLoader classLoader = loader;
        if (classLoader == null) {
            classLoader = clazz.getClassLoader();
        }
        String interfaceName = clazz.getName();
        ArrayList tmp = new ArrayList();
        ArrayList toRemove = new ArrayList();
        String className = System.getProperty(interfaceName);
        if (className != null && className.trim().length() > 0) {
            tmp.add(className.trim());
        }
        Enumeration en = null;
        try {
            en = classLoader.getResources(""META-INF/services/"" + clazz.getName());
        } catch (IOException e) {
            e.printStackTrace();
        }
        while (en != null && en.hasMoreElements()) {
            URL url = (URL) en.nextElement();
            InputStream is = null;
            try {
                is = url.openStream();
                BufferedReader reader = new BufferedReader(new InputStreamReader(is, ""UTF-8""));
                String line;
                do {
                    line = reader.readLine();
                    boolean remove = false;
                    if (line != null) {
                        if (line.startsWith(""#-"")) {
                            remove = true;
                            line = line.substring(2);
                        }
                        int pos = line.indexOf('#');
                        if (pos >= 0) {
                            line = line.substring(0, pos);
                        }
                        line = line.trim();
                        if (line.length() > 0) {
                            if (remove) {
                                toRemove.add(line);
                            } else {
                                tmp.add(line);
                            }
                        }
                    }
                } while (line != null);
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                if (is != null) {
                    try {
                        is.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        if (defaultImplementations != null) {
            for (int i = 0; i < defaultImplementations.length; i++) {
                tmp.add(defaultImplementations[i].trim());
            }
        }
        if (!clazz.isInterface()) {
            int m = clazz.getModifiers();
            if (!Modifier.isAbstract(m) && Modifier.isPublic(m) && !Modifier.isStatic(m)) {
                tmp.add(interfaceName);
            }
        }
        tmp.removeAll(toRemove);
        ArrayList res = new ArrayList();
        for (Iterator it = tmp.iterator(); it.hasNext(); ) {
            className = (String) it.next();
            try {
                Class c = Class.forName(className, false, classLoader);
                if (c != null) {
                    if (clazz.isAssignableFrom(c)) {
                        if (returnInstances) {
                            Object o = null;
                            try {
                                o = c.newInstance();
                            } catch (Throwable e) {
                                e.printStackTrace();
                            }
                            if (o != null) {
                                res.add(o);
                                if (onlyFirst) {
                                    return res;
                                }
                            }
                        } else {
                            res.add(c);
                            if (onlyFirst) {
                                return res;
                            }
                        }
                    } else {
                        logger.warning(""MetaInfLookup: Class '"" + className + ""' is not a subclass of class : "" + interfaceName);
                    }
                }
            } catch (ClassNotFoundException e) {
                logger.log(Level.WARNING, ""Cannot create implementation of interface: "" + interfaceName, e);
            }
        }
        if (res.size() == 0) {
            throw new ClassNotFoundException(""Cannot find any implemnetation of class "" + interfaceName);
        }
        return res;
    }
",0
12724823,2,"    private void checkForNewVersion() {
        try {
            org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(net.xan.taskstack.TaskStackApp.class).getContext().getResourceMap(NewTaskDialog.class);
            String versionUrl = resourceMap.getString(""Application.versionFileUrl"");
            long startTime = System.currentTimeMillis();
            System.out.println(""Retrieving version file from\n"" + versionUrl);
            URL url = new URL(versionUrl);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            while ((str = in.readLine()) != null) {
                if (str.startsWith(""LastVersion"")) {
                    String remoteVersion = str.substring(str.indexOf(""="") + 1);
                    String localVersion = resourceMap.getString(""Application.version"");
                    System.out.println(""Version file found"");
                    System.out.println(""Local version: "" + localVersion);
                    System.out.println(""Remote version: "" + remoteVersion);
                    if (remoteVersion.compareTo(localVersion) > 0) {
                        askDownloadNewVersion(remoteVersion, localVersion);
                    }
                    break;
                }
            }
            long endTime = System.currentTimeMillis();
            System.out.println(""Elapsed time "" + (endTime - startTime) + ""ms"");
            in.close();
        } catch (MalformedURLException e) {
            System.err.println(e.getMessage());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",0
21970882,2,"    public void write(URL output, String model, String mainResourceClass) throws InfoUnitIOException {
        InfoUnitXMLData iur = new InfoUnitXMLData(STRUCTURE_RDF);
        rdf = iur.load(""rdf"");
        rdfResource = rdf.ft(""resource"");
        rdfParseType = rdf.ft(""parse type"");
        try {
            PrintWriter outw = new PrintWriter(new OutputStreamWriter(new FileOutputStream(output.getFile()), ""UTF-8""));
            URL urlModel = new URL(model);
            BufferedReader inr = new BufferedReader(new InputStreamReader(urlModel.openStream()));
            String finalTag = ""</"" + rdf.ft(""main"") + "">"";
            String line = inr.readLine();
            while (line != null && !line.equalsIgnoreCase(finalTag)) {
                outw.println(line);
                line = inr.readLine();
            }
            inr.close();
            InfoNode nodeType = infoRoot.path(rdf.ft(""constraint""));
            String type = null;
            if (nodeType != null) {
                type = nodeType.getValue().toString();
                try {
                    infoRoot.removeChildNode(nodeType);
                } catch (InvalidChildInfoNode error) {
                }
            } else if (mainResourceClass != null) type = mainResourceClass; else type = rdf.ft(""description"");
            outw.println(""   <"" + type + "" "" + rdf.ft(""about"") + ""=\"""" + ((infoNamespaces == null) ? infoRoot.getLabel() : infoNamespaces.convertEntity(infoRoot.getLabel().toString())) + ""\"">"");
            Set<InfoNode> nl = infoRoot.getChildren();
            writeNodeList(nl, outw, 5);
            outw.println(""   </"" + type + "">"");
            if (line != null) outw.println(finalTag);
            outw.close();
        } catch (IOException error) {
            throw new InfoUnitIOException(error.getMessage());
        }
    }
",0
20077101,2,"    public void maj(String titre, String num_version) {
        int res = 2;
        String content_xml = """";
        try {
            URL url = new URL(""http://code.google.com/feeds/p/tux-team/downloads/basic"");
            InputStreamReader ipsr = new InputStreamReader(url.openStream());
            BufferedReader br = new BufferedReader(ipsr);
            String line = null;
            StringBuffer buffer = new StringBuffer();
            while ((line = br.readLine()) != null) {
                buffer.append(line).append('\n');
            }
            br.close();
            content_xml = buffer.toString();
            res = lecture_xml(titre, num_version, content_xml);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        switch(res) {
            case 0:
                ihm.jl_maj.setText(""Pas de mises à jour disponible. ("" + num_version + "")"");
                ihm.jl_maj.setIcon(Resources.getImageIcon(""images/valide.png"", IHM_AProposDe.class));
                break;
            case 1:
                ihm.jl_maj.setText(""Une mise à jour est diponible. ("" + maj_file_version + "")"");
                ihm.jl_maj.setIcon(Resources.getImageIcon(""images/warning.png"", IHM_AProposDe.class));
                ihm.jb_maj.setVisible(true);
                break;
            default:
                ihm.jl_maj.setText(""Serveur de mise à jour non disponible."");
                ihm.jl_maj.setIcon(Resources.getImageIcon(""images/erreur.png"", IHM_AProposDe.class));
        }
    }
",0
18424153,2,"    private MimeTypes() {
        try {
            final URL url = RES.getURL(""types"");
            final InputStream is = url.openStream();
            final BufferedReader br = new BufferedReader(new InputStreamReader(is));
            String line = br.readLine();
            while (line != null) {
                line = line.trim();
                final int p = line.indexOf('#');
                if (p >= 0) {
                    line = line.substring(0, p).trim();
                }
                if (line.length() > 0) {
                    final StringTokenizer st = new StringTokenizer(line, "" \t"");
                    if (st.countTokens() > 1) {
                        final String mime = st.nextToken();
                        while (st.hasMoreTokens()) {
                            extnMap.put(st.nextToken(), mime);
                        }
                    }
                }
                line = br.readLine();
            }
            br.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        canParse.add(TEXT_HTML);
        canParse.add(TEXT_CSS);
    }
",0
20855053,2,"    public void init(ServletContext context) throws ScratchException {
        try {
            log.debug(""Attempting to load Controllers from file: "" + REGISTRY_FILENAME);
            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
            Enumeration<URL> urls = classLoader.getResources(REGISTRY_FILENAME);
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                log.debug(""Found: "" + url);
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String className = null;
                while ((className = reader.readLine()) != null) {
                    className = className.trim();
                    if (!"""".equals(className) && !className.startsWith(""#"")) {
                        log.debug(""Found class: "" + className);
                        Class<?> clazz = classLoader.loadClass(className);
                        addClass(clazz);
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            log.error(e);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
            log.error(e);
        }
    }
",0
18868986,2,"    protected boolean registerFromFile(URI providerList) {
        boolean registeredSomething = false;
        InputStream urlStream = null;
        try {
            urlStream = providerList.toURL().openStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(urlStream, ""UTF-8""));
            String provider;
            while ((provider = reader.readLine()) != null) {
                int comment = provider.indexOf('#');
                if (comment != -1) {
                    provider = provider.substring(0, comment);
                }
                provider = provider.trim();
                if (provider.length() > 0) {
                    try {
                        registeredSomething |= registerAssoc(provider);
                    } catch (Exception allElse) {
                        if (Logging.SHOW_WARNING && LOG.isLoggable(Level.WARNING)) {
                            LOG.log(Level.WARNING, ""Failed to register \'"" + provider + ""\'"", allElse);
                        }
                    }
                }
            }
        } catch (IOException ex) {
            LOG.log(Level.WARNING, ""Failed to read provider list "" + providerList, ex);
            return false;
        } finally {
            if (null != urlStream) {
                try {
                    urlStream.close();
                } catch (IOException ignored) {
                }
            }
        }
        return registeredSomething;
    }
",0
16206550,2,"    private String getJSONScoreStringFromNet(URL urladdress) {
        InputStream instream = null;
        BufferedReader read = null;
        try {
            instream = urladdress.openStream();
            read = new BufferedReader(new InputStreamReader(instream));
            String s = new String("""");
            String line = null;
            while ((line = read.readLine()) != null) {
                s = s + line;
            }
            return s;
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                read.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return null;
    }
",0
22323688,2,"    public String makeLeoNounCall(String noun) {
        String ret = """";
        StringBuffer buf = new StringBuffer();
        try {
            URL url = new URL(""http://dict.leo.org"" + noun);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), Charset.forName(""ISO8859_1"")));
            String inputLine;
            boolean display = false;
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.contains(""contentholder"")) {
                    display = true;
                }
                if (display) buf.append(inputLine);
            }
            ret = FilterFunctions.findEndTag(""<td"", buf.toString());
            sleepRandomTime();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ret;
    }
",0
23677112,2,"	public static String downloadWebpage2(String address) throws MalformedURLException, IOException {
		URL url = new URL(address);
		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		HttpURLConnection.setFollowRedirects(true);
		String encoding = conn.getContentEncoding();
		InputStream is = null;
		if(encoding != null && encoding.equalsIgnoreCase(""gzip"")) {
			is = new GZIPInputStream(conn.getInputStream());
		} else if (encoding != null && encoding.equalsIgnoreCase(""deflate"")) {
			is = new InflaterInputStream(conn.getInputStream());
		} else {
			is = conn.getInputStream();
		}
		BufferedReader br = new BufferedReader(new InputStreamReader(is));
		String line;
		String page = """";
		while((line = br.readLine()) != null) {
			page += line + ""\n"";
		}
		br.close();
		return page;
	}
",0
16460184,2,"    public static void refresh() {
        URL[] urls = Constants.Wiki2xhtml.getUpdateURLs();
        content.setLength(0);
        InputStream is = null;
        BufferedReader br = null;
        for (int i = 0; i < urls.length; i++) {
            try {
                is = urls[i].openStream();
                br = new BufferedReader(new InputStreamReader(is));
                String s;
                while ((s = br.readLine()) != null) {
                    if (s.length() == 0) continue;
                    if (s.startsWith(""--"")) break;
                    content.append(s + '\n');
                }
                is.close();
                break;
            } catch (FileNotFoundException e) {
                System.err.println(""File not found: "" + urls[i].getHost() + urls[i].getPath());
            } catch (IOException e) {
                System.err.println(""Error: "" + e.getMessage());
            }
        }
    }
",0
20926398,2,"    public static Cursor load(URL url, String descriptor) {
        if (url == null) {
            log.log(Level.WARNING, ""Trying to load a cursor with a null url."");
            return null;
        }
        String cursorFile = url.getFile();
        BufferedReader reader = null;
        int lineNumber = 0;
        try {
            DirectoryTextureLoader loader;
            URL cursorUrl;
            if (cursorFile.endsWith(cursorDescriptorFile)) {
                cursorUrl = url;
                Cursor cached = cursorCache.get(url);
                if (cached != null) return cached;
                reader = new BufferedReader(new InputStreamReader(url.openStream()));
                loader = new DirectoryTextureLoader(url, false);
            } else if (cursorFile.endsWith(cursorArchiveFile)) {
                loader = new DirectoryTextureLoader(url, true);
                if (descriptor == null) descriptor = defaultDescriptorFile;
                cursorUrl = loader.makeUrl(descriptor);
                Cursor cached = cursorCache.get(url);
                if (cached != null) return cached;
                ZipInputStream zis = new ZipInputStream(url.openStream());
                ZipEntry entry;
                boolean found = false;
                while ((entry = zis.getNextEntry()) != null) {
                    if (descriptor.equals(entry.getName())) {
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    throw new IOException(""Descriptor file \"""" + descriptor + ""\"" was not found."");
                }
                reader = new BufferedReader(new InputStreamReader(zis));
            } else {
                log.log(Level.WARNING, ""Invalid cursor fileName \""{0}\""."", cursorFile);
                return null;
            }
            Cursor cursor = new Cursor();
            cursor.url = cursorUrl;
            List<Integer> delays = new ArrayList<Integer>();
            List<String> frameFileNames = new ArrayList<String>();
            Map<String, Texture> textureCache = new HashMap<String, Texture>();
            String line;
            while ((line = reader.readLine()) != null) {
                lineNumber++;
                int commentIndex = line.indexOf(commentString);
                if (commentIndex != -1) {
                    line = line.substring(0, commentIndex);
                }
                StringTokenizer tokens = new StringTokenizer(line, delims);
                if (!tokens.hasMoreTokens()) continue;
                String prefix = tokens.nextToken();
                if (prefix.equals(hotSpotXPrefix)) {
                    cursor.hotSpotOffset.x = Integer.valueOf(tokens.nextToken());
                } else if (prefix.equals(hotSpotYPrefix)) {
                    cursor.hotSpotOffset.y = Integer.valueOf(tokens.nextToken());
                } else if (prefix.equals(timePrefix)) {
                    delays.add(Integer.valueOf(tokens.nextToken()));
                    if (tokens.nextToken().equals(imagePrefix)) {
                        String file = tokens.nextToken("""");
                        file = file.substring(file.indexOf('=') + 1);
                        file.trim();
                        frameFileNames.add(file);
                        if (textureCache.get(file) == null) {
                            textureCache.put(file, loader.loadTexture(file));
                        }
                    } else {
                        throw new NoSuchElementException();
                    }
                }
            }
            cursor.frameFileNames = frameFileNames.toArray(new String[0]);
            cursor.textureCache = textureCache;
            cursor.delays = new int[delays.size()];
            cursor.images = new Image[frameFileNames.size()];
            cursor.textures = new Texture[frameFileNames.size()];
            for (int i = 0; i < cursor.frameFileNames.length; i++) {
                cursor.textures[i] = textureCache.get(cursor.frameFileNames[i]);
                cursor.images[i] = cursor.textures[i].getImage();
                cursor.delays[i] = delays.get(i);
            }
            if (delays.size() == 1) cursor.delays = null;
            if (cursor.images.length == 0) {
                log.log(Level.WARNING, ""The cursor has no animation frames."");
                return null;
            }
            cursor.width = cursor.images[0].getWidth();
            cursor.height = cursor.images[0].getHeight();
            cursorCache.put(cursor.url, cursor);
            return cursor;
        } catch (MalformedURLException mue) {
            log.log(Level.WARNING, ""Unable to load cursor."", mue);
        } catch (IOException ioe) {
            log.log(Level.WARNING, ""Unable to load cursor."", ioe);
        } catch (NumberFormatException nfe) {
            log.log(Level.WARNING, ""Numerical error while parsing the "" + ""file \""{0}\"" at line {1}"", new Object[] { url, lineNumber });
        } catch (IndexOutOfBoundsException ioobe) {
            log.log(Level.WARNING, ""Error, \""=\"" expected in the file \""{0}\"" at line {1}"", new Object[] { url, lineNumber });
        } catch (NoSuchElementException nsee) {
            log.log(Level.WARNING, ""Error while parsing the file \""{0}\"" at line {1}"", new Object[] { url, lineNumber });
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException ioe) {
                    log.log(Level.SEVERE, ""Unable to close the steam."", ioe);
                }
            }
        }
        return null;
    }
",0
19090291,2,"    public static String extractIconPath(String siteURL) throws IOException {
        siteURL = siteURL.trim();
        if (!siteURL.startsWith(""http://"")) {
            siteURL = ""http://"" + siteURL;
        }
        URL url = new URL(siteURL);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String iconURL = null;
        String iconPath = null;
        String inputLine;
        while ((inputLine = in.readLine()) != null) {
            if (inputLine.contains(""type=\""image/x-icon\"""") || inputLine.toLowerCase().contains(""rel=\""shortcut icon\"""")) {
                String tmp = new String(inputLine);
                String[] smallLines = inputLine.replace("">"", "">\n"").split(""\n"");
                for (String smallLine : smallLines) {
                    if (smallLine.contains(""type=\""image/x-icon\"""") || smallLine.toLowerCase().contains(""rel=\""shortcut icon\"""")) {
                        tmp = smallLine;
                        break;
                    }
                }
                iconURL = tmp.replaceAll(""^.*href=\"""", """");
                iconURL = iconURL.replaceAll(""\"".*"", """");
                tmp = null;
                String originalSiteURL = new String(siteURL);
                siteURL = getHome(siteURL);
                if (iconURL.charAt(0) == '/') {
                    if (siteURL.charAt(siteURL.length() - 1) == '/') {
                        iconURL = siteURL + iconURL.substring(1);
                    } else {
                        iconURL = siteURL + iconURL;
                    }
                } else if (!iconURL.startsWith(""http://"")) {
                    if (siteURL.charAt(siteURL.length() - 1) == '/') {
                        iconURL = siteURL + iconURL;
                    } else {
                        iconURL = siteURL + ""/"" + iconURL;
                    }
                }
                siteURL = originalSiteURL;
                break;
            }
            if (inputLine.contains(""</head>"".toLowerCase())) {
                break;
            }
        }
        in.close();
        siteURL = getHome(siteURL);
        if (iconURL == null || """".equals(iconURL.trim())) {
            iconURL = ""favicon.ico"";
            if (siteURL.charAt(siteURL.length() - 1) == '/') {
                iconURL = siteURL + iconURL;
            } else {
                iconURL = siteURL + ""/"" + iconURL;
            }
        }
        try {
            String iconFileName = siteURL;
            if (iconFileName.startsWith(""http://"")) {
                iconFileName = iconFileName.substring(7);
            }
            iconFileName = iconFileName.replaceAll(""\\W"", "" "").trim().replace("" "", ""_"").concat("".ico"");
            iconPath = JReader.getConfig().getShortcutIconsDir() + File.separator + iconFileName;
            InputStream inIcon = new URL(iconURL).openStream();
            OutputStream outIcon = new FileOutputStream(iconPath);
            byte[] buf = new byte[1024];
            int len;
            while ((len = inIcon.read(buf)) > 0) {
                outIcon.write(buf, 0, len);
            }
            inIcon.close();
            outIcon.close();
        } catch (Exception e) {
        }
        return iconPath;
    }
",0
10411415,2,"    public void readData(int choice) throws IOException {
        for (i = 0; i < max; i++) for (j = 0; j < max; j++) {
            phase_x[i][j] = 0.0;
            phase_y[i][j] = 0.0;
        }
        URL url;
        InputStream is;
        InputStreamReader isr;
        if (choice == 0) {
            url = getClass().getResource(""resources/Phase_623_620_Achromat.dat"");
            is = url.openStream();
            isr = new InputStreamReader(is);
        } else {
            url = getClass().getResource(""resources/Phase_623_620_NoAchromat.dat"");
            is = url.openStream();
            isr = new InputStreamReader(is);
        }
        BufferedReader br = new BufferedReader(isr);
        s = br.readLine();
        StringTokenizer st = new StringTokenizer(s);
        i = 0;
        j = 0;
        phase_x[i][j] = 4 * Double.parseDouble(st.nextToken());
        phase_y[i][j] = 4 * Double.parseDouble(st.nextToken());
        xgridmin = phase_x[i][j];
        ygridmin = phase_y[i][j];
        temp_prev = phase_x[i][j];
        kd[i][j] = Double.parseDouble(st.nextToken());
        kfs[i][j] = Double.parseDouble(st.nextToken());
        kfl[i][j] = Double.parseDouble(st.nextToken());
        kdee[i][j] = Double.parseDouble(st.nextToken());
        kdc[i][j] = Double.parseDouble(st.nextToken());
        kfc[i][j] = Double.parseDouble(st.nextToken());
        j++;
        int k = 0;
        while ((s = br.readLine()) != null) {
            st = new StringTokenizer(s);
            temp_new = 4 * Double.parseDouble(st.nextToken());
            if (temp_new != temp_prev) {
                temp_prev = temp_new;
                i++;
                j = 0;
            }
            phase_x[i][j] = temp_new;
            phase_y[i][j] = 4 * Double.parseDouble(st.nextToken());
            kd[i][j] = Double.parseDouble(st.nextToken());
            kfs[i][j] = Double.parseDouble(st.nextToken());
            kfl[i][j] = Double.parseDouble(st.nextToken());
            kdee[i][j] = Double.parseDouble(st.nextToken());
            kdc[i][j] = Double.parseDouble(st.nextToken());
            kfc[i][j] = Double.parseDouble(st.nextToken());
            imax = i;
            jmax = j;
            j++;
            k++;
        }
        xgridmax = phase_x[i][j - 1];
        ygridmax = phase_y[i][j - 1];
    }
",0
21821404,2,"    public static String getWebPage(URL urlObj) {
        try {
            String content = """";
            InputStreamReader is = new InputStreamReader(urlObj.openStream());
            BufferedReader reader = new BufferedReader(is);
            String line;
            while ((line = reader.readLine()) != null) {
                content += line;
            }
            return content;
        } catch (IOException e) {
            throw new Error(""The page "" + dbg.quote(urlObj.toString()) + ""could not be retrieved."" + ""\nThis is could be caused by a number of things:"" + ""\n"" + ""\n  - the computer hosting the web page you want is down, or has returned an error"" + ""\n  - your computer does not have Internet access"" + ""\n  - the heat death of the universe has occurred, taking down all web servers with it"");
        }
    }
",0
12107388,2,"    private static List<CountryEntry> retrieveCountries() throws IOException {
        URL url = new URL(""http://"" + ISO_3166_HOST + ISO_3166_TXT_FILE_PATH);
        BufferedReader input = new BufferedReader(new InputStreamReader(url.openStream()));
        List<CountryEntry> countries = new LinkedList<CountryEntry>();
        boolean parsing = false;
        int trCount = 0;
        int tdCount = 0;
        CountryEntry current = new CountryEntry();
        String nextLine = input.readLine();
        while (nextLine != null) {
            if (nextLine.startsWith(""<table"")) {
                parsing = true;
            }
            if (nextLine.startsWith(""</table>"")) {
                break;
            }
            if (parsing) {
                if (nextLine.startsWith(""<tr"")) {
                    trCount++;
                } else {
                    if ((trCount > 1 && nextLine.startsWith(""<td""))) {
                        tdCount++;
                        String data = pullData(nextLine);
                        switch(tdCount) {
                            case 1:
                                current.setName(getCountryName(data));
                                break;
                            case 2:
                                current.setNumber(data);
                                break;
                            case 3:
                                current.setAlpha3(data);
                                break;
                            case 4:
                                current.setAlpha2(data);
                                break;
                            case 5:
                                countries.add(current);
                                current = new CountryEntry();
                                tdCount = 0;
                                break;
                            default:
                                String msg = ""Parsing error.  Unexpected column: ["" + data + ""]"";
                                throw new IllegalStateException(msg);
                        }
                    }
                }
            }
            nextLine = input.readLine();
        }
        input.close();
        return countries;
    }
",0
13657527,2,"    synchronized List<String> getDatasetsList(String surl) {
        if (datasetsList == null) {
            datasetsList = new HashMap<String, List<String>>();
        }
        List<String> result = datasetsList.get(surl);
        if (result == null) {
            BufferedReader reader = null;
            try {
                URL url = new URL(surl + ""?server=list"");
                reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String s = reader.readLine();
                ArrayList<String> list = new ArrayList<String>();
                while (s != null) {
                    list.add(s);
                    s = reader.readLine();
                }
                datasetsList.put(surl, list);
            } catch (IOException ex) {
                Logger.getLogger(Das2ServerDataSourceFactory.class.getName()).log(Level.SEVERE, null, ex);
                throw new RuntimeException(ex);
            } finally {
                try {
                    reader.close();
                } catch (IOException ex) {
                    Logger.getLogger(Das2ServerDataSourceFactory.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return datasetsList.get(surl);
    }
",0
21426410,2,"    public String parse(String queryText) throws ParseException {
        try {
            StringBuilder sb = new StringBuilder();
            queryText = Val.chkStr(queryText);
            if (queryText.length() > 0) {
                URL url = new URL(getUrl(queryText));
                InputStream in = url.openStream();
                BufferedReader reader = new BufferedReader(new InputStreamReader(in));
                String line = null;
                while ((line = reader.readLine()) != null) {
                    if (sb.length() > 0) {
                        sb.append(""\r\n"");
                    }
                    sb.append(line);
                }
            }
            return sb.toString();
        } catch (IOException ex) {
            throw new ParseException(""Ontology parser is unable to parse term: \"""" + queryText + ""\"" due to internal error: "" + ex.getMessage());
        }
    }
",0
13556011,2,"    public static String[] getHints(String query) {
        try {
            URL url = new URL(""http://www.ebi.ac.uk/integr8/OrganismSearch.do?action=orgNames&orgName="" + query);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            String dest = new String();
            while ((inputLine = in.readLine()) != null) dest = dest.concat(inputLine);
            in.close();
            Matcher m = taxonPattern.matcher(dest);
            ArrayList<String> strings = new ArrayList<String>();
            while (m.find()) {
                strings.add(m.group(1));
            }
            return strings.toArray(new String[] {});
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return new String[0];
    }
",0
11334468,2,"    public final int wordFrequency(String word) {
        String replWebQuery = webQuery.replaceFirst(""WORDREPLACE"", word);
        try {
            URL url = new URL(replWebQuery);
            String content = url.toString();
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.matches(nrResultsPattern)) {
                    int fr = matchedLine(inputLine);
                    if (fr >= 0) {
                        return fr;
                    }
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return 0;
    }
",0
19898737,2,"    private void updateSystem() throws IOException {
          String stringUrl=""http://code.google.com/p/senai-pe-cronos/downloads/list"";
        try {
            url = new URL(stringUrl);
        } catch (MalformedURLException ex) {
            ex.printStackTrace();
        }
        InputStream is = url.openStream();   
InputStreamReader isr = new InputStreamReader(is);   
BufferedReader br = new BufferedReader(isr);   
  
String linha = br.readLine();  
  
while (linha != null) { 
    linha = br.readLine();  
   
   if(linha.contains(""/files/updateCronos-0-"")){
   String[] s=linha.split(""-"");
   String[] v=s[4].split("".exe"");
   versao=v[0];
   println(""----""+versao);
  
  break;
}   

}
      
stringUrl=""http://senai-pe-cronos.googlecode.com/files/updateCronos-0-""+versao+"".exe"";
UpdateCronos update=new UpdateCronos();
        try {
            url = new URL(stringUrl);
        } catch (MalformedURLException ex) {
            ex.printStackTrace();
        }       
System.out.println(""versão:""+versao);
         if(Integer.parseInt(versao)>version){
              
             File f = update.gravaArquivoDeURL(url,System.getProperty(""user.dir""),String.valueOf(version),versao);
            
             
            
             if(update.isS()) {
                 Runtime.getRuntime().exec(location+""\\update.exe"");
                 System.exit(0);
         }
         }

          
    }
",0
10107377,2,"    @Deprecated
    public static Collection<SearchKeyResult> searchKey(String iText, String iKeyServer) throws Exception {
        List<SearchKeyResult> outVec = new ArrayList<SearchKeyResult>();
        String uri = iKeyServer + ""/pks/lookup?search="" + URLEncoder.encode(iText, UTF8);
        URL url = new URL(uri);
        BufferedReader input = new BufferedReader(new InputStreamReader(url.openStream()));
        Pattern regex = Pattern.compile(""pub.*?<a\\s+href\\s*=\""(.*?)\"".*?>\\s*(\\w+)\\s*</a>.*?(\\d+-\\d+-\\d+).*?<a\\s+href\\s*=\"".*?\"".*?>\\s*(.+?)\\s*</a>"", Pattern.CANON_EQ);
        String line;
        while ((line = input.readLine()) != null) {
            Matcher regexMatcher = regex.matcher(line);
            while (regexMatcher.find()) {
                String id = regexMatcher.group(2);
                String downUrl = iKeyServer + regexMatcher.group(1);
                String downDate = regexMatcher.group(3);
                String name = decodeHTML(regexMatcher.group(4));
                outVec.add(new SearchKeyResult(id, name, downDate, downUrl));
            }
        }
        IOUtils.closeQuietly(input);
        return outVec;
    }
",0
5976426,2,"    public List<String> query(String query) throws IOException {
        List<String> list = new LinkedList<String>();
        query = URLEncoder.encode(query, ""UTF-8"");
        String queryurl = baseurl + ""?type=tuples&lang=itql&format=csv&query="" + query;
        URL url = new URL(queryurl);
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
        String line = reader.readLine();
        while (line != null) {
            list.add(line);
            line = reader.readLine();
        }
        reader.close();
        return list;
    }
",0
22771106,2,"    private void triggerBuild(Properties props, String project, int rev) throws IOException {
        boolean doBld = Boolean.parseBoolean(props.getProperty(project + "".bld""));
        String url = props.getProperty(project + "".url"");
        if (!doBld || project == null || project.length() == 0) {
            System.out.println(""BuildLauncher: Not configured to build '"" + project + ""'"");
            return;
        } else if (url == null) {
            throw new IOException(""Tried to launch build for project '"" + project + ""' but "" + project + "".url property is not defined!"");
        }
        SimpleDateFormat fmt = new SimpleDateFormat(""yyyy/MM/dd HH:mm:ss.SSS"");
        System.out.println(fmt.format(new Date()) + "": Triggering a build via: "" + url);
        BufferedReader r = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
        while (r.readLine() != null) ;
        System.out.println(fmt.format(new Date()) + "": Build triggered!"");
        LATEST_BUILD.put(project, rev);
        r.close();
        System.out.println(fmt.format(new Date()) + "": triggerBuild() done!"");
    }
",0
15171197,2,"    private static Pattern getBotPattern() {
        StringBuilder sb = new StringBuilder();
        try {
            Enumeration<URL> urls = AbstractPustefixRequestHandler.class.getClassLoader().getResources(CONFIG);
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                InputStream in = url.openStream();
                BufferedReader reader = new BufferedReader(new InputStreamReader(in, ""utf8""));
                String line;
                while ((line = reader.readLine()) != null) {
                    line = line.trim();
                    if (!line.startsWith(""#"") && !line.equals("""")) {
                        if (sb.length() > 0) sb.append(""|"");
                        sb.append(""("").append(line).append("")"");
                    }
                }
                in.close();
            }
        } catch (IOException e) {
            throw new RuntimeException(""Error reading bot user-agent configuration"", e);
        }
        return Pattern.compile(sb.toString());
    }
",0
7005222,2,"    private void downloadResults() {
        GregorianCalendar cal = new GregorianCalendar();
        cal.setTimeInMillis(System.currentTimeMillis());
        String filename = String.format(""%s%sresult_%tF.xml"", vysledky, File.separator, cal);
        String EOL = """" + (char) 0x0D + (char) 0x0A;
        try {
            LogManager.getInstance().log(""Stahuji soubor result.xml a ukl�d�m do vysledky ..."");
            File f = new File(filename);
            FileWriter fw = new FileWriter(f);
            URL url = new URL(Konfigurace.getInstance().getURLvysledkuValidatoru());
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = """";
            while ((line = br.readLine()) != null) {
                fw.write(line + EOL);
            }
            fw.write(""</vysledky>"" + EOL);
            br.close();
            fw.close();
            LogManager.getInstance().changeLog(""Stahuji soubor result.xml a ukl�d�m do slo�ky vysledky ... OK"");
        } catch (IOException e) {
            e.printStackTrace();
            LogManager.getInstance().changeLog(""Stahuji soubor result.xml a ukl�d�m do slo�ky vysledky ... X"");
        }
    }
",0
13529502,2,"    private Component createLicensePane(String propertyKey) {
        if (licesePane == null) {
            String licenseText = """";
            BufferedReader in = null;
            try {
                String filename = ""conf/LICENSE.txt"";
                java.net.URL url = FileUtil.toURL(filename);
                in = new BufferedReader(new InputStreamReader(url.openStream()));
                String line = null;
                while (true) {
                    line = in.readLine();
                    if (line == null) break;
                    licenseText += line;
                }
            } catch (Exception e) {
                log.error(e);
            } finally {
                if (in != null) {
                    try {
                        in.close();
                    } catch (Exception e) {
                    }
                }
            }
            licenseText = StringUtils.replace(licenseText, ""<br>"", ""\n"");
            licenseText = StringUtils.replace(licenseText, ""<p>"", ""\n\n"");
            StyleContext context = new StyleContext();
            StyledDocument document = new DefaultStyledDocument(context);
            Style style = context.getStyle(StyleContext.DEFAULT_STYLE);
            StyleConstants.setAlignment(style, StyleConstants.ALIGN_CENTER);
            StyleConstants.setSpaceAbove(style, 4);
            StyleConstants.setSpaceBelow(style, 4);
            StyleConstants.setFontSize(style, 14);
            try {
                document.insertString(document.getLength(), licenseText, style);
            } catch (BadLocationException e) {
                log.error(e);
            }
            JTextPane textPane = new JTextPane(document);
            textPane.setEditable(false);
            licesePane = new JScrollPane(textPane);
        }
        return licesePane;
    }
",0
19549575,2,"    protected InputStream callApiGet(String apiUrl, int expected) {
        try {
            URL url = new URL(apiUrl);
            HttpURLConnection request = (HttpURLConnection) url.openConnection();
            if (ApplicationConstants.CONNECT_TIMEOUT > -1) {
                request.setConnectTimeout(ApplicationConstants.CONNECT_TIMEOUT);
            }
            if (ApplicationConstants.READ_TIMEOUT > -1) {
                request.setReadTimeout(ApplicationConstants.READ_TIMEOUT);
            }
            for (String headerName : requestHeaders.keySet()) {
                request.setRequestProperty(headerName, requestHeaders.get(headerName));
            }
            request.connect();
            if (request.getResponseCode() != expected) {
                throw new BingMapsException(convertStreamToString(request.getErrorStream()));
            } else {
                return getWrappedInputStream(request.getInputStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding()));
            }
        } catch (IOException e) {
            throw new BingMapsException(e);
        }
    }
",0
14053971,2,"    private static String fetchUrl(String url, boolean keepLineEnds) throws IOException, MalformedURLException {
        URLConnection destConnection = (new URL(url)).openConnection();
        BufferedReader br;
        String inputLine;
        StringBuffer doc = new StringBuffer();
        String contentEncoding;
        destConnection.setRequestProperty(""Accept-Encoding"", ""gzip"");
        if (proxyAuth != null) destConnection.setRequestProperty(""Proxy-Authorization"", proxyAuth);
        destConnection.connect();
        contentEncoding = destConnection.getContentEncoding();
        if ((contentEncoding != null) && contentEncoding.equals(""gzip"")) {
            br = new BufferedReader(new InputStreamReader(new GZIPInputStream(destConnection.getInputStream())));
        } else {
            br = new BufferedReader(new InputStreamReader(destConnection.getInputStream()));
        }
        while ((inputLine = br.readLine()) != null) {
            if (keepLineEnds) doc.append(inputLine + ""\n""); else doc.append(inputLine);
        }
        br.close();
        return doc.toString();
    }
",0
10192341,2,"    @SuppressWarnings(""unchecked"")
    public static void main(String[] args) throws Exception {
        PositionParser pp;
        Database.init(""XIDResult"");
        pp = new PositionParser(""01:33:50.904+30:39:35.79"");
        String url = ""http://simbad.u-strasbg.fr/simbad/sim-script?submit=submit+script&script="";
        String script = ""format object \""%IDLIST[%-30*]|-%COO(A)|%COO(D)|%OTYPELIST(S)\""\n"";
        String tmp = """";
        script += pp.getPosition() + "" radius=1m"";
        url += URLEncoder.encode(script, ""ISO-8859-1"");
        URL simurl = new URL(url);
        BufferedReader in = new BufferedReader(new InputStreamReader(simurl.openStream()));
        String boeuf;
        boolean data_found = false;
        JSONObject retour = new JSONObject();
        JSONArray dataarray = new JSONArray();
        JSONArray colarray = new JSONArray();
        JSONObject jsloc = new JSONObject();
        jsloc.put(""sTitle"", ""ID"");
        colarray.add(jsloc);
        jsloc = new JSONObject();
        jsloc.put(""sTitle"", ""Position"");
        colarray.add(jsloc);
        jsloc = new JSONObject();
        jsloc.put(""sTitle"", ""Type"");
        colarray.add(jsloc);
        retour.put(""aoColumns"", colarray);
        int datasize = 0;
        while ((boeuf = in.readLine()) != null) {
            if (data_found) {
                String[] fields = boeuf.trim().split(""\\|"", -1);
                int pos = fields.length - 1;
                if (pos >= 3) {
                    String type = fields[pos];
                    pos--;
                    String dec = fields[pos];
                    pos--;
                    String ra = fields[pos];
                    String id = """";
                    for (int i = 0; i < pos; i++) {
                        id += fields[i];
                        if (i < (pos - 1)) {
                            id += ""|"";
                        }
                    }
                    if (id.length() <= 30) {
                        JSONArray darray = new JSONArray();
                        darray.add(id.trim());
                        darray.add(ra + "" "" + dec);
                        darray.add(type.trim());
                        dataarray.add(darray);
                        datasize++;
                    }
                }
            } else if (boeuf.startsWith(""::data"")) {
                data_found = true;
            }
        }
        retour.put(""aaData"", dataarray);
        retour.put(""iTotalRecords"", datasize);
        retour.put(""iTotalDisplayRecords"", datasize);
        System.out.println(retour.toJSONString());
        in.close();
    }
",0
22932987,2,"    protected String readContent(URL url, int width) {
        StringBuffer content = new StringBuffer("""");
        String line = """";
        try {
            BufferedReader f = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((line = f.readLine()) != null) content.append(line + ""\n"");
            f.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (width >= 0) {
            String width_old = ""width=\""xxx\"""";
            String width_new = ""width=\"""" + width + ""\"""";
            int v0 = content.indexOf(width_old);
            int v1 = v0 + width_old.length();
            content.replace(v0, v1, width_new);
        }
        return content.toString();
    }
",0
20275058,2,"    protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException {
        if (responseBufferSize > 0) resp.setBufferSize(responseBufferSize);
        String pathinfo = req.getPathInfo();
        if (pathinfo == null) {
            String urlstring = req.getParameter(REMOTE_URL);
            if (urlstring == null) {
                resp.sendError(HttpServletResponse.SC_BAD_REQUEST, ResourceBundle.getBundle(MESSAGES, req.getLocale(), new UTF8ResourceBundleControl()).getString(""error.nourl""));
                return;
            }
            boolean allowCookieForwarding = ""true"".equals(req.getParameter(ALLOW_COOKIE_FORWARDING));
            boolean allowFormDataForwarding = ""true"".equals(req.getParameter(ALLOW_FORM_DATA_FORWARDING));
            String target = new JGlossURLRewriter(req.getContextPath() + req.getServletPath(), new URL(HttpUtils.getRequestURL(req).toString()), null, allowCookieForwarding, allowFormDataForwarding).rewrite(urlstring, true);
            resp.sendRedirect(target);
            return;
        }
        Set connectionAllowedProtocols;
        if (req.isSecure()) connectionAllowedProtocols = secureAllowedProtocols; else connectionAllowedProtocols = allowedProtocols;
        Object[] oa = JGlossURLRewriter.parseEncodedPath(pathinfo);
        if (oa == null) {
            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale(), new UTF8ResourceBundleControl()).getString(""error.malformedrequest""), new Object[] { pathinfo }));
            return;
        }
        boolean allowCookieForwarding = ((Boolean) oa[0]).booleanValue();
        boolean allowFormDataForwarding = ((Boolean) oa[1]).booleanValue();
        String urlstring = (String) oa[2];
        getServletContext().log(""received request for "" + urlstring);
        if (urlstring.toLowerCase().indexOf(req.getServletPath().toLowerCase()) != -1) {
            resp.sendError(HttpServletResponse.SC_FORBIDDEN, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale()).getString(""error.addressnotallowed""), new Object[] { urlstring }));
            return;
        }
        if (urlstring.indexOf(':') == -1) {
            if (req.isSecure()) {
                if (secureAllowedProtocols.contains(""https"")) urlstring = ""https://"" + urlstring;
            } else {
                if (allowedProtocols.contains(""http"")) urlstring = ""http://"" + urlstring;
            }
        }
        URL url;
        try {
            url = new URL(urlstring);
        } catch (MalformedURLException ex) {
            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale()).getString(""error.malformedurl""), new Object[] { urlstring }));
            return;
        }
        String protocol = url.getProtocol();
        if (!connectionAllowedProtocols.contains(protocol)) {
            resp.sendError(HttpServletResponse.SC_FORBIDDEN, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale()).getString(""error.protocolnotallowed""), new Object[] { protocol }));
            getServletContext().log(""protocol not allowed accessing "" + url.toString());
            return;
        }
        boolean remoteIsHttp = protocol.equals(""http"") || protocol.equals(""https"");
        boolean forwardCookies = remoteIsHttp && enableCookieForwarding && allowCookieForwarding;
        boolean forwardFormData = remoteIsHttp && enableFormDataForwarding && allowFormDataForwarding && (enableFormDataSecureInsecureForwarding || !req.isSecure() || url.getProtocol().equals(""https""));
        if (forwardFormData) {
            String query = req.getQueryString();
            if (query != null && query.length() > 0) {
                if (url.getQuery() == null || url.getQuery().length() == 0) url = new URL(url.toExternalForm() + ""?"" + query); else url = new URL(url.toExternalForm() + ""&"" + query);
            }
        }
        JGlossURLRewriter rewriter = new JGlossURLRewriter(new URL(req.getScheme(), req.getServerName(), req.getServerPort(), req.getContextPath() + req.getServletPath()).toExternalForm(), url, connectionAllowedProtocols, allowCookieForwarding, allowFormDataForwarding);
        URLConnection connection = url.openConnection();
        if (forwardFormData && post && remoteIsHttp) {
            getServletContext().log(""using POST"");
            try {
                ((HttpURLConnection) connection).setRequestMethod(""POST"");
            } catch (ClassCastException ex) {
                getServletContext().log(""failed to set method POST: "" + ex.getMessage());
            }
            connection.setDoInput(true);
            connection.setDoOutput(true);
        }
        String acceptEncoding = buildAcceptEncoding(req.getHeader(""accept-encoding""));
        getServletContext().log(""accept-encoding: "" + acceptEncoding);
        if (acceptEncoding != null) connection.setRequestProperty(""Accept-Encoding"", acceptEncoding);
        forwardRequestHeaders(connection, req);
        if (forwardCookies && (enableCookieSecureInsecureForwarding || !req.isSecure() || url.getProtocol().equals(""https""))) CookieTools.addRequestCookies(connection, req.getCookies(), getServletContext());
        try {
            connection.connect();
        } catch (UnknownHostException ex) {
            resp.sendError(HttpServletResponse.SC_BAD_GATEWAY, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale()).getString(""error.unknownhost""), new Object[] { url.toExternalForm(), url.getHost() }));
            return;
        } catch (IOException ex) {
            resp.sendError(HttpServletResponse.SC_BAD_GATEWAY, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale()).getString(""error.connect""), new Object[] { url.toExternalForm(), ex.getClass().getName(), ex.getMessage() }));
            return;
        }
        if (forwardFormData && post && remoteIsHttp) {
            InputStream is = req.getInputStream();
            OutputStream os = connection.getOutputStream();
            byte[] buf = new byte[512];
            int len;
            while ((len = is.read(buf)) != -1) os.write(buf, 0, len);
            is.close();
            os.close();
        }
        forwardResponseHeaders(connection, req, resp, rewriter);
        if (forwardCookies && (enableCookieSecureInsecureForwarding || req.isSecure() || !url.getProtocol().equals(""https""))) CookieTools.addResponseCookies(connection, resp, req.getServerName(), req.getContextPath() + req.getServletPath(), req.isSecure(), getServletContext());
        if (remoteIsHttp) {
            try {
                int response = ((HttpURLConnection) connection).getResponseCode();
                getServletContext().log(""response code "" + response);
                resp.setStatus(response);
                if (response == 304) return;
            } catch (ClassCastException ex) {
                getServletContext().log(""failed to read response code: "" + ex.getMessage());
            }
        }
        String type = connection.getContentType();
        getServletContext().log(""content type "" + type + "" url "" + connection.getURL().toString());
        boolean supported = false;
        if (type != null) {
            for (int i = 0; i < rewrittenContentTypes.length; i++) if (type.startsWith(rewrittenContentTypes[i])) {
                supported = true;
                break;
            }
        }
        if (supported) {
            String encoding = connection.getContentEncoding();
            supported = encoding == null || encoding.endsWith(""gzip"") || encoding.endsWith(""deflate"") || encoding.equals(""identity"");
        }
        if (supported) rewrite(connection, req, resp, rewriter); else tunnel(connection, req, resp);
    }
",0
17542340,2,"    public GEItem lookup(final int itemID) {
        try {
            URL url = new URL(GrandExchange.HOST + GrandExchange.GET + itemID);
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
            String input;
            boolean exists = false;
            int i = 0;
            double[] values = new double[4];
            String name = """", examine = """";
            while ((input = br.readLine()) != null) {
                if (input.contains(""<div class=\""brown_box main_ge_page"") && !exists) {
                    if (!input.contains(""vertically_spaced"")) {
                        return null;
                    }
                    exists = true;
                    br.readLine();
                    br.readLine();
                    name = br.readLine();
                } else if (input.contains(""<img id=\""item_image\"" src=\"""")) {
                    examine = br.readLine();
                } else if (input.matches(""(?i).+ (price|days):</b> .+"")) {
                    values[i] = parse(input);
                    i++;
                } else if (input.matches(""<div id=\""legend\"">"")) break;
            }
            return new GEItem(name, examine, itemID, values);
        } catch (IOException ignore) {
        }
        return null;
    }
",0
18873051,2,"    public static void loadPages() throws IOException {
        ClassLoader ldr = Thread.currentThread().getContextClassLoader();
        Collection<Class<? extends BasePage>> pages = new ArrayList<Class<? extends BasePage>>();
        Enumeration<URL> e = ldr.getResources(""META-INF/services/"" + Page.class.getName());
        while (e.hasMoreElements()) {
            URL url = e.nextElement();
            InputStream is = url.openStream();
            try {
                BufferedReader r = new BufferedReader(new InputStreamReader(is, ""UTF-8""));
                while (true) {
                    String line = r.readLine();
                    if (line == null) break;
                    int comment = line.indexOf('#');
                    if (comment >= 0) line = line.substring(0, comment);
                    String name = line.trim();
                    if (name.length() == 0) continue;
                    Class<?> clz = Class.forName(name, true, ldr);
                    if (BasePage.class.isAssignableFrom(clz)) {
                        pages.add(clz.asSubclass(BasePage.class));
                    }
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            } finally {
                try {
                    is.close();
                } catch (Exception ex) {
                }
            }
        }
        pageTypes = pages;
    }
",0
23010293,2,"    public static String getTextFromUrl(final String url) throws IOException {
        final String lineSeparator = System.getProperty(""line.separator"");
        InputStreamReader inputStreamReader = null;
        BufferedReader bufferedReader = null;
        try {
            final StringBuilder result = new StringBuilder();
            inputStreamReader = new InputStreamReader(new URL(url).openStream());
            bufferedReader = new BufferedReader(inputStreamReader);
            String line;
            while ((line = bufferedReader.readLine()) != null) {
                result.append(line).append(lineSeparator);
            }
            return result.toString();
        } finally {
            InputOutputUtil.close(bufferedReader, inputStreamReader);
        }
    }
",0
19246986,2,"    private List<String> readDescriptor(URL url) {
        BufferedReader reader = null;
        try {
            reader = new BufferedReader(new InputStreamReader(url.openStream()));
            List<String> lines = new ArrayList<String>();
            String line = reader.readLine();
            while (line != null) {
                line = line.trim();
                if (line.length() > 0 && !line.startsWith(""#"")) lines.add(line);
                line = reader.readLine();
            }
            return lines;
        } catch (IOException e) {
            throw new ExtensionException(""Failed to read extension descriptor '%s'"", e).withArgs(url);
        } finally {
            IoUtil.closeQuietly(reader);
        }
    }
",0
22442270,2,"            @Override
            public void handledRun() throws Throwable {
                try {
                    URL url = new URL(ONLINE_CLIENT_DATA + ""gamedata.xml"");
                    BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
                    int lastversion = 0;
                    String readHeader1 = br.readLine();
                    String readHeader2 = br.readLine();
                    String[] parts = readHeader2.split("" "");
                    lastversion = new Integer(parts[1]);
                    GameDatabase.loadVersion();
                    if (GameDatabase.version < lastversion) {
                        Logger.log(LogTypes.LOG, ""Downloading new gamedata"");
                        BufferedOutputStream bo = null;
                        File destfile = new File(GameDatabase.dataFilePath);
                        if (!destfile.createNewFile()) {
                            destfile.delete();
                            destfile.createNewFile();
                        }
                        bo = new BufferedOutputStream(new FileOutputStream(destfile));
                        bo.write((readHeader1 + ""\n"").getBytes());
                        bo.write((readHeader2 + ""\n"").getBytes());
                        int readedbyte;
                        while ((readedbyte = br.read()) != -1) {
                            bo.write(readedbyte);
                        }
                        bo.flush();
                        try {
                            br.close();
                            bo.close();
                        } catch (Exception ex) {
                            Logger.log(ex);
                        }
                    }
                } catch (java.net.UnknownHostException unknownHost) {
                    Logger.log(""Sourceforge is down, cannot update gamedata"");
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(FrameOrganizer.getClientFrame(), ""The gamedata is outdated, but Coopnet couldn't update it!"", ""Gamedata outdated"", JOptionPane.INFORMATION_MESSAGE);
                    throw e;
                } finally {
                    GameDatabase.loadVersion();
                    GameDatabase.load("""", GameDatabase.dataFilePath);
                    GameDatabase.detectGames();
                }
            }
",0
13383602,2,"    private String getClassname(Bundle bundle) {
        URL urlEntry = bundle.getEntry(""jdbcBundleInfo.xml"");
        InputStream in = null;
        try {
            in = urlEntry.openStream();
            try {
                StringBuilder sb = new StringBuilder();
                BufferedReader reader = new BufferedReader(new InputStreamReader(in));
                String line;
                while ((line = reader.readLine()) != null) {
                    if (!line.startsWith(""<!DOCTYPE"")) {
                        sb.append(line);
                    }
                }
                SAXBuilder builder = new SAXBuilder(false);
                Document doc = builder.build(new StringReader(sb.toString()));
                Element eRoot = doc.getRootElement();
                if (""jdbcBundleInfo"".equals(eRoot.getName())) {
                    Attribute atri = eRoot.getAttribute(""className"");
                    if (atri != null) {
                        return atri.getValue();
                    }
                }
            } catch (JDOMException e) {
            }
        } catch (IOException e) {
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                }
            }
        }
        return null;
    }
",0
22221629,2,"    public static List<ReactomeBean> getUrlData(URL url) throws IOException {
        List<ReactomeBean> beans = new ArrayList<ReactomeBean>(256);
        log.debug(""Retreiving content for: "" + url);
        StringBuffer content = new StringBuffer(4096);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String str;
        while ((str = in.readLine()) != null) {
            if (str.startsWith(""#"")) {
                continue;
            }
            StringTokenizer stringTokenizer = new StringTokenizer(str, ""\t"");
            String InteractionAc = stringTokenizer.nextToken();
            String reactomeId = stringTokenizer.nextToken();
            ReactomeBean reactomeBean = new ReactomeBean();
            reactomeBean.setReactomeID(reactomeId);
            reactomeBean.setInteractionAC(InteractionAc);
            beans.add(reactomeBean);
        }
        in.close();
        return beans;
    }
",0
19276022,2,"    public DataSet parse() throws SnifflibDatatypeException {
        NumberFormat numformat = NumberFormat.getInstance();
        if (this.headers.size() != this.types.size()) {
            throw new SnifflibDatatypeException(""Different number of headers ("" + this.headers.size() + "") and types("" + this.types.size() + "")."");
        }
        DataSet out = null;
        if (!this.dryrun) {
            out = new DataSet();
        }
        BufferedReader r = null;
        StreamTokenizer tokenizer = null;
        try {
            if (this.isURL) {
                if (this.url2goto == null) {
                    return (null);
                }
                DataInputStream in = null;
                try {
                    in = new DataInputStream(this.url2goto.openStream());
                    System.out.println(""READY TO READ FROM URL:"" + url2goto);
                    r = new BufferedReader(new InputStreamReader(in));
                } catch (Exception err) {
                    throw new RuntimeException(""Problem reading from URL "" + this.url2goto + ""."", err);
                }
            } else {
                if (this.file == null) {
                    throw new RuntimeException(""Data file to be parsed can not be null."");
                }
                if (!this.file.exists()) {
                    throw new RuntimeException(""The file "" + this.file + "" does not exist."");
                }
                r = new BufferedReader(new FileReader(this.file));
            }
            if (this.ignorePreHeaderLines > 0) {
                String strLine;
                int k = 0;
                while ((k < this.ignorePreHeaderLines) && ((strLine = r.readLine()) != null)) {
                    k++;
                }
            }
            tokenizer = new StreamTokenizer(r);
            tokenizer.resetSyntax();
            tokenizer.eolIsSignificant(true);
            tokenizer.parseNumbers();
            if (this.delimiter.equals(""\\t"")) {
                tokenizer.whitespaceChars('\t', '\t');
            }
            if (this.delimiter.equals("","")) {
                tokenizer.whitespaceChars(',', ',');
            }
            tokenizer.quoteChar('""');
            tokenizer.whitespaceChars(' ', ' ');
            boolean readingHeaders = true;
            boolean readingInitialValues = false;
            boolean readingData = false;
            boolean readingScientificNotation = false;
            if (this.headers.size() > 0) {
                readingHeaders = false;
                readingInitialValues = true;
            }
            if (this.types.size() > 0) {
                readingInitialValues = false;
                Class targetclass;
                for (int j = 0; j < this.types.size(); j++) {
                    targetclass = (Class) this.types.get(j);
                    try {
                        this.constructors.add(targetclass.getConstructor(String.class));
                    } catch (java.lang.NoSuchMethodException err) {
                        throw new SnifflibDatatypeException(""Could not find appropriate constructor for "" + targetclass + "". "" + err.getMessage());
                    }
                }
                readingData = true;
            }
            int currentColumn = 0;
            int currentRow = 0;
            this.rowcount = 0;
            boolean advanceField = true;
            while (true) {
                tokenizer.nextToken();
                switch(tokenizer.ttype) {
                    case StreamTokenizer.TT_WORD:
                        {
                            if (readingScientificNotation) {
                                throw new RuntimeException(""Problem reading scientific notation at row "" + currentRow + "" column "" + currentColumn + ""."");
                            }
                            advanceField = true;
                            if (readingHeaders) {
                                this.headers.add(tokenizer.sval);
                            } else {
                                if (readingInitialValues) {
                                    this.types.add(String.class);
                                }
                                if (!this.dryrun) {
                                    if (out.getColumnCount() <= currentColumn) {
                                        out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));
                                    }
                                }
                                try {
                                    Constructor construct;
                                    if (currentColumn < this.constructors.size()) {
                                        construct = (Constructor) this.constructors.get(currentColumn);
                                    } else {
                                        Class targetclass = (Class) this.types.get(currentColumn);
                                        construct = targetclass.getConstructor(String.class);
                                        this.constructors.add(construct);
                                    }
                                    try {
                                        try {
                                            try {
                                                if (!this.dryrun) {
                                                    out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn);
                                                } else if (this.findingTargetValue) {
                                                    if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {
                                                        this.targetValue = construct.newInstance((String) tokenizer.sval);
                                                        r.close();
                                                        return (null);
                                                    }
                                                }
                                            } catch (java.lang.reflect.InvocationTargetException err) {
                                                throw new SnifflibDatatypeException(""Problem constructing 1"" + err.getMessage());
                                            }
                                        } catch (java.lang.IllegalAccessException err) {
                                            throw new SnifflibDatatypeException(""Problem constructing 2"" + err.getMessage());
                                        }
                                    } catch (java.lang.InstantiationException err) {
                                        throw new SnifflibDatatypeException(""Problem constructing 3"" + err.getMessage());
                                    }
                                } catch (java.lang.NoSuchMethodException err) {
                                    throw new SnifflibDatatypeException(""Problem constructing 4"" + err.getMessage());
                                }
                            }
                            break;
                        }
                    case StreamTokenizer.TT_NUMBER:
                        {
                            advanceField = true;
                            if (readingHeaders) {
                                throw new SnifflibDatatypeException(""Expecting string header at row="" + currentRow + "", column="" + currentColumn + ""."");
                            } else {
                                if (readingInitialValues) {
                                    this.types.add(Double.class);
                                }
                                if (!this.dryrun) {
                                    if (out.getColumnCount() <= currentColumn) {
                                        out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));
                                    }
                                }
                                try {
                                    Constructor construct;
                                    if (currentColumn < this.constructors.size()) {
                                        construct = (Constructor) this.constructors.get(currentColumn);
                                    } else {
                                        Class targetclass = (Class) this.types.get(currentColumn);
                                        construct = targetclass.getConstructor(double.class);
                                        this.constructors.add(construct);
                                    }
                                    if (readingScientificNotation) {
                                        Double val = this.scientificNumber;
                                        if (!this.dryrun) {
                                            try {
                                                out.setValueAt(new Double(val.doubleValue() * tokenizer.nval), currentRow, currentColumn);
                                            } catch (Exception err) {
                                                throw new SnifflibDatatypeException(""Problem constructing "" + construct.getDeclaringClass() + ""at row "" + currentRow + "" column "" + currentColumn + ""."", err);
                                            }
                                        } else if (this.findingTargetValue) {
                                            if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {
                                                Double NVAL = new Double(tokenizer.nval);
                                                try {
                                                    this.targetValue = numformat.parse(val + ""E"" + NVAL);
                                                } catch (Exception err) {
                                                    throw new RuntimeException(""Problem parsing scientific notation at row="" + currentRow + "" col="" + currentColumn + ""."");
                                                }
                                                tokenizer.nextToken();
                                                if (tokenizer.ttype != 'e') {
                                                    r.close();
                                                    return (null);
                                                } else {
                                                    tokenizer.pushBack();
                                                }
                                            }
                                        }
                                        readingScientificNotation = false;
                                    } else {
                                        try {
                                            this.scientificNumber = new Double(tokenizer.nval);
                                            if (!this.dryrun) {
                                                out.setValueAt(this.scientificNumber, currentRow, currentColumn);
                                            } else if (this.findingTargetValue) {
                                                if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {
                                                    this.targetValue = this.scientificNumber;
                                                    r.close();
                                                    return (null);
                                                }
                                            }
                                        } catch (Exception err) {
                                            throw new SnifflibDatatypeException(""Problem constructing "" + construct.getDeclaringClass() + ""at row "" + currentRow + "" column "" + currentColumn + ""."", err);
                                        }
                                    }
                                } catch (java.lang.NoSuchMethodException err) {
                                    throw new SnifflibDatatypeException(""Problem constructing"" + err.getMessage());
                                }
                            }
                            break;
                        }
                    case StreamTokenizer.TT_EOL:
                        {
                            if (readingHeaders) {
                                readingHeaders = false;
                                readingInitialValues = true;
                            } else {
                                if (readingInitialValues) {
                                    readingInitialValues = false;
                                    readingData = true;
                                }
                            }
                            if (readingData) {
                                currentRow++;
                            }
                            break;
                        }
                    case StreamTokenizer.TT_EOF:
                        {
                            if (readingHeaders) {
                                throw new SnifflibDatatypeException(""End of file reached while reading headers."");
                            }
                            if (readingInitialValues) {
                                throw new SnifflibDatatypeException(""End of file reached while reading initial values."");
                            }
                            if (readingData) {
                                readingData = false;
                            }
                            break;
                        }
                    default:
                        {
                            if (tokenizer.ttype == '""') {
                                advanceField = true;
                                if (readingHeaders) {
                                    this.headers.add(tokenizer.sval);
                                } else {
                                    if (readingInitialValues) {
                                        this.types.add(String.class);
                                    }
                                    if (!this.dryrun) {
                                        if (out.getColumnCount() <= currentColumn) {
                                            out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));
                                        }
                                    }
                                    try {
                                        Constructor construct;
                                        if (currentColumn < this.constructors.size()) {
                                            construct = (Constructor) this.constructors.get(currentColumn);
                                        } else {
                                            Class targetclass = (Class) this.types.get(currentColumn);
                                            construct = targetclass.getConstructor(String.class);
                                            this.constructors.add(construct);
                                        }
                                        try {
                                            try {
                                                try {
                                                    if (!this.dryrun) {
                                                        out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn);
                                                    } else if (this.findingTargetValue) {
                                                        if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {
                                                            this.targetValue = construct.newInstance((String) tokenizer.sval);
                                                            r.close();
                                                            return (null);
                                                        }
                                                    }
                                                } catch (java.lang.reflect.InvocationTargetException err) {
                                                    throw new SnifflibDatatypeException(""Problem constructing 1 "" + err.getMessage());
                                                }
                                            } catch (java.lang.IllegalAccessException err) {
                                                throw new SnifflibDatatypeException(""Problem constructing 2 "" + err.getMessage());
                                            }
                                        } catch (java.lang.InstantiationException err) {
                                            throw new SnifflibDatatypeException(""Problem constructing 3 "" + err.getMessage());
                                        }
                                    } catch (java.lang.NoSuchMethodException err) {
                                        throw new SnifflibDatatypeException(""Problem constructing 4"" + err.getMessage());
                                    }
                                }
                            } else if (tokenizer.ttype == 'e') {
                                Class targetclass = (Class) this.types.get(currentColumn);
                                if (Number.class.isAssignableFrom(targetclass)) {
                                    currentColumn--;
                                    readingScientificNotation = true;
                                    advanceField = false;
                                }
                            } else {
                                advanceField = false;
                            }
                            break;
                        }
                }
                if (tokenizer.ttype == StreamTokenizer.TT_EOF) {
                    break;
                }
                if (advanceField) {
                    currentColumn++;
                    if (!readingHeaders) {
                        if (currentColumn >= this.headers.size()) {
                            currentColumn = 0;
                        }
                    }
                }
            }
            if (!readingHeaders) {
                this.rowcount = currentRow;
            } else {
                this.rowcount = 0;
                readingHeaders = false;
                if (this.ignorePostHeaderLines > 0) {
                    String strLine;
                    int k = 0;
                    while ((k < this.ignorePostHeaderLines) && ((strLine = r.readLine()) != null)) {
                        k++;
                    }
                }
            }
            r.close();
        } catch (java.io.IOException err) {
            throw new SnifflibDatatypeException(err.getMessage());
        }
        if (!this.dryrun) {
            for (int j = 0; j < this.headers.size(); j++) {
                out.setColumnName(j, (String) this.headers.get(j));
            }
        }
        return (out);
    }
",0
19549579,2,"    protected InputStream callApiMethod(String apiUrl, String xmlContent, String contentType, String method, int expected) {
        try {
            URL url = new URL(apiUrl);
            HttpURLConnection request = (HttpURLConnection) url.openConnection();
            if (ApplicationConstants.CONNECT_TIMEOUT > -1) {
                request.setConnectTimeout(ApplicationConstants.CONNECT_TIMEOUT);
            }
            if (ApplicationConstants.READ_TIMEOUT > -1) {
                request.setReadTimeout(ApplicationConstants.READ_TIMEOUT);
            }
            for (String headerName : requestHeaders.keySet()) {
                request.setRequestProperty(headerName, requestHeaders.get(headerName));
            }
            request.setRequestMethod(method);
            request.setDoOutput(true);
            if (contentType != null) {
                request.setRequestProperty(""Content-Type"", contentType);
            }
            if (xmlContent != null) {
                PrintStream out = new PrintStream(new BufferedOutputStream(request.getOutputStream()));
                out.print(xmlContent);
                out.flush();
                out.close();
            }
            request.connect();
            if (request.getResponseCode() != expected) {
                throw new BingMapsException(convertStreamToString(request.getErrorStream()));
            } else {
                return getWrappedInputStream(request.getInputStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding()));
            }
        } catch (IOException e) {
            throw new BingMapsException(e);
        }
    }
",0
10848568,2,"    private static void main(String mp3Path) throws IOException {
        String convPath = ""http://android.adinterest.biz/wav2mp3.php?k="";
        String uri = convPath + mp3Path;
        URL rssurl = new URL(uri);
        InputStream is = rssurl.openStream();
        BufferedReader br = new BufferedReader(new InputStreamReader(is, ""UTF-8""));
        String buf = """";
        while ((buf = br.readLine()) != null) {
        }
        is.close();
        br.close();
    }
",0
6992204,2,"    public static void executePost(String targetURL, File file, int msec) {
        URL url;
        HttpURLConnection connection = null;
        try {
            long wrCount = 0;
            long fileLen = file.length();
            log(""File length is "" + fileLen);
            log(""Sleep "" + msec + "" between each send"");
            FileInputStream fis = new FileInputStream(file);
            url = new URL(targetURL);
            connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod(""POST"");
            connection.setRequestProperty(""Content-Type"", ""text/xml"");
            connection.setRequestProperty(""Content-Length"", Long.toString(fileLen));
            connection.setUseCaches(false);
            connection.setDoInput(true);
            connection.setDoOutput(true);
            OutputStream wr = connection.getOutputStream();
            int count = 0;
            byte[] buffer = new byte[1024 * 10];
            while ((count = fis.read(buffer)) != -1) {
                wr.write(buffer, 0, count);
                wr.flush();
                wrCount += (long) count;
                log(""Progress is "" + (wrCount * 100) / fileLen + ""%"");
                Thread.sleep(msec);
            }
            wr.close();
            fis.close();
            InputStream is = connection.getInputStream();
            BufferedReader rd = new BufferedReader(new InputStreamReader(is));
            String line;
            while ((line = rd.readLine()) != null) {
                System.out.println(line);
            }
            rd.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (connection != null) {
                connection.disconnect();
            }
        }
        return;
    }
",0
5877197,2,"    public List<Mosque> getAllMosquaisFromDataBase() {
        List<Mosque> mosquais = new ArrayList<Mosque>();
        InputStream is = null;
        String result = """";
        ArrayList<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
        if (MyMapActivity.DEVELOPER_MODE) {
            nameValuePairs.add(new BasicNameValuePair(Param.LATITUDE, MyMapActivity.mLatitude + """"));
            nameValuePairs.add(new BasicNameValuePair(Param.LONGITUDE, MyMapActivity.mLongitude + """"));
        } else {
            nameValuePairs.add(new BasicNameValuePair(Param.LATITUDE, MyMapActivity.myLocation.getLatitude() + """"));
            nameValuePairs.add(new BasicNameValuePair(Param.LONGITUDE, MyMapActivity.myLocation.getLongitude() + """"));
        }
        nameValuePairs.add(new BasicNameValuePair(Param.RAYON, DataBaseQuery.rayon * Param.KM_MARGE + """"));
        try {
            HttpClient httpclient = new DefaultHttpClient();
            HttpPost httppost = new HttpPost(Param.URI_SELECT_ALL_DATA_BASE);
            httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
            HttpResponse response = httpclient.execute(httppost);
            HttpEntity entity = response.getEntity();
            is = entity.getContent();
        } catch (Exception e) {
            Log.e(""log_tag"", ""Error in http connection "" + e.toString());
        }
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(is, ""iso-8859-1""), 8);
            StringBuilder sb = new StringBuilder();
            String line = null;
            while ((line = reader.readLine()) != null) {
                sb.append(line + ""\n"");
            }
            is.close();
            result = sb.toString();
        } catch (Exception e) {
            Log.e(""log_tag"", ""Error converting result "" + e.toString());
        }
        try {
            JSONArray jArray = new JSONArray(result);
            for (int i = 0; i < jArray.length(); i++) {
                JSONObject json_data = jArray.getJSONObject(i);
                Mosque mosquai = new Mosque(json_data.getInt(Param.ID), json_data.getString(Param.NOM), json_data.getDouble(Param.LATITUDE), json_data.getDouble(Param.LONGITUDE), json_data.getString(Param.INFO), json_data.getInt(Param.HAVE_PICTURE) == 1 ? true : false, json_data.getString(Param.PICTURE));
                mosquais.add(mosquai);
            }
        } catch (JSONException e) {
            Log.e(""log_tag"", ""Error parsing data "" + e.toString());
        }
        return mosquais;
    }
",0
18284812,2,"    protected void discoverRegistryEntries() {
        DataSourceRegistry registry = this;
        try {
            ClassLoader loader = DataSetURI.class.getClassLoader();
            Enumeration<URL> urls;
            if (loader == null) {
                urls = ClassLoader.getSystemResources(""META-INF/org.virbo.datasource.DataSourceFactory.extensions"");
            } else {
                urls = loader.getResources(""META-INF/org.virbo.datasource.DataSourceFactory.extensions"");
            }
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String s = reader.readLine();
                while (s != null) {
                    s = s.trim();
                    if (s.length() > 0) {
                        String[] ss = s.split(""\\s"");
                        for (int i = 1; i < ss.length; i++) {
                            if (ss[i].contains(""."")) {
                                System.err.println(""META-INF/org.virbo.datasource.DataSourceFactory.extensions contains extension that contains period: "");
                                System.err.println(ss[0] + "" "" + ss[i] + "" in "" + url);
                                System.err.println(""This sometimes happens when extension files are concatenated, so check that all are terminated by end-of-line"");
                                System.err.println("""");
                                throw new IllegalArgumentException(""DataSourceFactory.extensions contains extension that contains period: "" + url);
                            }
                            registry.registerExtension(ss[0], ss[i], null);
                        }
                    }
                    s = reader.readLine();
                }
                reader.close();
            }
            if (loader == null) {
                urls = ClassLoader.getSystemResources(""META-INF/org.virbo.datasource.DataSourceFactory.mimeTypes"");
            } else {
                urls = loader.getResources(""META-INF/org.virbo.datasource.DataSourceFactory.mimeTypes"");
            }
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String s = reader.readLine();
                while (s != null) {
                    s = s.trim();
                    if (s.length() > 0) {
                        String[] ss = s.split(""\\s"");
                        for (int i = 1; i < ss.length; i++) {
                            registry.registerMimeType(ss[0], ss[i]);
                        }
                    }
                    s = reader.readLine();
                }
                reader.close();
            }
            if (loader == null) {
                urls = ClassLoader.getSystemResources(""META-INF/org.virbo.datasource.DataSourceFormat.extensions"");
            } else {
                urls = loader.getResources(""META-INF/org.virbo.datasource.DataSourceFormat.extensions"");
            }
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String s = reader.readLine();
                while (s != null) {
                    s = s.trim();
                    if (s.length() > 0) {
                        String[] ss = s.split(""\\s"");
                        for (int i = 1; i < ss.length; i++) {
                            if (ss[i].contains(""."")) {
                                System.err.println(""META-INF/org.virbo.datasource.DataSourceFormat.extensions contains extension that contains period: "");
                                System.err.println(ss[0] + "" "" + ss[i] + "" in "" + url);
                                System.err.println(""This sometimes happens when extension files are concatenated, so check that all are terminated by end-of-line"");
                                System.err.println("""");
                                throw new IllegalArgumentException(""DataSourceFactory.extensions contains extension that contains period: "" + url);
                            }
                            registry.registerFormatter(ss[0], ss[i]);
                        }
                    }
                    s = reader.readLine();
                }
                reader.close();
            }
            if (loader == null) {
                urls = ClassLoader.getSystemResources(""META-INF/org.virbo.datasource.DataSourceEditorPanel.extensions"");
            } else {
                urls = loader.getResources(""META-INF/org.virbo.datasource.DataSourceEditorPanel.extensions"");
            }
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String s = reader.readLine();
                while (s != null) {
                    s = s.trim();
                    if (s.length() > 0) {
                        String[] ss = s.split(""\\s"");
                        for (int i = 1; i < ss.length; i++) {
                            if (ss[i].contains(""."")) {
                                System.err.println(""META-INF/org.virbo.datasource.DataSourceEditorPanel.extensions contains extension that contains period: "");
                                System.err.println(ss[0] + "" "" + ss[i] + "" in "" + url);
                                System.err.println(""This sometimes happens when extension files are concatenated, so check that all are terminated by end-of-line"");
                                System.err.println("""");
                                throw new IllegalArgumentException(""DataSourceFactory.extensions contains extension that contains period: "" + url);
                            }
                            registry.registerEditor(ss[0], ss[i]);
                        }
                    }
                    s = reader.readLine();
                }
                reader.close();
            }
            if (loader == null) {
                urls = ClassLoader.getSystemResources(""META-INF/org.virbo.datasource.DataSourceFormatEditorPanel.extensions"");
            } else {
                urls = loader.getResources(""META-INF/org.virbo.datasource.DataSourceFormatEditorPanel.extensions"");
            }
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String s = reader.readLine();
                while (s != null) {
                    s = s.trim();
                    if (s.length() > 0) {
                        String[] ss = s.split(""\\s"");
                        for (int i = 1; i < ss.length; i++) {
                            if (ss[i].contains(""."")) {
                                System.err.println(""META-INF/org.virbo.datasource.DataSourceFormatEditorPanel.extensions contains extension that contains period: "");
                                System.err.println(ss[0] + "" "" + ss[i] + "" in "" + url);
                                System.err.println(""This sometimes happens when extension files are concatenated, so check that all are terminated by end-of-line"");
                                System.err.println("""");
                                throw new IllegalArgumentException(""DataSourceFactory.extensions contains extension that contains period: "" + url);
                            }
                            registry.registerFormatEditor(ss[0], ss[i]);
                        }
                    }
                    s = reader.readLine();
                }
                reader.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",0
18704516,2,"    public static void loadMessages(String filename, Map<String, String> map) throws FileNotFoundException, IOException {
        String line;
        URL url = CurrentLocale.class.getResource(""MessagesBundle_"" + filename + "".properties"");
        InputStreamReader isr = new InputStreamReader(url.openStream());
        BufferedReader br = new BufferedReader(isr);
        while ((line = br.readLine()) != null) {
            String[] l = line.split(""="", 2);
            map.put(l[0].trim(), l[1].trim());
        }
        br.close();
        isr.close();
    }
",0
21933390,2,"    public static List<String> getServers() throws Exception {
        List<String> servers = new ArrayList<String>();
        URL url = new URL(""http://tfast.org/en/servers.php"");
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String line = null;
        while ((line = in.readLine()) != null) {
            if (line.contains(""serv="")) {
                int i = line.indexOf(""serv="");
                servers.add(line.substring(i + 5, line.indexOf(""\"""", i)));
            }
        }
        in.close();
        return servers;
    }
",0
23292185,2,"    private List<String> readCredits() {
        URL url = SpriteStore.get().getResourceURL(""games/midhedava/client/gui/credits.txt"");
        List<String> res = new LinkedList<String>();
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = br.readLine();
            while (line != null) {
                res.add(line);
                line = br.readLine();
            }
            br.close();
        } catch (IOException e) {
            res.add(0, ""credits.txt not found"");
        }
        return res;
    }
",0
12913232,2,"    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String fullUrl = req.getRequestURL().toString();
        if (fullUrl.indexOf(ip) != -1) {
            fullUrl = fullUrl.replaceAll(ip, ""a.tbcdn.cn"");
        }
        URL url = new URL(fullUrl);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        PrintWriter out = resp.getWriter();
        String line;
        while ((line = in.readLine()) != null) {
            out.println(line);
        }
        in.close();
        out.flush();
    }
",0
20028790,2,"    private static boolean setBundleInfoName(String location, List<BundleInfo> list) {
        try {
            URL url = new URL(location);
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));
            while (true) {
                String line = br.readLine();
                if (line == null) {
                    break;
                }
                int pos1 = line.indexOf('=');
                if (pos1 < 0) {
                    continue;
                }
                String bundleSymbolicName = line.substring(0, pos1);
                String bundleName = line.substring(pos1 + 1);
                for (BundleInfo info : list) {
                    if (info.bundleSymbolicName.equals(bundleSymbolicName)) {
                        info.bundleName = bundleName;
                        break;
                    }
                }
            }
            return true;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }
",0
16550855,2,"    public String readPage(boolean ignoreComments) throws Exception {
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String inputLine;
        String html = """";
        if (ignoreComments) {
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.length() > 0) {
                    if (inputLine.substring(0, 1).compareTo(""#"") != 0) {
                        html = html + inputLine + ""\n"";
                    }
                }
            }
        } else {
            while ((inputLine = in.readLine()) != null) {
                html = html + inputLine + ""\n"";
            }
        }
        in.close();
        return html;
    }
",0
13534692,2,"    public JythonWrapperAction(AActionBO.ActionDTO dto, URL url) throws IOException {
        super(dto);
        InputStream in = url.openStream();
        InputStreamReader rin = new InputStreamReader(in);
        BufferedReader reader = new BufferedReader(rin);
        StringBuffer s = new StringBuffer();
        String str;
        while ((str = reader.readLine()) != null) {
            s.append(str);
            s.append(""\n"");
        }
        in.close();
        script = s.toString();
    }
",0
23677113,2,"	public static String downloadWebpage3(String address) throws ClientProtocolException, IOException {
		HttpClient client = HttpClientBuilder.create().build();
		HttpGet request = new HttpGet(address);
		HttpResponse response = client.execute(request);
		BufferedReader br = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
		String line;
		String page = """";
		while((line = br.readLine()) != null) {
			page += line + ""\n"";
		}
		br.close();
		return page;
	}
",0
8665321,2,"    public Vector<String> getNetworkServersIPs(String netaddress) {
        Vector<String> result = new Vector<String>();
        boolean serverline = false;
        String line;
        String[] splitline;
        try {
            URL url = new URL(netaddress);
            URLConnection connection = url.openConnection();
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            while ((line = reader.readLine()) != null) {
                if ((serverline) && line.startsWith("";"")) {
                    serverline = false;
                }
                if (serverline) {
                    splitline = line.split("":"");
                    result.add(splitline[1]);
                }
                if (line.startsWith(""!SERVERS"")) {
                    serverline = true;
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return result;
    }
",0
16870482,2,"    private void populateSessionId() throws IOException, java.net.MalformedURLException {
        String general_search_url = ""http://agricola.nal.usda.gov/cgi-bin/Pwebrecon.cgi?"" + ""DB=local&CNT=1&Search_Arg=RNAi&Search_Code=GKEY&STARTDB=AGRIDB"";
        String sidString = """", inputLine;
        BufferedReader in = new BufferedReader(new InputStreamReader((new URL(general_search_url)).openStream()));
        while ((inputLine = in.readLine()) != null) {
            if (inputLine.startsWith(""<INPUT TYPE=HIDDEN NAME=PID VALUE="")) {
                sidString = (inputLine.substring(inputLine.indexOf(""PID VALUE="") + 11, inputLine.indexOf("">"") - 1));
            }
        }
        sessionId = Integer.parseInt(sidString.trim());
    }
",0
19544698,2,"    public static void main(String args[]) {
        URL url = null;
        try {
            url = new URL(urlString);
        } catch (MalformedURLException e) {
            System.err.println(e.toString());
            System.exit(1);
        }
        try {
            InputStream ins = url.openStream();
            BufferedReader breader = new BufferedReader(new InputStreamReader(ins));
            String info = breader.readLine();
            while (info != null) {
                System.out.println(info);
                info = breader.readLine();
            }
        } catch (IOException e) {
            System.err.println(e.toString());
            System.exit(1);
        }
    }
",0
9088945,2,"    public static void v2ljastaVeebileht(String s) throws IOException {
        URL url = new URL(s);
        InputStream is = url.openConnection().getInputStream();
        BufferedReader br = new BufferedReader(new InputStreamReader(is));
        String line;
        while ((line = br.readLine()) != null) {
            System.out.println(line);
        }
    }
",0
22165218,2,"    private String readHtmlFile(String htmlFileName) {
        StringBuffer buffer = new StringBuffer();
        java.net.URL url = getClass().getClassLoader().getResource(""freestyleLearning/homeCore/help/"" + htmlFileName);
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String string = "" "";
            while (string != null) {
                string = reader.readLine();
                if (string != null) buffer.append(string);
            }
        } catch (Exception exc) {
            System.out.println(exc);
        }
        return new String(buffer);
    }
",0
23041340,2,"    private HashSet<String> loadSupportedAnnotationTypes(VannitationType baseVannitationType) {
        Enumeration<URL> urls = null;
        try {
            urls = this.getClass().getClassLoader().getResources(""META-INF/"" + baseVannitationType);
        } catch (IOException e) {
            throw new RuntimeException(""Failed to load the annotations we support"", e);
        }
        supportedAnnotationTypes.put(baseVannitationType, new HashSet<String>());
        while (urls.hasMoreElements()) {
            URL url = urls.nextElement();
            try {
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String line;
                while ((line = reader.readLine()) != null) {
                    supportedAnnotationTypes.get(baseVannitationType).add(line.trim());
                }
                reader.close();
            } catch (Exception e) {
                throw new RuntimeException(""Could not open "" + url);
            }
        }
        return supportedAnnotationTypes.get(baseVannitationType);
    }
",0
11275834,2,"    private void createHomeTab() {
        Tabpanel homeTab = new Tabpanel();
        windowContainer.addWindow(homeTab, Msg.getMsg(EnvWeb.getCtx(), ""Home"").replaceAll(""&"", """"), false);
        Portallayout portalLayout = new Portallayout();
        portalLayout.setWidth(""100%"");
        portalLayout.setHeight(""100%"");
        portalLayout.setStyle(""position: absolute; overflow: auto"");
        homeTab.appendChild(portalLayout);
        Portalchildren portalchildren = null;
        int currentColumnNo = 0;
        String sql = ""SELECT COUNT(DISTINCT COLUMNNO) "" + ""FROM PA_DASHBOARDCONTENT "" + ""WHERE (AD_CLIENT_ID=0 OR AD_CLIENT_ID=?) AND ISACTIVE='Y'"";
        int noOfCols = DB.getSQLValue(null, sql, EnvWeb.getCtx().getAD_Client_ID());
        int width = noOfCols <= 0 ? 100 : 100 / noOfCols;
        sql = ""SELECT x.*, m.AD_MENU_ID "" + ""FROM PA_DASHBOARDCONTENT x "" + ""LEFT OUTER JOIN AD_MENU m ON x.AD_WINDOW_ID=m.AD_WINDOW_ID "" + ""WHERE (x.AD_CLIENT_ID=0 OR x.AD_CLIENT_ID=?) AND x.ISACTIVE='Y' "" + ""AND x.zulfilepath not in (?, ?, ?) "" + ""ORDER BY x.COLUMNNO, x.AD_CLIENT_ID, x.LINE "";
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
            pstmt = DB.prepareStatement(sql, null);
            pstmt.setInt(1, EnvWeb.getCtx().getAD_Client_ID());
            pstmt.setString(2, ACTIVITIES_PATH);
            pstmt.setString(3, FAVOURITES_PATH);
            pstmt.setString(4, VIEWS_PATH);
            rs = pstmt.executeQuery();
            while (rs.next()) {
                int columnNo = rs.getInt(""ColumnNo"");
                if (portalchildren == null || currentColumnNo != columnNo) {
                    portalchildren = new Portalchildren();
                    portalLayout.appendChild(portalchildren);
                    portalchildren.setWidth(width + ""%"");
                    portalchildren.setStyle(""padding: 5px"");
                    currentColumnNo = columnNo;
                }
                Panel panel = new Panel();
                panel.setStyle(""margin-bottom:10px"");
                panel.setTitle(rs.getString(""Name""));
                String description = rs.getString(""Description"");
                if (description != null) panel.setTooltiptext(description);
                String collapsible = rs.getString(""IsCollapsible"");
                panel.setCollapsible(collapsible.equals(""Y""));
                panel.setBorder(""normal"");
                portalchildren.appendChild(panel);
                Panelchildren content = new Panelchildren();
                panel.appendChild(content);
                boolean panelEmpty = true;
                String htmlContent = rs.getString(""HTML"");
                if (htmlContent != null) {
                    StringBuffer result = new StringBuffer(""<html><head>"");
                    URL url = getClass().getClassLoader().getResource(""org/compiere/images/PAPanel.css"");
                    InputStreamReader ins;
                    try {
                        ins = new InputStreamReader(url.openStream());
                        BufferedReader bufferedReader = new BufferedReader(ins);
                        String cssLine;
                        while ((cssLine = bufferedReader.readLine()) != null) result.append(cssLine + ""\n"");
                    } catch (IOException e1) {
                        logger.log(Level.SEVERE, e1.getLocalizedMessage(), e1);
                    }
                    result.append(""</head><body><div class=\""content\"">\n"");
                    result.append(stripHtml(htmlContent, false) + ""<br>\n"");
                    result.append(""</div>\n</body>\n</html>\n</html>"");
                    Html html = new Html();
                    html.setContent(result.toString());
                    content.appendChild(html);
                    panelEmpty = false;
                }
                int AD_Window_ID = rs.getInt(""AD_Window_ID"");
                if (AD_Window_ID > 0) {
                    int AD_Menu_ID = rs.getInt(""AD_Menu_ID"");
                    ToolBarButton btn = new ToolBarButton(String.valueOf(AD_Menu_ID));
                    MMenu menu = new MMenu(EnvWeb.getCtx(), AD_Menu_ID, null);
                    btn.setLabel(menu.getName());
                    btn.addEventListener(Events.ON_CLICK, this);
                    content.appendChild(btn);
                    panelEmpty = false;
                }
                int PA_Goal_ID = rs.getInt(""PA_Goal_ID"");
                if (PA_Goal_ID > 0) {
                    StringBuffer result = new StringBuffer(""<html><head>"");
                    URL url = getClass().getClassLoader().getResource(""org/compiere/images/PAPanel.css"");
                    InputStreamReader ins;
                    try {
                        ins = new InputStreamReader(url.openStream());
                        BufferedReader bufferedReader = new BufferedReader(ins);
                        String cssLine;
                        while ((cssLine = bufferedReader.readLine()) != null) result.append(cssLine + ""\n"");
                    } catch (IOException e1) {
                        logger.log(Level.SEVERE, e1.getLocalizedMessage(), e1);
                    }
                    result.append(""</head><body><div class=\""content\"">\n"");
                    result.append(renderGoals(PA_Goal_ID, content));
                    result.append(""</div>\n</body>\n</html>\n</html>"");
                    Html html = new Html();
                    html.setContent(result.toString());
                    content.appendChild(html);
                    panelEmpty = false;
                }
                String url = rs.getString(""ZulFilePath"");
                if (url != null) {
                    try {
                        Component component = Executions.createComponents(url, content, null);
                        if (component != null) {
                            if (component instanceof DashboardPanel) {
                                DashboardPanel dashboardPanel = (DashboardPanel) component;
                                if (!dashboardPanel.getChildren().isEmpty()) {
                                    content.appendChild(dashboardPanel);
                                    dashboardRunnable.add(dashboardPanel);
                                    panelEmpty = false;
                                }
                            } else {
                                content.appendChild(component);
                                panelEmpty = false;
                            }
                        }
                    } catch (Exception e) {
                        logger.log(Level.WARNING, ""Failed to create components. zul="" + url, e);
                    }
                }
                if (panelEmpty) panel.detach();
            }
        } catch (Exception e) {
            logger.log(Level.WARNING, ""Failed to create dashboard content"", e);
        } finally {
            Util.closeCursor(pstmt, rs);
        }
        registerWindow(homeTab);
        if (!portalLayout.getDesktop().isServerPushEnabled()) portalLayout.getDesktop().enableServerPush(true);
        dashboardRunnable.refreshDashboard();
        dashboardThread = new Thread(dashboardRunnable, ""UpdateInfo"");
        dashboardThread.setDaemon(true);
        dashboardThread.start();
    }
",0
7718801,2,"    protected static StringBuffer doRESTOp(String urlString) throws Exception {
        StringBuffer result = new StringBuffer();
        String restUrl = urlString;
        int p = restUrl.indexOf(""://"");
        if (p < 0) restUrl = System.getProperty(""fedoragsearch.protocol"") + ""://"" + System.getProperty(""fedoragsearch.hostport"") + ""/"" + System.getProperty(""fedoragsearch.path"") + restUrl;
        URL url = null;
        url = new URL(restUrl);
        URLConnection conn = null;
        conn = url.openConnection();
        conn.setRequestProperty(""Authorization"", ""Basic "" + (new BASE64Encoder()).encode((System.getProperty(""fedoragsearch.fgsUserName"") + "":"" + System.getProperty(""fedoragsearch.fgsPassword"")).getBytes()));
        conn.connect();
        content = null;
        content = conn.getContent();
        String line;
        BufferedReader br = new BufferedReader(new InputStreamReader((InputStream) content));
        while ((line = br.readLine()) != null) result.append(line);
        return result;
    }
",0
11918313,2,"    public String[] retrieveFasta(String id) throws Exception {
        URL url = new URL(""http://www.ebi.ac.uk/ena/data/view/"" + id + ""&display=fasta"");
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
        String header = reader.readLine();
        StringBuffer seq = new StringBuffer();
        String line = """";
        while ((line = reader.readLine()) != null) {
            seq.append(line);
        }
        reader.close();
        return new String[] { header, seq.toString() };
    }
",0
17329685,2,"    private static void updateLeapSeconds() throws IOException, MalformedURLException, NumberFormatException {
        URL url = new URL(""http://cdf.gsfc.nasa.gov/html/CDFLeapSeconds.txt"");
        InputStream in;
        try {
            in = url.openStream();
        } catch (IOException ex) {
            url = LeapSecondsConverter.class.getResource(""CDFLeapSeconds.txt"");
            in = url.openStream();
            System.err.println(""Using local copy of leap seconds!!!"");
        }
        BufferedReader r = new BufferedReader(new InputStreamReader(in));
        String s = """";
        leapSeconds = new ArrayList(50);
        withoutLeapSeconds = new ArrayList(50);
        String lastLine = s;
        while (s != null) {
            s = r.readLine();
            if (s == null) {
                System.err.println(""Last leap second read from "" + url + "" "" + lastLine);
                continue;
            }
            if (s.startsWith("";"")) {
                continue;
            }
            String[] ss = s.trim().split(""\\s+"", -2);
            if (ss[0].compareTo(""1972"") < 0) {
                continue;
            }
            int iyear = Integer.parseInt(ss[0]);
            int imonth = Integer.parseInt(ss[1]);
            int iday = Integer.parseInt(ss[2]);
            int ileap = (int) (Double.parseDouble(ss[3]));
            double us2000 = TimeUtil.createTimeDatum(iyear, imonth, iday, 0, 0, 0, 0).doubleValue(Units.us2000);
            leapSeconds.add(Long.valueOf(((long) us2000) * 1000L - 43200000000000L + (long) (ileap - 32) * 1000000000));
            withoutLeapSeconds.add(us2000);
        }
        leapSeconds.add(Long.MAX_VALUE);
        withoutLeapSeconds.add(Double.MAX_VALUE);
        lastUpdateMillis = System.currentTimeMillis();
    }
",0
552319,2,"    public String getpage(String leurl) throws Exception {
        int data;
        StringBuffer lapage = new StringBuffer();
        URL myurl = new URL(leurl);
        URLConnection conn = myurl.openConnection();
        conn.connect();
        if (!Pattern.matches(""HTTP/... 2.. .*"", conn.getHeaderField(0).toString())) {
            System.out.println(conn.getHeaderField(0).toString());
            return lapage.toString();
        }
        InputStream in = conn.getInputStream();
        for (data = in.read(); data != -1; data = in.read()) lapage.append((char) data);
        return lapage.toString();
    }
",0
15679088,2,"    public static String createStringFromHtml(MyUrl url) {
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.getUrl().openStream(), ""UTF-8""));
            String line;
            String xmlAsString = """";
            while ((line = reader.readLine()) != null) {
                xmlAsString += line;
            }
            reader.close();
            return xmlAsString;
        } catch (Exception e) {
            return null;
        }
    }
",0
22467291,2,"    public void testExecute() throws Exception {
        LocalWorker worker = new JTidyWorker();
        URL url = new URL(""http://www.nature.com/index.html"");
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String str;
        StringBuffer sb = new StringBuffer();
        while ((str = in.readLine()) != null) {
            sb.append(str);
            sb.append(LINE_ENDING);
        }
        in.close();
        Map inputMap = new HashMap();
        DataThingAdapter inAdapter = new DataThingAdapter(inputMap);
        inAdapter.putString(""inputHtml"", sb.toString());
        Map outputMap = worker.execute(inputMap);
        DataThingAdapter outAdapter = new DataThingAdapter(outputMap);
        assertNotNull(""The outputMap was null"", outputMap);
        String results = outAdapter.getString(""results"");
        assertFalse(""The results were empty"", results.equals(""""));
        assertNotNull(""The results were null"", results);
    }
",0
14855960,2,"    private static List<InputMethodDescriptor> loadIMDescriptors() {
        String nm = SERVICES + InputMethodDescriptor.class.getName();
        Enumeration<URL> en;
        LinkedList<InputMethodDescriptor> imdList = new LinkedList<InputMethodDescriptor>();
        NativeIM nativeIM = ContextStorage.getNativeIM();
        imdList.add(nativeIM);
        try {
            en = ClassLoader.getSystemResources(nm);
            ClassLoader cl = ClassLoader.getSystemClassLoader();
            while (en.hasMoreElements()) {
                URL url = en.nextElement();
                InputStreamReader isr = new InputStreamReader(url.openStream(), ""UTF-8"");
                BufferedReader br = new BufferedReader(isr);
                String str = br.readLine();
                while (str != null) {
                    str = str.trim();
                    int comPos = str.indexOf(""#"");
                    if (comPos >= 0) {
                        str = str.substring(0, comPos);
                    }
                    if (str.length() > 0) {
                        imdList.add((InputMethodDescriptor) cl.loadClass(str).newInstance());
                    }
                    str = br.readLine();
                }
            }
        } catch (Exception e) {
        }
        return imdList;
    }
",0
23677111,2,"	public static String downloadWebpage1(String address) throws MalformedURLException, IOException {
		URL url = new URL(address);
		BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
		String line;
		String page = """";
		while((line = br.readLine()) != null) {
			page += line + ""\n"";
		}
		br.close();
		return page;
	}
",0
8862015,2,"    @Override
    protected void loadInternals(final File internDir, final ExecutionMonitor exec) throws IOException, CanceledExecutionException {
        List<String> taxa = new Vector<String>();
        String domain = m_domain.getStringValue();
        String id = """";
        if (domain.equalsIgnoreCase(""Eukaryota"")) id = ""eukaryota"";
        try {
            URL url = new URL(""http://www.ebi.ac.uk/genomes/"" + id + "".details.txt"");
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String link = """";
            String key = """";
            String name = """";
            int counter = 0;
            String line = """";
            while ((line = reader.readLine()) != null) {
                String[] st = line.split(""\t"");
                ena_details ena = new ena_details(st[0], st[1], st[2], st[3], st[4]);
                ENADataHolder.instance().put(ena.desc, ena);
                taxa.add(ena.desc);
            }
            reader.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",0
21979462,2,"    protected String downloadURLtoString(URL url) throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        StringBuffer sb = new StringBuffer(100 * 1024);
        String str;
        while ((str = in.readLine()) != null) {
            sb.append(str);
        }
        in.close();
        return sb.toString();
    }
",0
18417069,2,"    public static int getUrl(final String s) {
        try {
            final URL url = new URL(s);
            final BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            int count = 0;
            String data = null;
            while ((data = reader.readLine()) != null) {
                System.out.printf(""Results(%3d) of data: %s\n"", count, data);
                ++count;
            }
            return count;
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }
",0
20519147,2,"    public boolean load() {
        if (getFilename() != null && getFilename().length() > 0) {
            try {
                File file = new File(PreferencesManager.loadDirectoryLocation(""macros"") + File.separator + getFilename());
                URL url = file.toURL();
                InputStreamReader isr = new InputStreamReader(url.openStream());
                BufferedReader br = new BufferedReader(isr);
                String line = br.readLine();
                String macro_text = """";
                while (line != null) {
                    macro_text = macro_text.concat(line);
                    line = br.readLine();
                    if (line != null) {
                        macro_text = macro_text.concat(System.getProperty(""line.separator""));
                    }
                }
                code = macro_text;
            } catch (Exception e) {
                System.err.println(""Exception at StoredMacro.load(): "" + e.toString());
                return false;
            }
        }
        return true;
    }
",0
5810755,2,"    @Override
    public Response callService(RemoteCallUrl urlModel) throws RemoteCallFailedException {
        String path;
        if (urlModel.getRootPath() != null) path = urlModel.getRootPath() + urlModel.getServicePath(); else path = urlModel.getServicePath();
        try {
            URL url = new URL(HTTP_PROTOCOL, urlModel.getHost(), urlModel.getPort(), path);
            URLConnection urlConnection = url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            String data = """";
            while ((inputLine = in.readLine()) != null) data += inputLine;
            Response remoteData = new Response(new String(data));
            remoteData.setStatus(urlConnection.getHeaderField(Response.RPC_STATUS_NAME));
            in.close();
            return remoteData;
        } catch (MalformedURLException e) {
            logger.error(""Illegal URL. Cannot connect to this remote object"", e);
            throw new RemoteCallFailedException(""Illegal URL:"" + e.getMessage(), e);
        } catch (IOException e) {
            logger.error(""Cannot read from source. Please check remote object address"", e);
            throw new RemoteCallFailedException(""Fatal transport error:"" + e.getMessage(), e);
        }
    }
",0
13612487,2,"    private ArrayList<String> loadProperties(String filename) throws DevFailed, IOException {
        java.net.URL url = getClass().getResource(filename);
        if (url == null) {
            Except.throw_exception(""LOAD_PROPERTY_FAILED"", ""URL for property file ("" + filename + "") is null !"", ""PogoProperty.loadProperties()"");
            return null;
        }
        InputStream is = url.openStream();
        BufferedReader br = new BufferedReader(new InputStreamReader(is));
        ArrayList<String> vs = new ArrayList<String>();
        String str;
        while ((str = br.readLine()) != null) {
            str = str.trim();
            if (!str.startsWith(""#"")) if (str.length() > 0) vs.add(str);
        }
        br.close();
        return vs;
    }
",0
14347882,2,"    public void load(boolean isOrdered) throws ResourceInstantiationException {
        try {
            if (null == url) {
                throw new ResourceInstantiationException(""URL not specified (null)."");
            }
            BufferedReader listReader;
            listReader = new BomStrippingInputStreamReader((url).openStream(), encoding);
            String line;
            int linenr = 0;
            while (null != (line = listReader.readLine())) {
                linenr++;
                GazetteerNode node = null;
                try {
                    node = new GazetteerNode(line, separator, isOrdered);
                } catch (Exception ex) {
                    throw new GateRuntimeException(""Could not read gazetteer entry "" + linenr + "" from URL "" + getURL() + "": "" + ex.getMessage(), ex);
                }
                entries.add(new GazetteerNode(line, separator, isOrdered));
            }
            listReader.close();
        } catch (Exception x) {
            throw new ResourceInstantiationException(x.getClass() + "":"" + x.getMessage());
        }
        isModified = false;
    }
",0
20444269,2,"    public synchronized void connectURL(String url) throws IllegalArgumentException, IOException, MalformedURLException {
        URL myurl = new URL(url);
        InputStream in = myurl.openStream();
        BufferedReader page = new BufferedReader(new InputStreamReader(in));
        String ior = null;
        ArrayList nodesAL = new ArrayList();
        while ((ior = page.readLine()) != null) {
            if (ior.trim().equals("""")) continue;
            nodesAL.add(ior);
        }
        in.close();
        Object[] nodesOA = nodesAL.toArray();
        Node[] nodes = new Node[nodesOA.length];
        for (int i = 0; i < nodesOA.length; i++) nodes[i] = TcbnetOrb.getInstance().getNode((String) nodesOA[i]);
        this.connect(nodes);
    }
",0
19687729,2,"    public static void readShaderSource(ClassLoader context, String path, URL url, StringBuffer result) {
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = null;
            while ((line = reader.readLine()) != null) {
                if (line.startsWith(""#include "")) {
                    String includeFile = line.substring(9).trim();
                    String next = Locator.getRelativeOf(path, includeFile);
                    URL nextURL = Locator.getResource(next, context);
                    if (nextURL == null) {
                        next = includeFile;
                        nextURL = Locator.getResource(next, context);
                    }
                    if (nextURL == null) {
                        throw new FileNotFoundException(""Can't find include file "" + includeFile);
                    }
                    readShaderSource(context, next, nextURL, result);
                } else {
                    result.append(line + ""\n"");
                }
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
",0
14688886,2,"    static void populateResources() throws BasicException {
        try {
            List<URL> templates = DatabaseValidator.listResources(""/net/adrianromero/templates/"" + Locale.getDefault().getLanguage());
            if (templates.size() == 0) {
                templates = DatabaseValidator.listResources(""/net/adrianromero/templates/en"");
            }
            for (URL url : templates) {
                String fileName = url.getFile();
                fileName = fileName.substring(fileName.lastIndexOf('/') + 1);
                if (fileName.endsWith("".xml"") || fileName.endsWith("".txt"")) {
                    Resource templateResource = new Resource(fileName.substring(0, fileName.length() - 4));
                    InputStream is = url.openStream();
                    StringBuffer strBuff = new StringBuffer();
                    BufferedReader br = new BufferedReader(new InputStreamReader(is));
                    String str;
                    while ((str = br.readLine()) != null) {
                        strBuff.append(str + ""\n"");
                    }
                    templateResource.setText(strBuff.toString());
                    templateResource.save();
                }
            }
        } catch (MalformedURLException e1) {
            logger.error(""Unable to load templates"", e1);
        } catch (IOException e1) {
            logger.error(""Unable to load templates"", e1);
        }
        String[][] images = new String[][] { { ""default.user"", ""yast_sysadmin.png"" }, { ""default.product"", ""colorize.png"" }, { ""Window.Logo"", ""windowlogo.png"" }, { ""Image.Backarrow"", ""3backarrow.png"" } };
        for (int i = 0; i < images.length; i++) {
            Image img = new Image();
            img.setBufferedImage(ImageUtils.readImage(DatabaseValidator.class.getResource(""/net/adrianromero/images/"" + images[i][1])));
            img.save();
            Property imgProperty = new Property(images[i][0]);
            imgProperty.setValue("""" + img.getId());
            imgProperty.save();
        }
    }
",0
21481555,2,"    private static void loadCommandList() {
        final URL url;
        try {
            url = IOUtils.getResource(null, PYTHON_MENU_FILE);
        } catch (final FileNotFoundException ex) {
            log.error(""File '"" + PYTHON_MENU_FILE + ""': "" + ex.getMessage());
            return;
        }
        final List<String> cmdList = new ArrayList<String>();
        try {
            final InputStream inputStream = url.openStream();
            try {
                final Reader reader = new InputStreamReader(inputStream, IOUtils.MAP_ENCODING);
                try {
                    final BufferedReader bufferedReader = new BufferedReader(reader);
                    try {
                        while (true) {
                            final String inputLine = bufferedReader.readLine();
                            if (inputLine == null) {
                                break;
                            }
                            final String line = inputLine.trim();
                            if (line.length() > 0 && !line.startsWith(""#"")) {
                                final int k = line.indexOf('(');
                                if (k > 0) {
                                    cmdList.add(line.substring(0, k) + ""()"");
                                } else {
                                    log.error(""Parse error in "" + url + "":"");
                                    log.error(""   \"""" + line + ""\"" missing '()'"");
                                    cmdList.add(line + ""()"");
                                }
                            }
                        }
                        Collections.sort(cmdList, String.CASE_INSENSITIVE_ORDER);
                        if (!cmdList.isEmpty()) {
                            menuEntries = cmdList.toArray(new String[cmdList.size()]);
                        }
                    } finally {
                        bufferedReader.close();
                    }
                } finally {
                    reader.close();
                }
            } finally {
                inputStream.close();
            }
        } catch (final FileNotFoundException ex) {
            log.error(""File '"" + url + ""' not found: "" + ex.getMessage());
        } catch (final EOFException ignored) {
        } catch (final UnsupportedEncodingException ex) {
            log.error(""Cannot decode file '"" + url + ""': "" + ex.getMessage());
        } catch (final IOException ex) {
            log.error(""Cannot read file '"" + url + ""': "" + ex.getMessage());
        }
    }
",0
16079868,2,"    private void readIntoList(URL url, Map<String, JMenuItem> list) {
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                int commandNameBegin = inputLine.indexOf("">"") + 1;
                int commandNameEnd = inputLine.indexOf(""</a>"");
                JMenuItem item = new JMenuItem(""<html>"" + inputLine + ""</html>"");
                if (list == allRooms) {
                    item.setActionCommand(""/room "" + inputLine.substring(commandNameBegin, commandNameEnd));
                } else {
                    item.setActionCommand(""/"" + inputLine.substring(commandNameBegin, commandNameEnd) + "" "");
                }
                item.addActionListener(new ActionListener() {

                    public void actionPerformed(ActionEvent e) {
                        jTextField1.setText(e.getActionCommand());
                        popup.setVisible(false);
                    }
                });
                list.put(inputLine.substring(commandNameBegin, commandNameEnd), item);
            }
            in.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",0
9350616,2,"    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.listview);
        HttpGet request = new HttpGet(SERVICE_URI + ""/json/getallpersons"");
        request.setHeader(""Accept"", ""application/json"");
        request.setHeader(""Content-type"", ""application/json"");
        DefaultHttpClient httpClient = new DefaultHttpClient();
        String theString = new String("""");
        try {
            HttpResponse response = httpClient.execute(request);
            HttpEntity responseEntity = response.getEntity();
            InputStream stream = responseEntity.getContent();
            BufferedReader reader = new BufferedReader(new InputStreamReader(stream));
            StringBuilder builder = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                builder.append(line);
            }
            stream.close();
            theString = builder.toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        Toast.makeText(this, theString + ""\n"", Toast.LENGTH_LONG).show();
    }
",0
20453777,2,"    private static List retrieveQuotes(Report report, Symbol symbol, TradingDate startDate, TradingDate endDate) throws ImportExportException {
        List quotes = new ArrayList();
        String URLString = constructURL(symbol, startDate, endDate);
        EODQuoteFilter filter = new YahooEODQuoteFilter(symbol);
        PreferencesManager.ProxyPreferences proxyPreferences = PreferencesManager.loadProxySettings();
        try {
            URL url = new URL(URLString);
            InputStreamReader input = new InputStreamReader(url.openStream());
            BufferedReader bufferedInput = new BufferedReader(input);
            String line = bufferedInput.readLine();
            while (line != null) {
                line = bufferedInput.readLine();
                if (line != null) {
                    try {
                        EODQuote quote = filter.toEODQuote(line);
                        quotes.add(quote);
                        verify(report, quote);
                    } catch (QuoteFormatException e) {
                        report.addError(Locale.getString(""YAHOO"") + "":"" + symbol + "":"" + Locale.getString(""ERROR"") + "": "" + e.getMessage());
                    }
                }
            }
            bufferedInput.close();
        } catch (BindException e) {
            throw new ImportExportException(Locale.getString(""UNABLE_TO_CONNECT_ERROR"", e.getMessage()));
        } catch (ConnectException e) {
            throw new ImportExportException(Locale.getString(""UNABLE_TO_CONNECT_ERROR"", e.getMessage()));
        } catch (UnknownHostException e) {
            throw new ImportExportException(Locale.getString(""UNKNOWN_HOST_ERROR"", e.getMessage()));
        } catch (NoRouteToHostException e) {
            throw new ImportExportException(Locale.getString(""DESTINATION_UNREACHABLE_ERROR"", e.getMessage()));
        } catch (MalformedURLException e) {
            throw new ImportExportException(Locale.getString(""INVALID_PROXY_ERROR"", proxyPreferences.host, proxyPreferences.port));
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
            throw new ImportExportException(Locale.getString(""ERROR_DOWNLOADING_QUOTES""));
        }
        return quotes;
    }
",0
12883117,2,"    public PhoneSetImpl(URL url) throws IOException {
        BufferedReader reader;
        String line;
        phonesetMap = new HashMap();
        reader = new BufferedReader(new InputStreamReader(url.openStream()));
        line = reader.readLine();
        lineCount++;
        while (line != null) {
            if (!line.startsWith(""***"")) {
                parseAndAdd(line);
            }
            line = reader.readLine();
        }
        reader.close();
    }
",0
13596891,2,"    protected void doTransfer(HttpServletRequest request, HttpServletResponse response, String method) throws ServletException, IOException {
        ServletContext servletContext = this.getServletConfig().getServletContext();
        WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext);
        String szUrl = request.getParameter(""url"");
        System.out.println(szUrl);
        URL url;
        InputStream is = null;
        ServletOutputStream sout = null;
        try {
            url = new URL(szUrl);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            Enumeration hNames = request.getHeaderNames();
            while (hNames.hasMoreElements()) {
                String txt = hNames.nextElement().toString();
                con.setRequestProperty(txt, request.getHeader(txt));
            }
            con.setRequestProperty(""host"", url.getHost());
            con.setRequestProperty(""refer"", szUrl);
            con.setRequestMethod(method);
            con.setDoOutput(true);
            con.setDoInput(true);
            InputStreamReader inBody = new InputStreamReader(request.getInputStream());
            char bufCh[] = new char[1024];
            int r;
            OutputStreamWriter outReq = new OutputStreamWriter(con.getOutputStream());
            while ((r = inBody.read(bufCh)) != -1) {
                System.out.println(bufCh);
                outReq.write(bufCh, 0, r);
            }
            outReq.flush();
            outReq.close();
            inBody.close();
            System.out.println(con.getResponseCode());
            System.out.println(con.getResponseMessage());
            if (con.getResponseCode() == con.HTTP_OK) {
                response.setContentType(con.getContentType());
                response.addHeader(""Content-Encoding"", con.getContentEncoding());
                sout = response.getOutputStream();
                is = con.getInputStream();
                byte buff[] = new byte[1024];
                while ((r = is.read(buff)) != -1) {
                    sout.write(buff, 0, r);
                    System.out.print(buff);
                }
                sout.flush();
                is.close();
                sout.close();
            } else {
                response.sendError(con.getResponseCode(), con.getResponseMessage());
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",0
7606030,2,"    public String excute(String targetUrl, String params, String type) {
        URL url;
        HttpURLConnection connection = null;
        try {
            url = new URL(targetUrl);
            connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod(type);
            connection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            connection.setRequestProperty(""Content-Length"", """" + Integer.toString(params.getBytes().length));
            connection.setRequestProperty(""Content-Language"", CHAR_SET);
            connection.setRequestProperty(""Connection"", ""close"");
            connection.setUseCaches(false);
            connection.setDoInput(true);
            connection.setDoOutput(true);
            if (params != null) {
                if (params.length() > 0) {
                    DataOutputStream wr;
                    wr = new DataOutputStream(connection.getOutputStream());
                    wr.writeBytes(params);
                    wr.flush();
                    wr.close();
                }
            }
            InputStream is = connection.getInputStream();
            BufferedReader rd = new BufferedReader(new InputStreamReader(is, CHAR_SET));
            String line;
            StringBuffer response = new StringBuffer();
            while ((line = rd.readLine()) != null) {
                response.append(line);
                response.append(""\r\n"");
            }
            rd.close();
            return response.toString();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }
",0
15372362,2,"    public List<String> loadList(String name) {
        List<String> ret = new ArrayList<String>();
        try {
            URL url = getClass().getClassLoader().getResource(""lists/"" + name + "".utf-8"");
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));
            String line;
            while ((line = reader.readLine()) != null) {
                ret.add(line);
            }
            reader.close();
        } catch (IOException e) {
            showError(""No se puede cargar la lista de valores: "" + name, e);
        }
        return ret;
    }
",0
11450174,2,"    private void publishPage(URL url, String path, File outputFile) throws IOException {
        if (debug) {
            System.out.println(""      publishing page: "" + path);
            System.out.println(""        url == "" + url);
            System.out.println(""        file == "" + outputFile);
        }
        StringBuffer sb = new StringBuffer();
        try {
            InputStream is = url.openStream();
            InputStreamReader isr = new InputStreamReader(is);
            BufferedReader br = new BufferedReader(isr);
            boolean firstLine = true;
            String line;
            do {
                line = br.readLine();
                if (line != null) {
                    if (!firstLine) sb.append(""\n""); else firstLine = false;
                    sb.append(line);
                }
            } while (line != null);
            br.close();
        } catch (IOException e) {
            String mess = outputFile.toString() + "": "" + e.getMessage();
            errors.add(mess);
        }
        FileOutputStream fos = new FileOutputStream(outputFile);
        OutputStreamWriter sw = new OutputStreamWriter(fos);
        sw.write(sb.toString());
        sw.close();
        if (prepareArchive) archiveFiles.add(new ArchiveFile(path, outputFile));
    }
",0
21343573,2,"    private static String getProviderName(URL url, PrintStream err) {
        InputStream in = null;
        try {
            in = url.openStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(in, ""utf-8""));
            String result = null;
            while (true) {
                String line = reader.readLine();
                if (line == null) {
                    break;
                }
                int commentPos = line.indexOf('#');
                if (commentPos >= 0) {
                    line = line.substring(0, commentPos);
                }
                line = line.trim();
                int len = line.length();
                if (len != 0) {
                    if (result != null) {
                        print(err, ""checkconfig.multiproviders"", url.toString());
                        return null;
                    }
                    result = line;
                }
            }
            if (result == null) {
                print(err, ""checkconfig.missingprovider"", url.toString());
                return null;
            }
            return result;
        } catch (IOException e) {
            print(err, ""configconfig.read"", url.toString(), e);
            return null;
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                }
            }
        }
    }
",0
8406161,2,"    private static boolean DownloadDB() {
        URL url = null;
        BufferedWriter inWriter = null;
        String line;
        try {
            url = new URL(URL);
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));
            inWriter = new BufferedWriter(new FileWriter(InFileName));
            while ((line = reader.readLine()) != null) {
                inWriter.write(line);
                inWriter.newLine();
            }
            inWriter.close();
        } catch (Exception e) {
            try {
                inWriter.close();
            } catch (IOException ignored) {
            }
            e.printStackTrace();
            return false;
        }
        return true;
    }
",0
12980532,2,"    public String htmlContentSimple(String urlStr, String charset) {
        StringBuffer html = new StringBuffer();
        URL url = null;
        BufferedReader reader = null;
        try {
            url = new URL(urlStr);
            reader = new BufferedReader(new InputStreamReader(url.openStream(), charset));
            String line;
            while ((line = reader.readLine()) != null) {
                html.append(line).append(""\r\n"");
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (reader != null) try {
                reader.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return html.toString();
    }
",0
9727050,2,"    private PrecomputedAnimatedModel loadPrecomputedModel_(URL url) {
        if (precompCache.containsKey(url.toExternalForm())) {
            return (precompCache.get(url.toExternalForm()).copy());
        }
        TextureLoader.getInstance().getTexture("""");
        List<SharedGroup> frames = new ArrayList<SharedGroup>();
        Map<String, Animation> animations = new Hashtable<String, Animation>();
        if (url.toExternalForm().endsWith("".amo"")) {
            try {
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String objFileName = reader.readLine();
                objFileName = url.toExternalForm().substring(0, url.toExternalForm().lastIndexOf(""/"")) + ""/"" + objFileName;
                frames = loadOBJFrames(objFileName);
                String line;
                while ((line = reader.readLine()) != null) {
                    StringTokenizer tokenizer = new StringTokenizer(line);
                    String animName = tokenizer.nextToken();
                    int from = Integer.valueOf(tokenizer.nextToken());
                    int to = Integer.valueOf(tokenizer.nextToken());
                    tokenizer.nextToken();
                    animations.put(animName, new Animation(animName, from, to));
                }
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            frames = loadOBJFrames(url.toExternalForm());
        }
        PrecomputedAnimatedModel precompModel = new PrecomputedAnimatedModel(frames, animations);
        precompCache.put(url.toExternalForm(), precompModel);
        return (precompModel);
    }
",0
23088983,2,"    public Epg unmarshallFromUrl(URL url) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
        String tmp = null;
        StringBuilder buffer = new StringBuilder();
        while ((tmp = reader.readLine()) != null) {
            buffer.append(tmp);
        }
        return unmarshall(buffer.toString().getBytes());
    }
",0
22259087,2,"    private Long queryServer(OWLOntology ontologyURI) throws IOException {
        String requestString = ""http://"" + InetAddress.getLocalHost().getHostName() + "":8080/ChangeServer"";
        requestString += ""?query="" + URLEncoder.encode(ontologyURI.getURI().toString(), ""UTF-8"");
        URL url = new URL(requestString);
        BufferedReader input = new BufferedReader(new InputStreamReader(url.openStream()));
        StringBuffer returned = new StringBuffer();
        String str;
        while (null != ((str = input.readLine()))) {
            returned.append(str);
        }
        input.close();
        return new Long(returned.toString());
    }
",0
11101252,2,"    @Override
    public void handler(Map<String, Match> result, TargetPage target) {
        List<String> lines = new LinkedList<String>();
        List<String> page = new LinkedList<String>();
        try {
            URL url = new URL(target.getUrl());
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), ""utf-8""));
            String line = null;
            while ((line = reader.readLine()) != null) {
                page.add(line);
            }
            reader.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
        try {
            result.put(""27 svk par fix"", MatchEventFactory.getFix27());
            result.put(""41 svk ita fix"", MatchEventFactory.getFix41());
            result.put(""01 rsa mex"", MatchEventFactory.get01());
            result.put(""02 uru fra"", MatchEventFactory.get02());
            result.put(""04 kor gre"", MatchEventFactory.get04());
            result.put(""03 arg ngr"", MatchEventFactory.get03());
            result.put(""05 eng usa"", MatchEventFactory.get05());
            result.put(""06 alg slo"", MatchEventFactory.get06());
            result.put(""08 scg gha"", MatchEventFactory.get08());
            result.put(""07 ger aus"", MatchEventFactory.get07());
            result.put(""09 end den"", MatchEventFactory.get09());
            result.put(""10 jpn cmr"", MatchEventFactory.get10());
            result.put(""11 ita par"", MatchEventFactory.get11());
            result.put(""12 nzl svk"", MatchEventFactory.get12());
            result.put(""13 civ por"", MatchEventFactory.get13());
            result.put(""14 bra prk"", MatchEventFactory.get14());
            result.put(""15 hon chi"", MatchEventFactory.get15());
            result.put(""16 esp sui"", MatchEventFactory.get16());
            result.put(""17 rsa uru"", MatchEventFactory.get17());
            result.put(""20 arg kor"", MatchEventFactory.get20());
            result.put(""19 gre ngr"", MatchEventFactory.get19());
            result.put(""18 fra mex"", MatchEventFactory.get18());
            result.put(""21 ger scg"", MatchEventFactory.get21());
            result.put(""22 slo usa"", MatchEventFactory.get22());
            result.put(""23 eng alg"", MatchEventFactory.get23());
            result.put(""25 end jpn"", MatchEventFactory.get25());
            result.put(""24 gha aus"", MatchEventFactory.get24());
            result.put(""26 cmr den"", MatchEventFactory.get26());
            result.put(""27 slo par"", MatchEventFactory.get27());
            result.put(""28 ita nzl"", MatchEventFactory.get28());
            result.put(""29 bra civ"", MatchEventFactory.get29());
            result.put(""30 por prk"", MatchEventFactory.get30());
            result.put(""31 chi sui"", MatchEventFactory.get31());
            result.put(""32 esp hon"", MatchEventFactory.get32());
            result.put(""34 fra rsa"", MatchEventFactory.get34());
            result.put(""33 mex uru"", MatchEventFactory.get33());
            result.put(""35 ngr kor"", MatchEventFactory.get35());
            result.put(""36 gre arg"", MatchEventFactory.get36());
            result.put(""38 usa alg"", MatchEventFactory.get38());
            result.put(""37 slo eng"", MatchEventFactory.get37());
            result.put(""39 gha ger"", MatchEventFactory.get39());
            result.put(""40 aus scg"", MatchEventFactory.get40());
            result.put(""42 par nzl"", MatchEventFactory.get42());
            result.put(""41 slo ita"", MatchEventFactory.get41());
            result.put(""44 cmr ned"", MatchEventFactory.get44());
            result.put(""43 den jpn"", MatchEventFactory.get43());
            result.put(""45 por bra"", MatchEventFactory.get45());
            result.put(""46 prk civ"", MatchEventFactory.get46());
            result.put(""47 chi esp"", MatchEventFactory.get47());
            result.put(""48 sui hon"", MatchEventFactory.get48());
            result.put(""49 uru kor"", MatchEventFactory.get49Team());
            result.put(""50 usa gha"", MatchEventFactory.get50Team());
            result.put(""51 ger eng"", MatchEventFactory.get51Team());
            result.put(""52 arg mex"", MatchEventFactory.get52Team());
            result.put(""53 ned svk"", MatchEventFactory.get53Team());
            result.put(""54 bra chi"", MatchEventFactory.get54Team());
            result.put(""55 par jpn"", MatchEventFactory.get55Team());
            result.put(""56 esp por"", MatchEventFactory.get56Team());
            result.put(""57 ned bra"", MatchEventFactory.get57Team());
            result.put(""58 uru gha"", MatchEventFactory.get58Team());
            result.put(""59 arg ger"", MatchEventFactory.get59Team());
            result.put(""49"", MatchEventFactory.get49());
            result.put(""50"", MatchEventFactory.get50());
            result.put(""51"", MatchEventFactory.get51());
            result.put(""52"", MatchEventFactory.get52());
            result.put(""53"", MatchEventFactory.get53());
            result.put(""54"", MatchEventFactory.get54());
            this.stage2MatchHandler(""318295"", ""55"", ""2010-06-29 22:30"", result);
            this.stage2MatchHandler(""318296"", ""56"", ""2010-06-30 02:30"", result);
            this.stage2MatchHandler(""318297"", ""57"", ""2010-07-02 22:00"", result);
            this.stage2MatchHandler(""318298"", ""58"", ""2010-07-03 02:30"", result);
            this.stage2MatchHandler(""318299"", ""59"", ""2010-07-03 22:00"", result);
            this.stage2MatchHandler(""318300"", ""60"", ""2010-07-04 02:30"", result);
            this.stage2MatchHandler(""318301"", ""61"", ""2010-07-07 02:30"", result);
            this.stage2MatchHandler(""318302"", ""62"", ""2010-07-08 02:30"", result);
            this.stage2MatchHandler(""318303"", ""63"", ""2010-07-11 02:30"", result);
            this.stage2MatchHandler(""318304"", ""64"", ""2010-07-12 02:30"", result);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",0
8174799,2,"    @Override
    public String getFeedFeed(String sUrl) {
        try {
            URL url = new URL(sUrl);
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String result = """";
            String line;
            for (; (line = reader.readLine()) != null; result += line) {
            }
            reader.close();
            return result;
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
        return null;
    }
",0
9979752,2,"    public static MMissing load(URL url) throws IOException {
        MMissing ret = new MMissing();
        InputStream is = url.openStream();
        try {
            Reader r = new InputStreamReader(is);
            BufferedReader br = new BufferedReader(r);
            String line;
            while ((line = br.readLine()) != null) {
                if (line.length() > 0) {
                    ret.add(line);
                }
            }
            return ret;
        } finally {
            is.close();
        }
    }
",0
13044936,2,"    public List<SatelliteElementSet> parseTLE(String urlString) throws IOException {
        List<SatelliteElementSet> elementSets = new ArrayList<SatelliteElementSet>();
        BufferedReader reader = null;
        try {
            String line = null;
            int i = 0;
            URL url = new URL(urlString);
            String[] lines = new String[3];
            reader = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((line = reader.readLine()) != null) {
                i++;
                switch(i) {
                    case 1:
                        {
                            lines[0] = line;
                            break;
                        }
                    case 2:
                        {
                            lines[1] = line;
                            break;
                        }
                    case 3:
                        {
                            lines[2] = line;
                            Long catnum = Long.parseLong(StringUtils.strip(lines[1].substring(2, 7)));
                            long setnum = Long.parseLong(StringUtils.strip(lines[1].substring(64, 68)));
                            elementSets.add(new SatelliteElementSet(catnum, lines, setnum, Calendar.getInstance(TZ).getTime()));
                            i = 0;
                            break;
                        }
                    default:
                        {
                            throw new IOException(""TLE string did not contain three elements"");
                        }
                }
            }
        } finally {
            if (null != reader) {
                reader.close();
            }
        }
        return elementSets;
    }
",0
21808206,2,"    public static void main(String args[]) {
        try {
            URL url = new URL(""http://dev.activeanalytics.ca/piwik.php?url=http%3a%2f%2flyricscatcher.sourceforge.net%2fpiwik.php&action_name=&idsite=1&res=1440x900&h=17&m=2&s=16&fla=1&dir=1&qt=1&realp=1&pdf=1&wma=1&java=1&cookie=0&title=JAVAACCESS&urlref=http%3a%2f%2flyricscatcher.sourceforge.net%2fcomputeraccespage.html"");
            InputStream ist = url.openStream();
            InputStreamReader isr = new InputStreamReader(ist);
            BufferedReader in = new BufferedReader(isr);
            String line = """";
            String inputline = """";
            while ((inputline = in.readLine()) != null) {
                line += inputline + ""\n"";
            }
            System.out.println(""finished: length="" + line.length() + ""line="" + line);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            URL url = new URL(""http://apps.sourceforge.net/piwik/lyricscatcher/piwik.php?url=http%3a%2f%2flyricscatcher.sourceforge.net%2fpiwik.php&action_name=&idsite=1&res=1440x900&h=0&m=22&s=1&fla=1&dir=1&qt=1&realp=1&pdf=1&wma=1&java=1&cookie=0&title=JAVAACCESS&urlref=http%3a%2f%2flyricscatcher.sourceforge.net%2fcomputeraccespage.html"");
            InputStream ist = url.openStream();
            InputStreamReader isr = new InputStreamReader(ist);
            BufferedReader in = new BufferedReader(isr);
            String line = """";
            String inputline = """";
            while ((inputline = in.readLine()) != null) {
                line += inputline + ""\n"";
            }
            System.out.println(""finished: length="" + line.length() + ""line="" + line);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            URL url = new URL(""http://apps.sourceforge.net/piwik/lyricscatcher/piwik.php?url=http%3A%2F%2Flyricscatcher.sourceforge.net%2Fcomputeracces.html&action_name=&idsite=1&res=1440x900&h=0&m=28&s=36&fla=1&dir=1&qt=1&realp=0&pdf=1&wma=1&java=1&cookie=1&title=&urlref="");
            InputStream ist = url.openStream();
            InputStreamReader isr = new InputStreamReader(ist);
            BufferedReader in = new BufferedReader(isr);
            String line = """";
            String inputline = """";
            while ((inputline = in.readLine()) != null) {
                line += inputline + ""\n"";
            }
            System.out.println(""finished: length="" + line.length() + ""line="" + line);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",0
20438542,2,"    public static Shader loadShader(String vspath, String fspath, int textureUnits, boolean separateCam, boolean fog) throws ShaderProgramProcessException {
        if (vspath == """" || fspath == """") return null;
        BufferedReader in;
        String vert = """", frag = """";
        try {
            URL v_url = Graphics.class.getClass().getResource(""/eu/cherrytree/paj/graphics/shaders/"" + vspath);
            String v_path = AppDefinition.getDefaultDataPackagePath() + ""/shaders/"" + vspath;
            if (v_url != null) in = new BufferedReader(new InputStreamReader(v_url.openStream())); else in = new BufferedReader(new InputStreamReader(new FileReader(v_path).getInputStream()));
            boolean run = true;
            String str;
            while (run) {
                str = in.readLine();
                if (str != null) vert += str + ""\n""; else run = false;
            }
            in.close();
        } catch (Exception e) {
            System.err.println(""Couldn't read in vertex shader \"""" + vspath + ""\""."");
            throw new ShaderNotLoadedException(vspath, fspath);
        }
        try {
            URL f_url = Graphics.class.getClass().getResource(""/eu/cherrytree/paj/graphics/shaders/"" + fspath);
            String f_path = AppDefinition.getDefaultDataPackagePath() + ""/shaders/"" + fspath;
            if (f_url != null) in = new BufferedReader(new InputStreamReader(f_url.openStream())); else in = new BufferedReader(new InputStreamReader(new FileReader(f_path).getInputStream()));
            boolean run = true;
            String str;
            while (run) {
                str = in.readLine();
                if (str != null) frag += str + ""\n""; else run = false;
            }
            in.close();
        } catch (Exception e) {
            System.err.println(""Couldn't read in fragment shader \"""" + fspath + ""\""."");
            throw new ShaderNotLoadedException(vspath, fspath);
        }
        return loadShaderFromSource(vert, frag, textureUnits, separateCam, fog);
    }
",0
16382503,2,"    void copyTo(HttpServletRequest httpRequest, HttpServletResponse httpResponse) throws IOException {
        if (shouldMock()) {
            return;
        }
        assert httpRequest != null;
        assert httpResponse != null;
        final long start = System.currentTimeMillis();
        try {
            final URLConnection connection = openConnection(url, headers);
            connection.setRequestProperty(""Accept-Language"", httpRequest.getHeader(""Accept-Language""));
            connection.connect();
            try {
                InputStream input = connection.getInputStream();
                if (""gzip"".equals(connection.getContentEncoding())) {
                    input = new GZIPInputStream(input);
                }
                httpResponse.setContentType(connection.getContentType());
                TransportFormat.pump(input, httpResponse.getOutputStream());
            } finally {
                close(connection);
            }
        } finally {
            LOGGER.info(""http call done in "" + (System.currentTimeMillis() - start) + "" ms for "" + url);
        }
    }
",0
10690321,2,"    private static void readData() {
        StringTokenizer sTok;
        topSet = new HashSet();
        sTok = new StringTokenizer(tops, "","");
        while (sTok.hasMoreTokens()) topSet.add(sTok.nextToken());
        leftSet = new HashSet();
        sTok = new StringTokenizer(lefts, "","");
        while (sTok.hasMoreTokens()) leftSet.add(sTok.nextToken());
        rightSet = new HashSet();
        sTok = new StringTokenizer(rights, "","");
        while (sTok.hasMoreTokens()) rightSet.add(sTok.nextToken());
        farRightSet = new HashSet();
        sTok = new StringTokenizer(farrights, "","");
        while (sTok.hasMoreTokens()) farRightSet.add(sTok.nextToken());
        vowelSet = new HashSet();
        sTok = new StringTokenizer(vowels, "","");
        while (sTok.hasMoreTokens()) {
            String ntk;
            vowelSet.add(ntk = sTok.nextToken());
            if (maxEwtsVowelLength < ntk.length()) maxEwtsVowelLength = ntk.length();
            validInputSequences.put(ntk, anyOldObjectWillDo);
        }
        puncSet = new HashSet();
        sTok = new StringTokenizer(others, "","");
        while (sTok.hasMoreTokens()) {
            String ntk;
            puncSet.add(ntk = sTok.nextToken());
            validInputSequences.put(ntk, anyOldObjectWillDo);
        }
        charSet = new HashSet();
        tibSet = new HashSet();
        sTok = new StringTokenizer(tibetanConsonants, "","");
        while (sTok.hasMoreTokens()) {
            String ntk;
            charSet.add(ntk = sTok.nextToken());
            tibSet.add(ntk);
            validInputSequences.put(ntk, anyOldObjectWillDo);
        }
        sanskritStackSet = new HashSet();
        sTok = new StringTokenizer(otherConsonants, "","");
        while (sTok.hasMoreTokens()) {
            String ntk;
            charSet.add(ntk = sTok.nextToken());
            sanskritStackSet.add(ntk);
            validInputSequences.put(ntk, anyOldObjectWillDo);
        }
        numberSet = new HashSet();
        sTok = new StringTokenizer(numbers, "","");
        while (sTok.hasMoreTokens()) {
            String ntk;
            charSet.add(ntk = sTok.nextToken());
            numberSet.add(ntk);
            validInputSequences.put(ntk, anyOldObjectWillDo);
        }
        charSet.add(""Y"");
        charSet.add(""R"");
        charSet.add(""W"");
        validInputSequences.put(""Y"", anyOldObjectWillDo);
        validInputSequences.put(""R"", anyOldObjectWillDo);
        validInputSequences.put(""W"", anyOldObjectWillDo);
        sTok = null;
        top_vowels = new HashSet();
        top_vowels.add(i_VOWEL);
        top_vowels.add(e_VOWEL);
        top_vowels.add(o_VOWEL);
        top_vowels.add(ai_VOWEL);
        top_vowels.add(au_VOWEL);
        top_vowels.add(reverse_i_VOWEL);
        try {
            URL url = TibetanMachineWeb.class.getResource(fileName);
            if (url == null) {
                System.err.println(""Cannot find "" + fileName + ""; aborting."");
                System.exit(1);
            }
            InputStreamReader isr = new InputStreamReader(url.openStream());
            BufferedReader in = new BufferedReader(isr);
            System.out.println(""Reading Tibetan Machine Web code table "" + fileName);
            String line;
            boolean hashOn = false;
            boolean isTibetan = false;
            boolean isSanskrit = false;
            boolean ignore = false;
            while ((line = in.readLine()) != null) {
                if (line.startsWith(""<?"")) {
                    if (line.equalsIgnoreCase(""<?Consonants?>"")) {
                        isSanskrit = false;
                        isTibetan = true;
                        hashOn = false;
                        ignore = false;
                        do {
                            line = in.readLine();
                        } while (line.startsWith(""//"") || line.equals(""""));
                    } else if (line.equalsIgnoreCase(""<?Numbers?>"")) {
                        isSanskrit = false;
                        isTibetan = false;
                        hashOn = false;
                        ignore = false;
                        do {
                            line = in.readLine();
                        } while (line.startsWith(""//"") || line.equals(""""));
                    } else if (line.equalsIgnoreCase(""<?Vowels?>"")) {
                        isSanskrit = false;
                        isTibetan = false;
                        hashOn = false;
                        ignore = false;
                        do {
                            line = in.readLine();
                        } while (line.startsWith(""//"") || line.equals(""""));
                    } else if (line.equalsIgnoreCase(""<?Other?>"")) {
                        isSanskrit = false;
                        isTibetan = false;
                        hashOn = false;
                        ignore = false;
                        do {
                            line = in.readLine();
                        } while (line.startsWith(""//"") || line.equals(""""));
                    } else if (line.equalsIgnoreCase(""<?Input:Punctuation?>"") || line.equalsIgnoreCase(""<?Input:Vowels?>"")) {
                        isSanskrit = false;
                        isTibetan = false;
                        hashOn = true;
                        ignore = false;
                    } else if (line.equalsIgnoreCase(""<?Input:Tibetan?>"")) {
                        isSanskrit = false;
                        isTibetan = true;
                        hashOn = true;
                        ignore = false;
                    } else if (line.equalsIgnoreCase(""<?Input:Numbers?>"")) {
                        isSanskrit = false;
                        isTibetan = false;
                        hashOn = true;
                        ignore = false;
                    } else if (line.equalsIgnoreCase(""<?Input:Sanskrit?>"")) {
                        isSanskrit = true;
                        isTibetan = false;
                        hashOn = true;
                        ignore = false;
                    } else if (line.equalsIgnoreCase(""<?ToWylie?>"")) {
                        isSanskrit = false;
                        isTibetan = false;
                        hashOn = false;
                        ignore = false;
                    } else if (line.equalsIgnoreCase(""<?Ignore?>"")) {
                        isSanskrit = false;
                        ignore = true;
                    }
                } else if (line.startsWith(""//"")) {
                    ;
                } else if (line.equals("""")) {
                    ;
                } else {
                    StringTokenizer st = new StringTokenizer(line, DELIMITER, true);
                    String wylie = null;
                    DuffCode[] duffCodes;
                    duffCodes = new DuffCode[11];
                    int k = 0;
                    StringBuffer escapedToken = new StringBuffer("""");
                    ThdlDebug.verify(escapedToken.length() == 0);
                    while (st.hasMoreTokens()) {
                        String val = getEscapedToken(st, escapedToken);
                        if (val.equals(DELIMITER) && escapedToken.length() == 0) {
                            k++;
                        } else if (!val.equals("""")) {
                            if (escapedToken.length() != 0) {
                                escapedToken = new StringBuffer("""");
                                ThdlDebug.verify(escapedToken.length() == 0);
                            }
                            switch(k) {
                                case 0:
                                    wylie = val;
                                    break;
                                case 1:
                                    duffCodes[TM] = new DuffCode(val, false);
                                    break;
                                case 2:
                                    if (!ignore) {
                                        duffCodes[REDUCED_C] = new DuffCode(val, true);
                                    }
                                    break;
                                case 3:
                                    duffCodes[TMW] = new DuffCode(val, true);
                                    if (null != duffCodes[TM]) {
                                        TMtoTMW[duffCodes[TM].getFontNum() - 1][duffCodes[TM].getCharNum() - 32] = duffCodes[TMW];
                                    }
                                    if (null != TMWtoTM[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32]) throw new Error(""tibwn.ini is supposed to use the TibetanMachineWeb glyph as the unique key, but "" + val + "" appears two or more times."");
                                    TMWtoTM[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32] = duffCodes[TM];
                                    if (wylie.toLowerCase().startsWith(""\\uf0"")) {
                                        int x = Integer.parseInt(wylie.substring(""\\u"".length()), 16);
                                        ThdlDebug.verify((x >= 0xF000 && x <= 0xF0FF));
                                        NonUnicodeToTMW[x - ''] = new DuffCode[] { duffCodes[TMW] };
                                    }
                                    break;
                                case 4:
                                case 5:
                                case 6:
                                case 7:
                                case 8:
                                case 9:
                                    if (!ignore) {
                                        try {
                                            duffCodes[k - 1] = new DuffCode(val, true);
                                        } catch (Exception e) {
                                            System.err.println(""Couldn't make a DuffCode out of "" + val + ""; line is "" + line + ""; k is "" + k);
                                        }
                                    }
                                    break;
                                case 10:
                                    if (!val.equals(""none"")) {
                                        StringBuffer unicodeBuffer = new StringBuffer();
                                        StringTokenizer uTok = new StringTokenizer(val, "","");
                                        while (uTok.hasMoreTokens()) {
                                            String subval = uTok.nextToken();
                                            ThdlDebug.verify(subval.length() == 4 || subval.length() == 3);
                                            try {
                                                int x = Integer.parseInt(subval, 16);
                                                ThdlDebug.verify((x >= 0x0F00 && x <= 0x0FFF) || x == 0x5350 || x == 0x534D || x == 0x0020 || x == 0x00A0 || x == 0x2003);
                                                unicodeBuffer.append((char) x);
                                            } catch (NumberFormatException e) {
                                                ThdlDebug.verify(false);
                                            }
                                        }
                                        TMWtoUnicode[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32] = unicodeBuffer.toString();
                                        char ch;
                                        if (unicodeBuffer.length() == 1 && UnicodeUtils.isInTibetanRange(ch = unicodeBuffer.charAt(0))) {
                                            if (null != UnicodeToTMW[ch - 'ༀ'][0] && 'ༀ' != ch && '༂' != ch && '༃' != ch && '་' != ch && '༎' != ch && 'ཀ' != ch && 'ག' != ch && 'ཉ' != ch && 'ཏ' != ch && 'ད' != ch && 'ན' != ch && 'ཞ' != ch && 'ར' != ch && 'ཤ' != ch && 'ཧ' != ch && 'ཪ' != ch && 'ཱ' != ch && 'ི' != ch && 'ཱི' != ch && 'ུ' != ch && 'ཱུ' != ch && 'ྲྀ' != ch && 'ཷ' != ch && 'ླྀ' != ch && 'ཹ' != ch && 'ེ' != ch && 'ོ' != ch && 'ཾ' != ch && 'ཱྀ' != ch) {
                                                throw new Error(""tibwn.ini has more than one TMW fellow listed that has the Unicode "" + val + "", but it's not on the list of specially handled glyphs"");
                                            }
                                            UnicodeToTMW[ch - 'ༀ'][0] = duffCodes[TMW];
                                        }
                                    }
                                    break;
                                case 11:
                                    if (!ignore) {
                                        duffCodes[HALF_C] = new DuffCode(val, true);
                                    }
                                    break;
                                case 12:
                                    if (!ignore) {
                                        DuffCode binduCode = new DuffCode(val, true);
                                        binduMap.put(duffCodes[TMW], binduCode);
                                    }
                                    break;
                                case 13:
                                    throw new Error(""tibwn.ini has only 13 columns, you tried to use a 14th column."");
                            }
                        } else {
                            if (k == 10) {
                                throw new Error(""needed none or some unicode; line is "" + line);
                            }
                        }
                    }
                    if (k < 10) {
                        throw new Error(""needed none or some unicode; line is "" + line);
                    }
                    if (!ignore) {
                        if (null == wylie) throw new Error(fileName + "" has a line ^"" + DELIMITER + "" which means that no Wylie is assigned.  That isn't supported."");
                        if (hashOn) {
                            tibHash.put(Manipulate.unescape(wylie), duffCodes);
                        }
                        if (isTibetan) {
                            StringBuffer wylieWithoutDashes = new StringBuffer(wylie);
                            for (int wl = 0; wl < wylieWithoutDashes.length(); wl++) {
                                if (wylieWithoutDashes.charAt(wl) == '-') {
                                    wylieWithoutDashes.deleteCharAt(wl);
                                    --wl;
                                }
                            }
                            tibSet.add(wylieWithoutDashes.toString());
                        }
                        if (isSanskrit) {
                            sanskritStackSet.add(wylie);
                        }
                        if (null == duffCodes[TMW]) throw new Error(fileName + "" has a line with wylie "" + wylie + "" but no TMW; that's not allowed"");
                        int font = duffCodes[TMW].getFontNum();
                        int code = duffCodes[TMW].getCharNum() - 32;
                        toHashKey[font][code] = Manipulate.unescape(wylie);
                    }
                }
            }
        } catch (IOException e) {
            System.out.println(""file Disappeared"");
            ThdlDebug.noteIffyCode();
        }
    }
",0
4562786,2,"    private String GetResponse(URL url) {
        String content = null;
        try {
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setDoOutput(false);
            conn.setRequestMethod(""GET"");
            if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {
                BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                String line;
                while ((line = br.readLine()) != null) content += line;
            } else {
            }
        } catch (MalformedURLException e) {
            e.getStackTrace();
        } catch (IOException e) {
            e.getStackTrace();
        }
        return content;
    }
",0
11998194,2,"    private static void executeDBPatchFile() throws Exception {
        Connection con = null;
        PreparedStatement pre_stmt = null;
        ResultSet rs = null;
        try {
            InputStream is = null;
            URL url = new URL(""http://www.hdd-player.de/umc/UMC-DB-Update-Script.sql"");
            is = url.openStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(is));
            Class.forName(""org.sqlite.JDBC"");
            con = DriverManager.getConnection(""jdbc:sqlite:database/umc.db"", """", """");
            double dbVersion = -1;
            pre_stmt = con.prepareStatement(""SELECT * FROM DB_VERSION WHERE ID_MODUL = 0"");
            rs = pre_stmt.executeQuery();
            if (rs.next()) {
                dbVersion = rs.getDouble(""VERSION"");
            }
            String line = """";
            con.setAutoCommit(false);
            boolean collectSQL = false;
            ArrayList<String> sqls = new ArrayList<String>();
            double patchVersion = 0;
            while ((line = br.readLine()) != null) {
                if (line.startsWith(""["")) {
                    Pattern p = Pattern.compile(""\\[.*\\]"");
                    Matcher m = p.matcher(line);
                    m.find();
                    String value = m.group();
                    value = value.substring(1, value.length() - 1);
                    patchVersion = Double.parseDouble(value);
                }
                if (patchVersion == dbVersion + 1) collectSQL = true;
                if (collectSQL) {
                    if (!line.equals("""") && !line.startsWith(""["") && !line.startsWith(""--"") && !line.contains(""--"")) {
                        if (line.endsWith("";"")) line = line.substring(0, line.length() - 1);
                        sqls.add(line);
                    }
                }
            }
            if (pre_stmt != null) pre_stmt.close();
            if (rs != null) rs.close();
            for (String sql : sqls) {
                log.debug(""Führe SQL aus Patch Datei aus: "" + sql);
                pre_stmt = con.prepareStatement(sql);
                pre_stmt.execute();
            }
            if (patchVersion > 0) {
                log.debug(""aktualisiere Versionsnummer in DB"");
                if (pre_stmt != null) pre_stmt.close();
                if (rs != null) rs.close();
                pre_stmt = con.prepareStatement(""UPDATE DB_VERSION SET VERSION = ? WHERE ID_MODUL = 0"");
                pre_stmt.setDouble(1, patchVersion);
                pre_stmt.execute();
            }
            con.commit();
        } catch (MalformedURLException exc) {
            log.error(exc.toString());
            throw new Exception(""SQL Patch Datei konnte nicht online gefunden werden"", exc);
        } catch (IOException exc) {
            log.error(exc.toString());
            throw new Exception(""SQL Patch Datei konnte nicht gelesen werden"", exc);
        } catch (Throwable exc) {
            log.error(""Fehler bei Ausführung der SQL Patch Datei"", exc);
            try {
                con.rollback();
            } catch (SQLException exc1) {
            }
            throw new Exception(""SQL Patch Datei konnte nicht ausgeführt werden"", exc);
        } finally {
            try {
                if (pre_stmt != null) pre_stmt.close();
                if (con != null) con.close();
            } catch (SQLException exc2) {
                log.error(""Fehler bei Ausführung von SQL Patch Datei"", exc2);
            }
        }
    }
",0
8620255,2,"    private void sendMessages() {
        Configuration conf = Configuration.getInstance();
        for (int i = 0; i < errors.size(); i++) {
            String msg = null;
            synchronized (this) {
                msg = errors.get(i);
                if (DEBUG) System.out.println(msg);
                errors.remove(i);
            }
            if (!conf.getCustomerFeedback()) continue;
            if (conf.getApproveCustomerFeedback()) {
                ConfirmCustomerFeedback dialog = new ConfirmCustomerFeedback(JOptionPane.getFrameForComponent(SqlTablet.getInstance()), msg);
                if (dialog.getResult() == ConfirmCustomerFeedback.Result.NO) continue;
            }
            try {
                URL url = new URL(""http://www.sqltablet.com/beta/bug.php"");
                URLConnection urlc = url.openConnection();
                urlc.setDoOutput(true);
                urlc.setDoOutput(true);
                urlc.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
                DataOutputStream out = new DataOutputStream(urlc.getOutputStream());
                String lines[] = msg.split(""\n"");
                for (int l = 0; l < lines.length; l++) {
                    String line = (l > 0 ? ""&line"" : ""line"") + l + ""="";
                    line += URLEncoder.encode(lines[l], ""UTF-8"");
                    out.write(line.getBytes());
                }
                out.flush();
                out.close();
                BufferedReader in = new BufferedReader(new InputStreamReader(urlc.getInputStream()));
                String line;
                while ((line = in.readLine()) != null) {
                    if (DEBUG) System.out.println(""RemoteLogger : "" + line + ""\n"");
                }
                in.close();
            } catch (MalformedURLException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
",0
19787144,2,"    public JTips(String tipFile) {
        super(new BorderLayout());
        BufferedReader in = null;
        try {
            URL url = getClass().getResource(tipFile);
            if (url != null) {
                in = new BufferedReader(new InputStreamReader(url.openStream()));
                String line = null;
                StringBuffer sb = new StringBuffer();
                while (null != (line = in.readLine())) {
                    if (sep.equals(line)) {
                        addTip(sb.toString());
                        sb = new StringBuffer();
                    } else {
                        sb.append(line);
                        sb.append(""\n"");
                    }
                }
                if (sb != null && sb.length() > 1) {
                    addTip(sb.toString());
                }
            } else {
                Activator.log.warn(""No tip file: "" + tipFile);
            }
        } catch (Exception e) {
            Activator.log.error(""Failed to load tips from "" + tipFile, e);
        } finally {
            try {
                in.close();
            } catch (Exception ignored) {
            }
        }
        if (tips.size() == 0) {
            tips.add(new Tip("""", ""No tips found"", """"));
        } else {
            Activator.log.info(""loaded "" + tips.size() + "" tips"");
        }
        html = new JTextPane();
        html.setContentType(""text/html"");
        html.setEditable(false);
        html.addHyperlinkListener(new HyperlinkListener() {

            public void hyperlinkUpdate(HyperlinkEvent ev) {
                if (ev.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                    URL url = ev.getURL();
                    try {
                        Util.openExternalURL(url);
                    } catch (Exception e) {
                        Activator.log.warn(""Failed to open external url="" + url, e);
                    }
                }
            }
        });
        scroll = new JScrollPane(html);
        scroll.setPreferredSize(new Dimension(350, 200));
        scroll.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5), BorderFactory.createLoweredBevelBorder()));
        final ActionListener nextAction = new ActionListener() {

            public void actionPerformed(ActionEvent ev) {
                setTip((tipIx + 1) % tips.size());
            }
        };
        JButton closeButton = new JButton(Strings.get(""close""));
        closeButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent ev) {
                if (frame != null) {
                    frame.setVisible(false);
                }
            }
        });
        nextButton = new JButton(Strings.get(""next_tip""));
        nextButton.addActionListener(nextAction);
        prevButton = new JButton(Strings.get(""prev_tip""));
        prevButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent ev) {
                setTip((tipIx + tips.size() - 1) % tips.size());
            }
        });
        JPanel bottomPanel = new JPanel(new BorderLayout());
        JPanel topPanel = new JPanel(new BorderLayout());
        ctrlPanel = new JPanel(new FlowLayout());
        ctrlPanel.add(closeButton);
        ctrlPanel.add(prevButton);
        ctrlPanel.add(nextButton);
        bottomPanel.add(ctrlPanel, BorderLayout.EAST);
        JLabel titleC = new JLabel(""Did you know that..."");
        titleC.setFont(new Font(""Dialog"", Font.BOLD, 15));
        titleC.setBorder(BorderFactory.createEmptyBorder(3, 3, 3, 3));
        topPanel.add(titleC, BorderLayout.WEST);
        JLabel icon = new JLabel(Activator.desktop.tipIcon);
        icon.addMouseListener(new MouseAdapter() {

            public void mouseClicked(MouseEvent ev) {
                nextAction.actionPerformed(null);
            }
        });
        icon.setToolTipText(nextButton.getText());
        add(icon, BorderLayout.WEST);
        add(scroll, BorderLayout.CENTER);
        add(bottomPanel, BorderLayout.SOUTH);
        add(topPanel, BorderLayout.NORTH);
        setTip((int) (Math.random() * tips.size()));
    }
",0
20412493,2,"    void readData(URL url) throws IOException {
        int i = 0, j = 0, k = 0;
        double xvalue, yvalue;
        double xindex, yindex;
        InputStream is = url.openStream();
        is.mark(0);
        InputStreamReader isr = new InputStreamReader(is);
        BufferedReader br = new BufferedReader(isr);
        int columnsize = 0;
        double temp_prev = 0;
        double temp_new = 0;
        int first = 0;
        s = br.readLine();
        StringTokenizer st = new StringTokenizer(s);
        columnsize = Integer.parseInt(st.nextToken());
        data = new double[columnsize][100][100];
        isize = 0;
        jsize = 0;
        while ((s = br.readLine()) != null) {
            st = new StringTokenizer(s);
            for (k = 0; k < columnsize; k++) {
                temp_new = Double.parseDouble(st.nextToken());
                if (first == 0) {
                    temp_prev = temp_new;
                    first = 1;
                }
                if (k == 0) {
                    if (temp_new != temp_prev) {
                        temp_prev = temp_new;
                        i++;
                        j = 0;
                    }
                }
                data[k][i][j] = temp_new;
            }
            j++;
        }
        isize = i + 1;
        jsize = j;
    }
",0
13152325,2,"    public void loadExistingAntlibs(ClassLoader classLoader) {
        URL antlibUrl;
        URI antlibUri;
        try {
            Enumeration<URL> resources = classLoader == null ? ClassLoader.getSystemResources(antLibsResource) : classLoader.getResources(antLibsResource);
            while (resources.hasMoreElements()) {
                URL url = resources.nextElement();
                InputStream stream = url.openStream();
                BufferedReader reader = new BufferedReader(new InputStreamReader(stream, ""UTF-8""));
                for (String line = reader.readLine(); line != null; line = reader.readLine()) {
                    String pkg = line.trim();
                    URI uri = URI.create(""antlib:"" + pkg);
                    URI resource2antlib = URI.create(antLibsResource2root + pkg.replace('.', '/') + (pkg.isEmpty() ? """" : ""/"") + ""antlib.xml"");
                    antlibUri = NetUtils.resolve(url.toURI(), resource2antlib);
                    try {
                        antlibUrl = antlibUri.toURL();
                    } catch (IllegalArgumentException e) {
                        System.err.println(""base uri: "" + url);
                        System.err.println(""relativepath: "" + resource2antlib);
                        System.err.println(""target uri: "" + antlibUri);
                        throw new RuntimeException(antlibUri.toString(), e);
                    }
                    loadAntLib(antlibUrl, uri);
                }
                reader.close();
                stream.close();
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (URISyntaxException e) {
            throw new RuntimeException(e);
        }
    }
",0
6544682,2,"    private String getXML(String url) throws ClientProtocolException, IOException {
        HttpClient client = new DefaultHttpClient();
        HttpGet get = new HttpGet(url);
        HttpResponse responseGet = client.execute(get);
        HttpEntity resEntityGet = responseGet.getEntity();
        BufferedReader in = new BufferedReader(new InputStreamReader(resEntityGet.getContent()));
        StringBuffer sb = new StringBuffer("""");
        String line = """";
        String NL = System.getProperty(""line.separator"");
        while ((line = in.readLine()) != null) {
            sb.append(line + NL);
        }
        in.close();
        String xml = sb.toString();
        return xml;
    }
",0
8664460,2,"    public String getScore(int id) {
        String title = null;
        try {
            URL url = new URL(BASE_URL + id + "".html"");
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                if (line.contains(""<title>"")) {
                    title = line.substring(line.indexOf(""<title>"") + 7, line.indexOf(""</title>""));
                    title = title.substring(0, title.indexOf(""|"")).trim();
                    break;
                }
            }
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return title;
    }
",0
21407347,2,"    public boolean load() {
        if (getFilename() != null && getFilename().length() > 0) {
            try {
                File file = new File(PreferencesManager.getDirectoryLocation(""macros"") + File.separator + getFilename());
                URL url = file.toURL();
                InputStreamReader isr = new InputStreamReader(url.openStream());
                BufferedReader br = new BufferedReader(isr);
                String line = br.readLine();
                String macro_text = """";
                while (line != null) {
                    macro_text = macro_text.concat(line);
                    line = br.readLine();
                    if (line != null) {
                        macro_text = macro_text.concat(System.getProperty(""line.separator""));
                    }
                }
                code = macro_text;
            } catch (Exception e) {
                System.err.println(""Exception at StoredMacro.load(): "" + e.toString());
                return false;
            }
        }
        return true;
    }
",0
20094305,2,"    protected String getPageText(final String url) {
        StringBuilder b = new StringBuilder();
        BufferedReader reader = null;
        try {
            reader = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
            String line = null;
            while ((line = reader.readLine()) != null) {
                b.append(line).append('\n');
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        }
        return b.toString();
    }
",0
13569444,2,"    private static String readURL(URL url) throws IOException {
        BufferedReader in = null;
        StringBuffer s = new StringBuffer();
        try {
            in = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            while ((str = in.readLine()) != null) {
                s.append(str);
            }
        } finally {
            if (in != null) in.close();
        }
        return s.toString();
    }
",0
20782631,14,"    private int binarySearch(Object left, Object[] rightArray) throws DException {
        int low = 0, high = rightArray.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            SuperComparator comparator = comparators[mid];
            int returnValue = comparator.compare(left, rightArray[mid]);
            if (returnValue < 0) {
                high = mid - 1;
            } else if (returnValue > 0) {
                low = mid + 1;
            } else {
                return 0;
            }
        }
        return -1;
    }
",0
12494726,14,"    public int binarySearch(double value) {
        int start = 0;
        int end = instances.size() - 1;
        while (start <= end) {
            int v = (start + end) / 2;
            if ((Double) instances.elementAt(v) == value) {
                return v;
            } else if ((Double) instances.elementAt(v) < value) {
                start = v + 1;
            } else {
                end = v - 1;
            }
        }
        return -1;
    }
",0
23677160,14,"	public static int binarySearch2(int arr[], int key) {
		//Implementation: Iterative, primitive type.
		int imin = 0;
		int imax = arr.length - 1;
		while(imin <= imax) {
			int imid = imin + (imax - imin)/2;
			if (key < arr[imid])
				imax = imid-1;
			else if (key > arr[imid])
				imin = imid + 1;
			else
				return imid;
		}
		return -1;
	}
",0
22458177,14,"    private int findNearest(double target) {
        if (target < this.axisVals.get(0).value || target > this.axisVals.get(this.axisVals.size() - 1).value) {
            return -1;
        }
        int low = 0;
        int high = this.axisVals.size() - 1;
        while (high > low + 1) {
            int mid = (low + high) / 2;
            AxisValue midVal = this.axisVals.get(mid);
            if (midVal.value == target) return midVal.index; else if (midVal.value < target) low = mid; else high = mid;
        }
        AxisValue lowVal = this.axisVals.get(low);
        AxisValue highVal = this.axisVals.get(high);
        return (Math.abs(target - lowVal.value) < Math.abs(target - highVal.value)) ? lowVal.index : highVal.index;
    }
",0
18434456,14,"    static char charshape(char s, int which) {
        int l, r, m;
        if ((s >= 0x0621) && (s <= 0x06D3)) {
            l = 0;
            r = chartable.length - 1;
            while (l <= r) {
                m = (l + r) / 2;
                if (s == chartable[m][0]) {
                    return chartable[m][which + 1];
                } else if (s < chartable[m][0]) {
                    r = m - 1;
                } else {
                    l = m + 1;
                }
            }
        }
        return s;
    }
",0
21796885,14,"    private int bsearch(int bnum) {
        int l = 0, r = size;
        while (l < r) {
            int p = (l + r) / 2;
            if (bnum < offs[p]) r = p; else if (bnum > offs[p]) l = p + 1; else return p;
        }
        return l;
    }
",0
21093846,14,"    private static boolean searchPrime(int n, int min, int max) {
        if (min > max) {
            return false;
        }
        int i = (min + max) / 2;
        if (primes[i] == n) {
            return true;
        } else if (n < primes[i]) {
            return searchPrime(n, min, i - 1);
        } else {
            return searchPrime(n, i + 1, max);
        }
    }
",0
19312329,14,"    public static int search(IList ls, Object k, IComparator c, int low, int high) {
        while (low <= high) {
            int mid = (low + high) / 2;
            Object midVal = ls.get(mid);
            int cmp = c.compare(midVal, k);
            if (cmp < 0) low = mid + 1; else if (cmp > 0) high = mid - 1; else return mid;
        }
        return -(low + 1);
    }
",0
19237529,14,"    private int calculateSpeed() {
        int weight = (punchPower + kickPower) / 2;
        int height = (punchReach + kickReach) / 2;
        return (int) Math.round(Math.abs(0.5 * (height - weight)));
    }
",0
19849732,14,"    public int getPlayersIdx(String player) {
        if (player == null || player == """") return -1;
        int start = 0;
        int end = playersIdx - 1;
        int mid = end / 2;
        int found = -1;
        String s = """";
        while (start <= end && found == -1) {
            if ((s = players[mid].getPlayer()).equalsIgnoreCase(player)) {
                found = mid;
            } else if (player.compareToIgnoreCase(s) < 0) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
            mid = (start + end) / 2;
        }
        return found;
    }
",0
15180725,14,"    private double searchMax(Function func, Function deriv, double x1, double x2, int depth) {
        double mid = (x1 + x2) / 2;
        param[0] = mid;
        if (depth >= 13) return func.getVal(param);
        double slope = deriv.getVal(param);
        if (slope > 0) return searchMax(func, deriv, mid, x2, depth + 1); else return searchMax(func, deriv, x1, mid, depth + 1);
    }
",0
17221035,14,"    public int getLine(Address address) {
        if (offsets.length <= 0) {
            return -1;
        }
        Address addr = address.newAddress(segment, 0);
        int offset = address.getLinearAddress() - addr.getLinearAddress();
        if (offset < (offsets[0] & 0xffff) || offset > (offsets[offsets.length - 1] & 0xffff)) {
            return -1;
        }
        int s = 0;
        int e = offsets.length;
        while (s < e) {
            int i = (e + s) / 2;
            int off = (offsets[i] & 0xffff);
            if (offset > off) {
                s = i + 1;
            } else if (offset < off) {
                e = i;
            } else {
                return lines[i];
            }
        }
        return -1;
    }
",0
23677161,14,"	public static <T extends Comparable<T>> int binarySearch4(T[] arr, T key) {
		int imin = 0;
		int imax = arr.length - 1;
		while(imin <= imax) {
			int imid = imin + (imax - imin)/2;
			if (key.compareTo(arr[imid]) < 0)//(key < arr[imid])
				imax = imid-1;
			else if (key.compareTo(arr[imid]) > 0)//(key > arr[imid])
				imin = imid + 1;
			else
				return imid;
		}
		return -1;
	}
",0
23553481,14,"    private boolean addToSortedList(Object element) {
        int min = 0;
        int max = size() - 1;
        boolean found = false;
        int currentIndex = 0;
        int compareResult;
        if (max >= 0) {
            do {
                currentIndex = (min + max) / 2;
                compareResult = ((Comparable) myList.get(currentIndex)).compareTo(element);
                if (compareResult < 0) {
                    min = currentIndex + 1;
                } else if (compareResult > 0) {
                    max = currentIndex - 1;
                } else {
                    found = true;
                }
            } while ((min <= max) && (found == false));
        }
        if (found == false && size() > 0) {
            if (((Comparable) element).compareTo(get(currentIndex)) > 0) {
                myList.add(currentIndex + 1, element);
            } else {
                myList.add(currentIndex, element);
            }
            return true;
        } else if (found == false) {
            myList.add(currentIndex, element);
            return true;
        } else {
            System.out.println(""Element found in vector already."");
            return false;
        }
    }
",0
23347274,14,"    protected static final int findClosest(ByteChunk name, ByteEntry[] array, int len) {
        int a = 0;
        int b = len - 1;
        if (b == -1) {
            return -1;
        }
        if (compare(name, array[0].name) < 0) {
            return -1;
        }
        if (b == 0) {
            return 0;
        }
        int i = 0;
        while (true) {
            i = (b + a) / 2;
            int result = compare(name, array[i].name);
            if (result == 1) {
                a = i;
            } else if (result == 0) {
                return i;
            } else {
                b = i;
            }
            if ((b - a) == 1) {
                int result2 = compare(name, array[b].name);
                if (result2 < 0) {
                    return a;
                } else {
                    return b;
                }
            }
        }
    }
",0
17989082,14,"    public static int search(int[] array, int value) {
        int end = array.length - 1;
        int start = 0;
        int middle;
        while (start < end) {
            middle = (start + end) / 2;
            if (value > array[middle]) {
                start = middle + 1;
            } else if (value < array[middle]) {
                end = middle - 1;
            } else {
                return middle;
            }
        }
        return -1;
    }
",0
17873479,14,"    public static void binarySearch(int[] array, int lowerbound, int upperbound, int key) {
        int position;
        int comparisonCount = 1;
        position = (lowerbound + upperbound) / 2;
        while ((array[position] != key) && (lowerbound <= upperbound)) {
            comparisonCount++;
            if (array[position] > key) {
                upperbound = position - 1;
            } else {
                lowerbound = position + 1;
            }
            position = (lowerbound + upperbound) / 2;
        }
        if (lowerbound <= upperbound) {
            System.out.println(""The number was found in array subscript"" + position);
            System.out.println(""The binary search found the number after "" + comparisonCount + ""comparisons."");
        } else {
            System.out.println(""Sorry, the number is not in this array.  The binary search made "" + comparisonCount + "" comparisons."");
        }
    }
",0
13445592,14,"    int chopTuesday(int key, int array[]) {
        int min = 0;
        int max = array.length - 1;
        while (min <= max) {
            int probe = (min + max) / 2;
            switch(new Integer(key).compareTo(new Integer(array[probe]))) {
                case (0):
                    return probe;
                case (1):
                    min = probe + 1;
                    break;
                case (-1):
                    max = probe - 1;
                    break;
                default:
                    throw new Error(""unexpected result from compareTo"");
            }
        }
        return -1;
    }
",0
15428863,14,"    protected int search(String num) {
        String[] strings = this.strings;
        int lb = 0, ub = string_count, index;
        String index_key;
        while (true) {
            if (lb >= ub - 1) {
                if (lb < string_count && !greaterThan(num, strings[lb])) return lb; else return lb + 1;
            }
            index = (lb + ub) / 2;
            index_key = strings[index];
            if (greaterThan(num, index_key)) lb = index + 1; else if (lessThan(num, index_key)) ub = index; else return index;
        }
    }
",0
21672020,14,"    public int binarySearch(final short key) {
        int low = 0;
        int middle;
        int high = super.size() - 1;
        short middleValue;
        while (low <= high) {
            middle = (low + high) / 2;
            middleValue = this.shortArray[middle];
            if (middleValue < key) {
                low = middle + 1;
            } else if (middleValue > key) {
                high = middle - 1;
            } else {
                return middle;
            }
        }
        return -(low + 1);
    }
",0
22953885,14,"    private int indexOf(char c) {
        int start = 0;
        int end = intervals.size() - 1;
        while (start <= end) {
            int check = (start + end) / 2;
            Interval i = intervals.get(check);
            if (start == end) return i.contains(c) ? start : -1;
            if (c < i.start) {
                end = check - 1;
                continue;
            }
            if (c > i.end) {
                start = check + 1;
                continue;
            }
            return check;
        }
        return -1;
    }
",0
22896845,14,"    public static int binarySearch(Date[] days, Date d) {
        if (days.length == 0) {
            return -1;
        }
        int startPos = 0;
        int endPos = days.length - 1;
        int m = (startPos + endPos) / 2;
        while (startPos <= endPos) {
            if (d.compare(days[m]) == 0) {
                return m;
            }
            if (d.compare(days[m]) > 0) {
                startPos = m + 1;
            }
            if (d.compare(days[m]) < 0) {
                endPos = m - 1;
            }
            m = (startPos + endPos) / 2;
        }
        return -1;
    }
",0
23307698,14,"    public static InstructionHandle findHandle(InstructionHandle[] ihs, int[] pos, int count, int target) {
        int l = 0, r = count - 1;
        do {
            int i = (l + r) / 2;
            int j = pos[i];
            if (j == target) return ihs[i]; else if (target < j) r = i - 1; else l = i + 1;
        } while (l <= r);
        return null;
    }
",0
22328285,14,"    public int getTheNearestElementAfter(int row) {
        if (row < 0) {
            throw new IllegalArgumentException(""negative value is not a valid value for a row"");
        }
        int rowAfter = -1;
        if (!listOfRow.isEmpty()) {
            int currentIndex = index;
            try {
                int startAt = 0;
                int stopAt = listOfRow.size() - 1;
                int middle = 0;
                boolean rowInTheList = false;
                while (!rowInTheList && startAt <= stopAt) {
                    middle = (startAt + stopAt) / 2;
                    rowAfter = listOfRow.getRow(middle);
                    rowInTheList = (rowAfter == row);
                    if (rowAfter > row) {
                        stopAt = middle - 1;
                    } else if (rowAfter < row) {
                        startAt = middle + 1;
                    }
                }
                index = middle;
                if (!rowInTheList) {
                    if (rowAfter < row) {
                        rowAfter = getNextElement();
                    }
                }
            } catch (IndexOutOfBoundsException e) {
                index = currentIndex;
                rowAfter = -1;
            }
        }
        return rowAfter;
    }
",0
23187237,14,"    int binarySearch(Comparable[] a, int low, int high, Comparable key) {
        int cmp;
        while (low <= high) {
            int mid = (low + high) / 2;
            Comparable midVal = a[mid];
            cmp = midVal.compareTo(key);
            if (entry.descending) cmp = -cmp;
            if (cmp < 0) low = mid + 1; else if (cmp > 0) high = mid - 1; else return mid;
        }
        return -(low + 1);
    }
",0
19604413,14,"    public FieldMetaData findEmbeddedFmd(String name) {
        if (embeddedFmds == null) {
            return null;
        }
        int low = 0;
        int high = embeddedFmds.length - 1;
        name = this.name + ""/"" + name;
        while (low <= high) {
            int mid = (low + high) / 2;
            FieldMetaData midVal = embeddedFmds[mid];
            String name2 = midVal.name;
            int cmp = name2.compareTo(name);
            if (cmp < 0) {
                low = mid + 1;
            } else if (cmp > 0) {
                high = mid - 1;
            } else {
                return midVal;
            }
        }
        return null;
    }
",0
22339287,14,"    public static int peakBinarySearch(double lowMass, double highMass, ArrayList peakList) {
        int low = 0;
        int high = peakList.size() - 1;
        int middle = -1;
        Peak tmpPeak = null;
        while (low <= high) {
            middle = (low + high) / 2;
            tmpPeak = (Peak) peakList.get(middle);
            if (lowMass > tmpPeak.mass) low = middle + 1; else if (highMass < tmpPeak.mass) high = middle - 1; else if (tmpPeak.mass >= lowMass && tmpPeak.mass <= highMass) {
                return middle;
            }
        }
        return -1;
    }
",0
23506572,14,"    private GraphEdge searchInChain(List chain, Point p) {
        int r = 0;
        int l = chain.size();
        int py = p.getY();
        while (true) {
            int mid = (r + l) / 2;
            GraphEdge e = (GraphEdge) chain.get(mid);
            int ey1 = e.source.getY();
            int ey2 = e.target.getY();
            if (py >= ey1 && py <= ey2) return e; else if (py < ey1) r = mid; else l = mid;
        }
    }
",0
23677158,14,"	public static int binarySearch1(int arr[], int key, int imin, int imax) {
		//Implementation: Recursive, primitive type
		if(imax < imin)
			return -1;
		int imid = (imin+imax)/2;
		if(arr[imid] > key)
			return binarySearch1(arr,key,imin,imid-1);
		else if (arr[imid] < key)
			return binarySearch1(arr,key,imid+1,imax);
		else
			return imid;		
	}
",0
23107697,14,"    public int GetLastBaseBeforeSample(int sampleNum) {
        int first, last, mid;
        first = 1;
        last = base.length - 1;
        mid = (last - first) / 2;
        while ((last - first) >= 2) {
            if (sampleNum < basePosition[mid]) {
                last = mid;
            } else if (sampleNum > basePosition[mid]) {
                first = mid;
            } else {
                return (mid);
            }
            mid = first + (last - first) / 2;
        }
        if ((sampleNum > basePosition[first]) && (sampleNum < basePosition[last])) {
            return (first);
        }
        if (sampleNum > basePosition[last]) {
            return (last);
        }
        return (0);
    }
",0
21779317,14,"    private int search(long key, int low, int high) {
        if (low > high) {
            throw new IllegalArgumentException(""low should be <= high; low == "" + low + "", high == "" + high + "", key == "" + key + "", handleToLast == "" + handleToLast);
        }
        for (; ; ) {
            int result = (low + high) / 2;
            if (low >= high || keys[result] == key) {
                return result;
            }
            if (key < keys[result]) {
                high = result - 1;
            } else {
                low = result + 1;
            }
        }
    }
",0
23677159,14,"	public static <T extends Comparable<T>> int binarySearch3(T[] arr, T key, int imin, int imax) {
		//Implementation: Recursive, comparable type
		if(imax < imin)
			return -1;
		int imid = (imin+imax)/2;
		if(arr[imid].compareTo(key) > 0)
			return binarySearch3(arr,key,imin,imid-1);
		else if (arr[imid].compareTo(key) < 0)
			return binarySearch3(arr,key,imid+1,imax);
		else
			return imid;
	}
",0
8217672,14,"    private int searchPreIndex(final int lv, final int lb, final int rb, final int l, final int r) {
        int index = -1;
        int ll = l;
        int rr = r;
        while (rr >= ll && index == -1) {
            final int m = ll + (rr - ll) / 2;
            if (nodes[lv][m] < lb) {
                ll = m + 1;
            } else if (nodes[lv][m] > rb) {
                rr = m - 1;
            } else {
                index = m;
            }
        }
        return index;
    }
",0
22473839,14,"    protected String shortenText(GC gc, String t, int width) {
        if (t == null) {
            return null;
        }
        int w = gc.textExtent(ELLIPSIS, DRAW_FLAGS).x;
        if (width <= w) {
            return t;
        }
        int l = t.length();
        int max = l / 2;
        int min = 0;
        int mid = (max + min) / 2 - 1;
        if (mid <= 0) {
            return t;
        }
        while (min < mid && mid < max) {
            String s1 = t.substring(0, mid);
            String s2 = t.substring(l - mid, l);
            int l1 = gc.textExtent(s1, DRAW_FLAGS).x;
            int l2 = gc.textExtent(s2, DRAW_FLAGS).x;
            if (l1 + w + l2 > width) {
                max = mid;
                mid = (max + min) / 2;
            } else if (l1 + w + l2 < width) {
                min = mid;
                mid = (max + min) / 2;
            } else {
                min = max;
            }
        }
        if (mid == 0) {
            return t;
        }
        return t.substring(0, mid) + ELLIPSIS + t.substring(l - mid, l);
    }
",0
12970812,14,"    protected void addRoom(Vector rooms, Room R) {
        try {
            String roomID = R.roomID();
            int start = 0;
            int end = rooms.size() - 1;
            int lastStart = 0;
            int lastEnd = rooms.size() - 1;
            int comp = -1;
            int mid = -1;
            while (start <= end) {
                mid = (end + start) / 2;
                comp = ((Room) rooms.elementAt(mid)).roomID().compareToIgnoreCase(roomID);
                if (comp == 0) break; else if (comp > 0) {
                    lastEnd = end;
                    end = mid - 1;
                } else {
                    lastStart = start;
                    start = mid + 1;
                }
            }
            if (comp == 0) rooms.setElementAt(R, mid); else {
                if (mid >= 0) for (comp = lastStart; comp <= lastEnd; comp++) if (((Room) rooms.elementAt(comp)).roomID().compareToIgnoreCase(roomID) > 0) {
                    rooms.insertElementAt(R, comp);
                    return;
                }
                rooms.addElement(R);
            }
        } catch (Throwable t) {
            t.printStackTrace();
        }
    }
",0
21892429,14,"    private int GetLongName(CFileInfo curDir, StringRef shortName) {
        int filelist_size = curDir.fileList.size();
        if (filelist_size <= 0) return -1;
        RemoveTrailingDot(shortName);
        int low = 0;
        int high = filelist_size - 1;
        int mid, res;
        while (low <= high) {
            mid = (low + high) / 2;
            res = shortName.value.compareTo(((CFileInfo) curDir.fileList.elementAt(mid)).shortname);
            if (res > 0) low = mid + 1; else if (res < 0) high = mid - 1; else {
                shortName.value = ((CFileInfo) curDir.fileList.elementAt(mid)).orgname;
                return mid;
            }
        }
        return -1;
    }
",0
23084207,14,"    public int getIndexOfRow(int row) {
        if (row < 0) {
            throw new IllegalArgumentException(""negative value is not a valid value for a row"");
        }
        int middle = 0;
        boolean found = false;
        if (list != null && !isEmpty()) {
            int startAt = 0;
            int stopAt = size - 1;
            int result = -1;
            while (!found && startAt <= stopAt) {
                middle = (startAt + stopAt) / 2;
                result = list[middle];
                if (result == row) {
                    found = true;
                } else {
                    if (result > row) {
                        stopAt = middle - 1;
                    } else if (result < row) {
                        startAt = middle + 1;
                    }
                }
            }
        }
        if (!found) {
            middle = -1;
        }
        return middle;
    }
",0
20203799,14,"    public int find_globalid(String name) {
        int lo, hi, mid, val;
        lo = 0;
        hi = cards.length - 1;
        while (lo <= hi) {
            mid = (lo + hi) / 2;
            val = cards[mid].name.compareToIgnoreCase(name);
            if (val == 0) return (mid);
            if (val < 0) lo = mid + 1; else hi = mid - 1;
        }
        return (-1);
    }
",0
22576643,14,"    private int getRangeIndexOf(long v) {
        final int size = _ranges.size();
        if (size == 0) {
            return -1;
        }
        int lo = 0;
        int hi = size - 1;
        while (lo <= hi) {
            int mid = (lo + hi) / 2;
            LongRange r = _ranges.get(mid);
            if (r.contains(v)) {
                return mid;
            } else if (v < r.getStart()) {
                hi = mid - 1;
            } else {
                lo = mid + 1;
            }
        }
        return -(lo + 1);
    }
",0
22420472,14,"    private static int binarySearchFromTo(int a, int from, int to, IntComparator comp) {
        while (from <= to) {
            int mid = (from + to) / 2;
            int comparison = comp.compare(mid, a);
            if (comparison < 0) from = mid + 1; else if (comparison > 0) to = mid - 1; else return mid;
        }
        return -(from + 1);
    }
",0
20856866,14,"    private int rbsearch(int l, int h, double tot, double costs, List nodes) {
        if (l > h) {
            return l;
        }
        int cur = (l + h) / 2;
        double ot = ((NodeDouble) nodes.elementAt(cur)).f;
        if ((tot < ot) || (tot == ot && costs >= ((NodeDouble) nodes.elementAt(cur)).g)) {
            return rbsearch(l, cur - 1, tot, costs, nodes);
        }
        return rbsearch(cur + 1, h, tot, costs, nodes);
    }
",0
19231952,14,"    private int binarySearch(Object key) {
        String keyString = key.toString();
        int low = 0;
        int high = this.size() - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            String midVal = get(mid).toString();
            int cmp = midVal.compareToIgnoreCase(keyString);
            if (cmp < 0) {
                low = mid + 1;
            } else if (cmp > 0) {
                high = mid - 1;
            } else {
                return mid;
            }
        }
        return -(low + 1);
    }
",0
21650382,14,"    private static final int search(NodeProxy[] items, int low, int high, NodeProxy cmpItem) {
        int mid;
        int cmp;
        while (low <= high) {
            mid = (low + high) / 2;
            cmp = items[mid].compareTo(cmpItem);
            if (cmp == 0) return mid;
            if (cmp > 0) high = mid - 1; else low = mid + 1;
        }
        return -1;
    }
",0
23553480,14,"    private int search(Object element) {
        int min = 0;
        int max = size() - 1;
        boolean found = false;
        int currentIndex = 0;
        int compareResult;
        if (max >= 0) {
            do {
                currentIndex = (min + max) / 2;
                compareResult = ((Comparable) myList.get(currentIndex)).compareTo(element);
                if (compareResult < 0) {
                    min = currentIndex + 1;
                } else if (compareResult > 0) {
                    max = currentIndex - 1;
                } else {
                    found = true;
                }
            } while ((min <= max) && (found == false));
            if (found == true) {
                return currentIndex;
            } else {
                return INVALID_INDEX;
            }
        }
        return INVALID_INDEX;
    }
",0
20692840,14,"    public ClassMetaData getClassMetaData(int classId) {
        int low = 0;
        int high = classes.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            ClassMetaData midVal = classes[mid];
            int midValClassId = midVal.classId;
            if (midValClassId < classId) {
                low = mid + 1;
            } else if (midValClassId > classId) {
                high = mid - 1;
            } else {
                return midVal;
            }
        }
        return null;
    }
",0
23273776,14,"    protected int binarySearchForNearestAlt(int val, int begin, int end) {
        while (true) {
            int mid = (begin + end) / 2;
            if (mid == end || (baseList.get(mid) <= val && baseList.get(mid + 1) > val)) return mid; else if (baseList.get(mid) < val) {
                begin = mid + 1;
            } else {
                end = mid;
            }
        }
    }
",0
19327898,14,"    private static boolean found(byte a, byte b) {
        int l = 0, r = n - 1, op = -1;
        while (l <= r) {
            int mid = (l + r) / 2;
            if (first[mid] == a) {
                op = mid;
                break;
            }
            if (first[mid] > a) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        if (op == -1) {
            return false;
        }
        l = 0;
        r = num[op];
        while (l <= r) {
            int mid = (l + r) / 2;
            if (second[op][mid] == b) {
                return true;
            }
            if (second[op][mid] > b) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return false;
    }
",0
18690714,14,"    private int findIndexBySize(int key) {
        int lo = 0;
        int hi = itemsBySize.size() - 1;
        while (lo <= hi) {
            int mid = lo + (hi - lo) / 2;
            if (key < ((HeapItem) itemsBySize.get(mid)).size) hi = mid - 1; else if (key > ((HeapItem) itemsBySize.get(mid)).size) lo = mid + 1; else return mid;
        }
        HeapItem item = getLargestItem();
        if (item == null || key > item.size) return -1;
        return lo;
    }
",0
20856867,14,"    private int bsearch(int l, int h, double tot, double costs, List nodes) {
        int lo = l;
        int hi = h;
        while (lo <= hi) {
            int cur = (lo + hi) / 2;
            double ot = ((NodeDouble) nodes.elementAt(cur)).f;
            if ((tot < ot) || (tot == ot && costs >= ((NodeDouble) nodes.elementAt(cur)).g)) {
                hi = cur - 1;
            } else {
                lo = cur + 1;
            }
        }
        return lo;
    }
",0
23462780,14,"    private void binarySearchInsert(int rowid, RowComponent new_comp) {
        if (rowid > last_active) last_active = rowid;
        int num_rows = row_components.size();
        int front = 0;
        int end = num_rows - 1;
        if (num_rows <= 0) {
            printMessage(""inserting first row "" + rowid);
            ArrayList new_list = new ArrayList();
            new_list.add(new_comp);
            if (new_list.size() > max_row_size) max_row_size = new_list.size();
            row_components.add(new_list);
            row_alignments.put(new Integer(rowid), LEFT);
            return;
        }
        while (front < end) {
            int mid = (front + end) / 2;
            RowComponent r_comp = (RowComponent) ((ArrayList) row_components.get(mid)).get(0);
            if (r_comp.getRowID() == rowid) {
                end = mid;
                front = mid;
            } else if (rowid < r_comp.getRowID()) {
                end = mid - 1;
            } else if (rowid > r_comp.getRowID()) {
                front = mid + 1;
            }
        }
        RowComponent r_comp = (RowComponent) ((ArrayList) row_components.get(front)).get(0);
        if (rowid == r_comp.getRowID()) {
            printMessage(""inserting to existing row "" + rowid);
            ((ArrayList) row_components.get(front)).add(new_comp);
            if (((ArrayList) row_components.get(front)).size() > max_row_size) max_row_size = ((ArrayList) row_components.get(front)).size();
        } else {
            insertNewRow(rowid, front, new_comp);
        }
    }
",0
23273775,14,"    protected int binarySearchForNearest(int val, int begin, int end) {
        int mid = (begin + end) / 2;
        if (mid == end || (baseList.get(mid) <= val && baseList.get(mid + 1) > val)) return mid; else if (baseList.get(mid) < val) return binarySearchForNearest(val, mid + 1, end); else return binarySearchForNearest(val, begin, mid);
    }
",0
9582032,14,"    public static int binarySearch(Object[] list, Object toFind, Comparator comp) {
        int low = 0;
        int high = list.length - 1;
        int mid;
        while (low <= high) {
            mid = (low + high) / 2;
            if (comp.compare(list[mid], toFind) < 0) {
                low = mid + 1;
            } else if (comp.compare(list[mid], toFind) > 0) {
                high = mid - 1;
            } else {
                return mid;
            }
        }
        lowGlobal = low;
        return NOT_FOUND;
    }
",0
17306947,14,"    private int _goRecursive(int[] array, int target, int start, int end) {
        if (start > end) return -1;
        int currentPosition = (end + start) / 2;
        if (array[currentPosition] == target) return currentPosition; else if (array[currentPosition] > target) {
            end = currentPosition - 1;
        } else {
            start = currentPosition + 1;
        }
        return _goRecursive(array, target, start, end);
    }
",0
12055039,14,"    private int properRoomIndex(int x, int y) {
        if (rooms.size() == 0) return 0;
        synchronized (rooms) {
            int start = 0;
            int end = rooms.size() - 1;
            int comp = 0;
            long total = ((long) x << 31) + y;
            long comptotal = 0;
            int mid = 0;
            while (start <= end) {
                mid = (end + start) / 2;
                comptotal = (((Integer) rooms.elementAt(mid, 2)).longValue() << 31) + ((Integer) rooms.elementAt(mid, 3)).longValue();
                comp = comptotal > total ? 1 : (comptotal == total) ? 0 : -1;
                if (comp == 0) return mid; else if (comp > 0) end = mid - 1; else start = mid + 1;
            }
            if (end < 0) return 0;
            if (start >= rooms.size()) return rooms.size() - 1;
            return mid;
        }
    }
",0
20280269,14,"    private String aliasLookup(String alias) {
        int aliasListOffset = getAliasListOffset();
        int min = 0;
        int max = content.getInt(aliasListOffset) - 1;
        while (max >= min) {
            int mid = (min + max) / 2;
            int aliasOffset = content.getInt((aliasListOffset + 4) + (mid * 8));
            int mimeOffset = content.getInt((aliasListOffset + 4) + (mid * 8) + 4);
            int cmp = getMimeType(aliasOffset).compareTo(alias);
            if (cmp < 0) {
                min = mid + 1;
            } else if (cmp > 0) {
                max = mid - 1;
            } else {
                return getMimeType(mimeOffset);
            }
        }
        return null;
    }
",0
22079918,14,"    public static void orderedInsert(Vector orderedArray, IComparable obj) {
        int size = orderedArray.size();
        if (size == 0) {
            orderedArray.addElement(obj);
            return;
        }
        int begin = 0;
        int end = size - 1;
        int mid = 0, cmp = 0;
        while (begin <= end) {
            mid = (end + begin) / 2;
            IComparable obj2 = (IComparable) orderedArray.elementAt(mid);
            cmp = obj.compares(obj2);
            if (cmp == 0) {
                orderedArray.insertElementAt(obj, mid);
                return;
            } else if (cmp < 0) {
                end = mid - 1;
            } else {
                begin = mid + 1;
            }
        }
        if (cmp < 0) {
            orderedArray.insertElementAt(obj, mid);
        } else {
            orderedArray.insertElementAt(obj, mid + 1);
        }
    }
",0
20005165,14,"    public static char precompose(char base, char comb) {
        int min = 0;
        int max = precompositions.length - 1;
        int mid;
        long sought = base << UNICODE_SHIFT | comb;
        long that;
        while (max >= min) {
            mid = (min + max) / 2;
            that = precompositions[mid][1] << UNICODE_SHIFT | precompositions[mid][2];
            if (that < sought) min = mid + 1; else if (that > sought) max = mid - 1; else return precompositions[mid][0];
        }
        return base;
    }
",0
22458011,14,"    public static int findStringHit(String txt, int x, FontMetrics fm, boolean alwaysmin) {
        if (x <= 0) return 0;
        int min = 0;
        int max = txt.length();
        int lmin = 0;
        int lmax = fm.stringWidth(txt);
        while (max - min > 1) {
            int cur = (max + min) / 2;
            int curlen = fm.stringWidth(txt.substring(0, cur));
            p(""Iter: "" + cur + "" "" + curlen + "" "" + max + "" "" + lmax + "" "" + min + "" "" + lmin);
            if (curlen > x) {
                max = cur;
                lmax = curlen;
            } else {
                min = cur;
                lmin = curlen;
            }
        }
        int mx = lmax - x;
        int mn = x - lmin;
        if (mn < mx || alwaysmin) return min; else return max;
    }
",0
12332825,14,"    private static int binarySearch(int[] index, double[] vals, double target) {
        int lo = 0, hi = index.length - 1;
        while (hi - lo > 1) {
            int mid = lo + (hi - lo) / 2;
            double midval = vals[index[mid]];
            if (target > midval) {
                lo = mid;
            } else if (target < midval) {
                hi = mid;
            } else {
                while ((mid > 0) && (vals[index[mid - 1]] == target)) {
                    mid--;
                }
                return mid;
            }
        }
        return lo;
    }
",0
19846905,14,"    private int indexOfFisrtNameAfter(int position) {
        int left = 0;
        int right = this.potentialVariableNamesPtr;
        next: while (true) {
            if (right < left) return -1;
            int mid = left + (right - left) / 2;
            int midPosition = this.potentialVariableNameStarts[mid];
            if (midPosition < 0) {
                int nextMid = indexOfNextName(mid);
                if (nextMid < 0 || right < nextMid) {
                    right = mid - 1;
                    continue next;
                }
                mid = nextMid;
                midPosition = this.potentialVariableNameStarts[nextMid];
                if (mid == right) {
                    int leftPosition = this.potentialVariableNameStarts[left];
                    if (leftPosition < 0 || leftPosition < position) {
                        int nextLeft = indexOfNextName(left);
                        if (nextLeft < 0) return -1;
                        left = nextLeft;
                        continue next;
                    }
                    return left;
                }
            }
            if (left != right) {
                if (midPosition < position) {
                    left = mid + 1;
                } else {
                    right = mid;
                }
            } else {
                if (midPosition < position) {
                    return -1;
                }
                return mid;
            }
        }
    }
",0
19594031,14,"    protected Integer insert(Integer j, Integer k) {
        if (isNonzero(k) && isGreaterThan(k, j) && isLessThan(new Integer(k.intValue() - 1), j)) {
            thresh.put(k, j);
        } else {
            int hi = -1;
            if (isNonzero(k)) {
                hi = k.intValue();
            } else if (thresh.size() > 0) {
                hi = ((Integer) thresh.lastKey()).intValue();
            }
            if (hi == -1 || j.compareTo(getLastValue()) > 0) {
                append(j);
                k = new Integer(hi + 1);
            } else {
                int lo = 0;
                while (lo <= hi) {
                    int index = (hi + lo) / 2;
                    Integer val = (Integer) thresh.get(new Integer(index));
                    int cmp = j.compareTo(val);
                    if (cmp == 0) {
                        return null;
                    } else if (cmp > 0) {
                        lo = index + 1;
                    } else {
                        hi = index - 1;
                    }
                }
                thresh.put(new Integer(lo), j);
                k = new Integer(lo);
            }
        }
        return k;
    }
",0
15381586,14,"    protected static int binarySearchFromTo(int[] array, int from, int to, IntComparator comp) {
        final int key = 0;
        while (from <= to) {
            int mid = (from + to) / 2;
            int comparison = comp.compare(array[mid], array[key]);
            if (comparison < 0) from = mid + 1; else if (comparison > 0) to = mid - 1; else return mid;
        }
        return -(from + 1);
    }
",0
22328284,14,"    public int getTheNearestElementBefore(int row) {
        if (row < 0) {
            throw new IllegalArgumentException(""negative value is not a valid value for a row"");
        }
        int rowBefore = -1;
        if (!listOfRow.isEmpty()) {
            int currentIndex = index;
            try {
                int startAt = 0;
                int stopAt = listOfRow.size() - 1;
                int middle = 1;
                boolean rowInTheList = false;
                while (!rowInTheList && startAt <= stopAt) {
                    middle = (startAt + stopAt) / 2;
                    rowBefore = listOfRow.getRow(middle);
                    rowInTheList = (rowBefore == row);
                    if (rowBefore > row) {
                        stopAt = middle - 1;
                    } else if (rowBefore < row) {
                        startAt = middle + 1;
                    }
                }
                index = middle;
                if (!rowInTheList) {
                    if (rowBefore > row) {
                        rowBefore = getPreviousElement();
                    }
                }
            } catch (IndexOutOfBoundsException e) {
                index = currentIndex;
                rowBefore = -1;
            }
        }
        return rowBefore;
    }
",0
20472549,14,"    protected final int search(int key) {
        int beg = 0;
        int end = size();
        while (beg < end) {
            int med = (beg + end) / 2;
            Pair p = at(med);
            if (key < p.key) end = med; else if (key > p.key) beg = med + 1; else return med;
        }
        return beg;
    }
",0
18724117,14,"    public int getLineAtOffset(int offset) {
        if (offset == 0 || regionCount <= 1) {
            return 0;
        }
        if (offset == document.getLength()) {
            return regionCount - 1;
        }
        int left = 0;
        int right = regionCount - 1;
        int midIndex = 0;
        while (left <= right) {
            midIndex = (left + right) / 2;
            if (offset < offsets[midIndex]) {
                right = midIndex;
            } else if (offset >= offsets[midIndex] + lengths[midIndex]) {
                left = midIndex + 1;
            } else {
                return midIndex;
            }
        }
        return midIndex;
    }
",0
15825818,14,"    public int findEvent(double miliseconds) {
        double seconds = miliseconds / 1000.0;
        if ((events == null) || events.size() < 1) return -1;
        int a = 0;
        int b = getNumberOfEvents();
        int index = (a + b) / 2;
        while (!(getEvent(index).contains(seconds))) {
            int newIndex = -1;
            if (getEvent(index).getStartTime() > seconds) {
                b = index;
            } else if (getEvent(index).getEndTime() < seconds) {
                a = index;
            } else return index;
            newIndex = (a + b) / 2;
            if (index == newIndex) return -1;
            index = newIndex;
        }
        return index;
    }
",0
16222973,14,"    private void insert(Vector list, Comparable value) {
        int left = 0;
        int right = list.size();
        Comparable temp;
        while (left < right) {
            int middle = (left + right) / 2;
            temp = (Comparable) list.get(middle);
            if (temp.compareTo(value) == 0) return;
            if (temp.compareTo(value) > 0) {
                left = middle + 1;
            } else {
                right = middle;
            }
        }
        list.insertElementAt(value, right);
    }
",0
21558163,14,"    private int getIndexForRangeSplit(long[] splitIndices, long rootIndex, int min, int max) {
        if (rootIndex == splitIndices[min] || rootIndex == splitIndices[max]) {
            System.out.println(""Error: root index ("" + rootIndex + "") shouldn't equal splitIndices[min] ("" + splitIndices[min] + "") or splitIndices[max] ("" + splitIndices[max] + "") when finding a split range"");
        }
        int mid = (min + max) / 2;
        while (min + 1 < max && splitIndices[mid] != rootIndex) {
            if (splitIndices[mid] < rootIndex) min = mid; else max = mid;
            mid = (min + max) / 2;
        }
        mid = (min + max) / 2;
        return mid;
    }
",0
23677175,20,"	public static int getFibonacci(int n) {
		if(n == 0)
			return 0;
		else if (n == 1)
			return 1;
		else
			return getFibonacci(n-1) + getFibonacci(n-2);
	}
",0
23677185,26,"	public static int gcd3(int a, int b) {
		if (b == 0) {
			return 1;
		} else {
			return gcd3(b, a % b);
		}
	}
",0
